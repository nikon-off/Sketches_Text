
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьJsonМетода(Данные, Метод)
	
	Json = "";
	
	Если Метод = "/ipoteka/application/api/v1/clients" Тогда
		
		phoneNumber = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(Данные.КонтактнаяИнформацияМобильныйТелефон);
		
		ДанныеКлиента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.Клиент, "ОсновноеКонтактноеЛицо,CRM_Фамилия,CRM_Имя,CRM_Отчество,Наименование");   
		Если Не ЗначениеЗаполнено(ДанныеКлиента.CRM_Фамилия) Тогда
			ТекМассив = СтрРазделить(ДанныеКлиента.Наименование, " ");
			Количество = ТекМассив.Количество();
			Если Количество > 0 Тогда
				ДанныеКлиента.CRM_Фамилия = ТекМассив[0];
				Если Количество > 1 Тогда
					ДанныеКлиента.CRM_Имя = ТекМассив[1];     
					Если Количество > 2 Тогда
						ДанныеКлиента.CRM_Отчество = ТекМассив[2];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;   
		
		ТекДанные = Новый Структура();    
		ТекДанные.Вставить("firstName", ДанныеКлиента.CRM_Фамилия); 
		ТекДанные.Вставить("lastName", ДанныеКлиента.CRM_Отчество);
		ТекДанные.Вставить("middleName", ДанныеКлиента.CRM_Имя);
		ТекДанные.Вставить("phoneNumber", Число(Прав(phoneNumber, 10)));
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, ТекДанные);
		Json = Запись.Закрыть();
		
	ИначеЕсли Метод = "/ipoteka/application/api/v1/products/select" Тогда
		
		borrowerData = Новый Структура;  
		borrowerData.Вставить("birthday", Формат(Данные.ДатаРождения, "ДФ=yyyy-MM-dd"));   
		borrowerData.Вставить("marriageStatus", ПолучитьЗначение(Данные.СемейноеПоложение)); 
		borrowerData.Вставить("jobIncomeType", ПолучитьЗначение(Данные.СправкаОДоходах));
		Параметры = Новый Структура();
		Параметры.Вставить("borrowerData", borrowerData);    
		Параметры.Вставить("loanPurpose", ПолучитьЗначение(Данные.КПОбъектНедвижимостиОсновной));
		loanConditions = Новый Структура;  
		loanConditions.Вставить("realtyCost", XMLСтрока(Данные.Стоимость * 100));   
		loanConditions.Вставить("deposit", XMLСтрока(Данные.КПСобственныеСредства * 100)); 
		loanConditions.Вставить("term", XMLСтрока(Данные.КПСрок * 12));
		Параметры.Вставить("loanConditions", loanConditions);  
		discounts = Новый Массив;
		Если Данные.Свойство("Скидки") Тогда
			Для каждого ТекСкидка Из Данные.Скидки Цикл
				discounts.Добавить(ПолучитьЗначение(ТекСкидка));
			КонецЦикла;
		КонецЕсли;  
		Если discounts.Количество() Тогда
			Параметры.Вставить("discounts", discounts);
		КонецЕсли;
		ЗаписьJSON = Новый ЗаписьJSON;    
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Параметры);	
		Json = ЗаписьJSON.Закрыть();
		
	ИначеЕсли Метод = "/ipoteka/application/api/v1/calculations" Тогда
		
		Параметры = Новый Структура();
		Параметры.Вставить("borrowerCategory", ПолучитьЗначение(Данные.КатегорияЗаемщика));    
		Параметры.Вставить("casId", Данные.Домклик_idКлиента);   
		Параметры.Вставить("deposit", XMLСтрока(Данные.КПСобственныеСредства * 100));   
		Параметры.Вставить("region", ПолучитьКодРегиона(Данные.РегионПриобретенияНедвижимости));
		discounts = Новый Массив; 
		Если Данные.СВитриныДомклик Тогда
			discounts.Добавить("DOM_CLICK");
		КонецЕсли;
		Если Данные.СтрахованиеЖизни Тогда
			discounts.Добавить("LIFE_INSURANCE");
		КонецЕсли;
		Если Данные.СкидкаОтЗастройщика Тогда
			discounts.Добавить("DEVELOPER_COMMON");
		КонецЕсли;
		Если Данные.ОнлайнРегистрация Тогда
			discounts.Добавить("ONLINE_REGISTRATION");
		КонецЕсли;
		Если discounts.Количество() Тогда
			Параметры.Вставить("discounts", discounts);
		КонецЕсли;   
		Параметры.Вставить("estateCost", XMLСтрока(Данные.КПСтоимостьОбъектаНедвижимости * 100));
		Параметры.Вставить("product", ПолучитьЗначение(Данные.КПЖелищныйКредит)); 
		Параметры.Вставить("term", XMLСтрока(Данные.КПСрок * 12));
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Параметры);
		Json = Запись.Закрыть(); 
		
		Если СтрНайти(Json, "null") Тогда
			Возврат "";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(Метод, "/ipoteka/application/api/v1/deals/") > 0 
		И СтрНайти(Метод, "/applications") = 0 Тогда
		
		Параметры = Новый Структура();
		Параметры.Вставить("calcId", ОбработатьИд(Данные.Домклик_idРасчета));    
		Параметры.Вставить("borrowerCasId", Данные.Домклик_idКлиента);   
		Если Данные.Свойство("officeId") Тогда
			Параметры.Вставить("officeId", Данные.officeId);
		КонецЕсли;
		Параметры.Вставить("webhookUrl", Данные.webhookUrl);   
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Параметры);
		Json = Запись.Закрыть();
		
	ИначеЕсли СтрНайти(Метод, "/ipoteka/application/api/v1/deals/") > 0 
		И СтрНайти(Метод, "/applications") > 0 Тогда
		
		Параметры = Новый Структура();
		Параметры.Вставить("additionalIncome", XMLСтрока(Данные.ДоходДополнительныеДоходы * 100));    
		Параметры.Вставить("ГражданствоРФ", ?(Данные.ГражданствоРФ, "RU", "OTHER"));   	
		Параметры.Вставить("considerCoBorrowerIncome", Данные.ЕстьСозаемщики);  
		Параметры.Вставить("contactMail", Данные.КонтактнаяИнформацияЕмайл);   
		Параметры.Вставить("contactPhoneMobile", ОбработатьНомер(Данные.КонтактнаяИнформацияМобильныйТелефон)); 
		education = Новый Структура;   
		Если ЗначениеЗаполнено(Данные.ОбразованиеКурс) Тогда
			education.Вставить("course", Данные.ОбразованиеКурс);
		КонецЕсли;	
		education.Вставить("type", ПолучитьЗначение(Данные.Образование));
		Параметры.Вставить("education", education);
		Параметры.Вставить("fullName", Данные.ФИО); 
		Если Данные.Свойство("ЕстьДетиИнвалиды") Тогда
			Параметры.Вставить("hasDisabledChild", Данные.ЕстьДетиИнвалиды);
		Иначе	
			Параметры.Вставить("hasDisabledChild", Ложь);
		КонецЕсли;	
		Параметры.Вставить("inn", СтрЗаменить(Данные.ПерсональныеДанныеИНН, " ", ""));  
		Если Данные.Свойство("ПенсияСбер") Тогда
			Параметры.Вставить("isPensionViaSber", Данные.ПенсияСбер);    
		Иначе	
			Параметры.Вставить("isPensionViaSber", Ложь);
		КонецЕсли;	
		Если Данные.Свойство("ВременнаяРегистрация") Тогда
			Параметры.Вставить("isTempRegistration", Данные.ВременнаяРегистрация);    
		Иначе	
			Параметры.Вставить("isTempRegistration", Ложь);
		КонецЕсли;	       
		job = Новый Структура;
		job.Вставить("employmentDate", Формат(Данные.РаботаДатаТрудоустройства, "ДФ=yyyy-MM-dd")); 
		job.Вставить("jobOrganization", Данные.РаботаОрганизация);   
		job.Вставить("jobOrganizationInn", СтрЗаменить(Данные.РаботаОрганизацияИНН, " ", ""));
		job.Вставить("jobPosition", Данные.РаботаДолжность);
		Если Данные.СтажНаПоследнейРаботе < 6 Тогда
			job.Вставить("jobSeniority", "LESS_SIX_MONTHS");
		ИначеЕсли Данные.СтажНаПоследнейРаботе >= 6 И Данные.СтажНаПоследнейРаботе < 12 Тогда
			job.Вставить("jobSeniority", "SIX_TO_TWELVE_MONTHS");	
		ИначеЕсли Данные.СтажНаПоследнейРаботе >= 12 И Данные.СтажНаПоследнейРаботе < 36 Тогда
			job.Вставить("jobSeniority", "ONE_TO_THREE_YEAR");
		ИначеЕсли Данные.СтажНаПоследнейРаботе >= 36 Тогда
			job.Вставить("jobSeniority", "THREE_TO_FIVE_YEAR");
		КонецЕсли;	
		Параметры.Вставить("job", job);
		Параметры.Вставить("jobIncomeTypeId", ПолучитьЗначение(Данные.СправкаОДоходах));
		Параметры.Вставить("marriageContract", Данные.БрачныйКонтракт);  
		Если Данные.НомерСозаемщика = 1 Тогда
			Параметры.Вставить("mandatoryCoBorrower", Истина);
		КонецЕсли;	
		Параметры.Вставить("marriageStatus", ПолучитьЗначение(Данные.СемейноеПоложение)); 
		passport = Новый Структура;
		passport.Вставить("birthPlace", Данные.ПаспортныеДанныеМестоРождения);
		passport.Вставить("issueDate", Формат(Данные.ПаспортныеДанныеДатаВыдачи, "ДФ=yyyy-MM-dd"));
		passport.Вставить("issuer", Данные.ПаспортныеДанныеКемВыдан);
		passport.Вставить("number", Данные.ПаспортныеДанныеНомер);
		passport.Вставить("series", Данные.ПаспортныеДанныеСерия);
		passport.Вставить("subdivisionCode", СтрЗаменить(Данные.ПаспортныеДанныеКодПодразделения, "-", ""));
		Параметры.Вставить("passport", passport);
		Параметры.Вставить("proofIncome", XMLСтрока(Данные.ДоходСемьи * 100));   
		registrationAddress = Новый Структура;
		registrationAddress.Вставить("country", Строка(Данные.АдресРегистрацииСтрана));
		registrationAddress.Вставить("flat", Данные.АдресРегистрацииКвартира);
		registrationAddress.Вставить("flatType", "кв");
		registrationAddress.Вставить("house", Данные.АдресРегистрацииНомерДома);
		registrationAddress.Вставить("houseType", "д");
		registrationAddress.Вставить("postalCode", Данные.АдресРегистрацииИндекс);
		registrationAddress.Вставить("region", Данные.АдресРегистрацииГород);
		registrationAddress.Вставить("regionType", ПолучитьТипРегиона(Данные.АдресРегистрацииГород));   
		registrationAddress.Вставить("street", Данные.АдресРегистрацииУлица);
		registrationAddress.Вставить("streetType", "ул");
		Параметры.Вставить("registrationAddress", registrationAddress);
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Параметры);
		Json = Запись.Закрыть();   
		Если СтрНайти(Json, "null") Тогда
			Возврат "";
		КонецЕсли;
		
		//ИначеЕсли Метод = Тогда
		
	КонецЕсли;
	
	Возврат Json;
	
КонецФункции

Функция СерверШлюза(ТестовыйРежим = Истина) Экспорт
	
	Если ТестовыйРежим Тогда
		Возврат "https://services.4dev.app/srvapi";
	Иначе
		Возврат "https://services.4dev.app/srvapi";
	КонецЕсли;
	
КонецФункции // ()

Функция ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, Json = Неопределено, Результат);
	
	ДанныеДобавлены = Результат.Свойство("Данные");
	
	Если ДанныеДобавлены Тогда
		Данные = Результат.Данные;
	КонецЕсли;
	
	ДанныеДоступа = ДанныеДоступа();
	
	Если ДанныеДобавлены И ЗначениеЗаполнено(Данные.Домклик_idРасчета) Тогда
		Путь = СтрШаблон("%1%2/%3", Сервер(),Метод,ОбработатьИд(Данные.Домклик_idРасчета));
	ИначеЕсли ДанныеДобавлены И ЗначениеЗаполнено(Данные.Домклик_idСделки) 
		И СтрНайти(Метод, "/applications") = 0 Тогда
		Путь = СтрШаблон("%1%2/%3", Сервер(),Метод,ОбработатьИд(Данные.Домклик_idСделки));
	ИначеЕсли ДанныеДобавлены И ЗначениеЗаполнено(Данные.Домклик_idАнкеты) 
		И СтрНайти(Метод, "/applications") > 0 Тогда
		Путь = СтрШаблон("%1%2/%3", Сервер(),Метод,ОбработатьИд(Данные.Домклик_idАнкеты));
	Иначе
		Путь = СтрШаблон("%1%2", Сервер(),Метод);
	КонецЕсли;	
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Путь);
	Сервер = СтруктураURI.Хост;
	ПутьНаСервере = СтруктураURI.ПутьНаСервере;
	
	ПутьШлюза = СтрШаблон("%1/hs/restapi_v1/gateway", СерверШлюза());
	
	СтруктураURIШлюза = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПутьШлюза);
	СерверШлюза = СтруктураURIШлюза.Хост;
	ПутьНаСервереШлюза = СтруктураURIШлюза.ПутьНаСервере;
	
	HTTPСоединение = Новый HTTPСоединение(СерверШлюза,,,,,,Новый ЗащищенноеСоединениеOpenSSL(),);
	
	Заголовки = Новый Соответствие;   
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-AGENT-PHONE", ДанныеДоступа.ТелефонАгента);  
	СтруктураТокена = ПолучитьТокен();
	Если Не ЗначениеЗаполнено(СтруктураТокена.Токен) Тогда
		Результат.Успешно = Ложь;  
		ЗаполнитьЗначенияСвойств(Результат, СтруктураТокена);
		Возврат Неопределено;
	КонецЕсли;
	Заголовки.Вставить("authorization", СтруктураТокена.Токен);
	
	КлючБазыШлюз = РегистрыСведений.Дев_Токены.ПолучитьДействующийТокен("КлючБазыШлюз");
	Заголовки.Вставить("key", КлючБазыШлюз.token);
	Заголовки.Вставить("login", Строка(Пользователи.АвторизованныйПользователь()));
	Заголовки.Вставить("Server", Сервер);
	Заголовки.Вставить("ServerPath", ПутьНаСервере);
	
	HTTPЗапрос.АдресРесурса = ПутьНаСервереШлюза;
	HTTPЗапрос.Заголовки = Заголовки;
	
	Если Не Json = Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(Json);
	КонецЕсли;
	
	Возврат HTTPСоединение;
	
КонецФункции

Функция ПодготовитьHTTPСоединениеФайл(Метод, HTTPЗапрос, base64Данные,  Результат);
	
	ДанныеДоступа = ДанныеДоступа();
	
	Путь = СтрШаблон("%1%2", Сервер(),Метод);
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Путь);
	Сервер = СтруктураURI.Хост;
	ПутьНаСервере = СтруктураURI.ПутьНаСервере;
	
	ПутьШлюза = СтрШаблон("%1/restapi_v1/gateway", СерверШлюза());
	
	СтруктураURIШлюза = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПутьШлюза);
	СерверШлюза = СтруктураURIШлюза.Хост;
	ПутьНаСервереШлюза = СтруктураURIШлюза.ПутьНаСервере;
	
	HTTPСоединение = Новый HTTPСоединение(СерверШлюза,,,,,,Новый ЗащищенноеСоединениеOpenSSL(),);
	
	boundary = ""+СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");  
	Заголовки = Новый Соответствие;   
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+boundary); 
	Заголовки.Вставить("X-AGENT-PHONE", ДанныеДоступа.ТелефонАгента);  
	СтруктураТокена = ПолучитьТокен();
	Если Не ЗначениеЗаполнено(СтруктураТокена.Токен) Тогда
		Результат.Успешно = Ложь;  
		ЗаполнитьЗначенияСвойств(Результат, СтруктураТокена);
		Возврат Неопределено;
	КонецЕсли;
	Заголовки.Вставить("authorization", СтруктураТокена.Токен);
	
	КлючБазыШлюз = РегистрыСведений.Дев_Токены.ПолучитьДействующийТокен("КлючБазыШлюз");
	Заголовки.Вставить("key", КлючБазыШлюз);
	Заголовки.Вставить("login", Строка(Пользователи.АвторизованныйПользователь()));
	Заголовки.Вставить("Server", Сервер);
	Заголовки.Вставить("ServerPath", ПутьНаСервере);
	
	HTTPЗапрос.АдресРесурса = ПутьНаСервереШлюза;
	HTTPЗапрос.Заголовки = Заголовки;
	
	Тело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Тело, КодировкаТекста.UTF8);
	ЗаписьДанных.ЗаписатьСтроку("--" + boundary);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""type""" + Символы.ПС);
	ЗаписьДанных.ЗаписатьСтроку(Результат.ЗначениеТипа);
	ЗаписьДанных.ЗаписатьСтроку("--" + boundary);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename=""" + Результат. ИмяФайла + """");
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: application/octet-stream" + Символы.ПС);
	ЗаписьДанных.Записать(Base64Значение(base64Данные));
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку("--" + boundary + "--");
	ЗаписьДанных.Закрыть();
	
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Тело.ЗакрытьИПолучитьДвоичныеДанные()); 
	
	Возврат HTTPСоединение;
	
КонецФункции

Процедура ЗапсиатьДанныеВБазуШлюз(ТелоКакСтрока) Экспорт
	
	HTTPСоединение = Новый HTTPСоединение("",,,,,30,,);
	HTTPЗапрос	= Новый HTTPЗапрос; 
	
	ПутьШлюза = СтрШаблон("%1/hs/extint/domclick/status", СерверШлюза());
	
	СтруктураURIШлюза = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПутьШлюза);
	СерверШлюза = СтруктураURIШлюза.Хост;
	ПутьНаСервереШлюза = СтруктураURIШлюза.ПутьНаСервере;
	
	HTTPСоединение = Новый HTTPСоединение(СерверШлюза,,,,,,Новый ЗащищенноеСоединениеOpenSSL(),);
	HTTPЗапрос	= Новый HTTPЗапрос; 
	
	Заголовки = Новый Соответствие;   
	Заголовки.Вставить("Content-Type", "application/json");
	
	КлючБазыШлюз = РегистрыСведений.Дев_Токены.ПолучитьДействующийТокен("КлючБазыШлюз");
	Заголовки.Вставить("key", КлючБазыШлюз);
	Заголовки.Вставить("login", Строка(Пользователи.АвторизованныйПользователь()));
	
	HTTPЗапрос.АдресРесурса = ПутьНаСервереШлюза;
	HTTPЗапрос.Заголовки = Заголовки;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоКакСтрока); 
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_ОтправкаВШлюз", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
	Исключение		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки; 
	
КонецПроцедуры 

#КонецОбласти

#Область ПрограммныйИнтерфейс
&Вместо("ПолучитьПредложения")
Функция Расш1_ПолучитьПредложения()
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно", Неопределено, Неопределено, Истина);
	
	КодРегиона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Организации.ОсновнаяОрганизация, "КодРегиона");      
	Если Не ЗначениеЗаполнено(КодРегиона) Тогда
		КодРегиона = "0";
	КонецЕсли;  
	
	Метод = "/ipoteka/application/api/v1/products";
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, ,Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_Предложения", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
		
		Если Ответ.КодСостояния = 405 Тогда
			ТекстОшибки = НСтр("ru = 'Пользователь не авторизован в сервисе ""Получения ипотеки""'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
		Результат.КодСостояния = Ответ.КодСостояния; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока, Истина); 
		Результат.Успешно = СтруктураОтвета.Получить("success");
		Если Результат.КодСостояния > 199 И Результат.КодСостояния < 300 И Результат.Успешно Тогда
			Для каждого ТекПродукт Из СтруктураОтвета.Получить("data") Цикл
				ТипИпотеки = Справочники.ТипыИпотеки.НайтиПоРеквизиту("Домклик", ТекПродукт.Получить("product")); 
				//создать кредит программы и банки аналогично движу
				Для каждого ТекСубПродукт Из ТекПродукт.Получить("subproducts") Цикл   
					Скидки = Новый Массив;  
					discounts = ТекПродукт.Получить("discounts");
					Если discounts <> Неопределено Тогда
						Для каждого ТекСкидка Из discounts Цикл 
							Скидка = Новый Структура;
							Скидка.Вставить("Наименование", ТекСкидка.Получить("title"));  
							Скидка.Вставить("Описание", ТекСкидка.Получить("description"));
							Скидка.Вставить("Процент", ТекСкидка.Получить("percent"));
							Скидка.Вставить("МинимальныйСрокКредита", ТекСкидка.Получить("termMin"));
							Скидка.Вставить("МаксимальныйСрокКредита", ТекСкидка.Получить("termMax"));   
							Скидка.Вставить("ВариантСкидки", Справочники.ВариантыСкидокИпотека.НайтиПоРеквизиту("Домклик", ТекСкидка.Получить("discount"))); 
							Категории = Новый Массив;
							Для каждого ТекКатегория Из ТекПродукт.Получить("requiredCategories") Цикл
								Категории.Добавить(Справочники.КатегорииЗаемщикаИпотека.НайтиПоРеквизиту("Домклик", ТекКатегория))
							КонецЦикла;   
							Скидка.Вставить("Категории",Категории);
							Скидки.Добавить(Скидка);
						КонецЦикла;					
					КонецЕсли;
					КатегорияЗаемщика = Справочники.КатегорииЗаемщикаИпотека.НайтиПоРеквизиту("Домклик", ТекСубПродукт.Получить("subproduct"));
					Ограничения = ТекСубПродукт.Получить("limits");   
					salaryClient = Ограничения.Получить("salaryClient"); 
					Если salaryClient <> Неопределено Тогда
						СоздатьКредитнуюПрограмму(ТипИпотеки, КатегорияЗаемщика, 
						ТекПродукт.Получить("title") + ": " + "" + ТекСубПродукт.Получить("title"),
						salaryClient, КодРегиона, Скидки);
					КонецЕсли;    
					vip = Ограничения.Получить("vip"); 
					Если vip <> Неопределено Тогда
						СоздатьКредитнуюПрограмму(ТипИпотеки, КатегорияЗаемщика, 
						ТекПродукт.Получить("title") + ": " + "" + ТекСубПродукт.Получить("title"),
						vip, КодРегиона, Скидки);
					КонецЕсли;
					employee = Ограничения.Получить("employee"); 
					Если employee <> Неопределено Тогда
						СоздатьКредитнуюПрограмму(ТипИпотеки, КатегорияЗаемщика, 
						ТекПродукт.Получить("title") + ": " + "" + ТекСубПродукт.Получить("title"),
						employee, КодРегиона, Скидки);
					КонецЕсли;
					canConfirmIncome = Ограничения.Получить("canConfirmIncome"); 
					Если canConfirmIncome <> Неопределено Тогда
						СоздатьКредитнуюПрограмму(ТипИпотеки, КатегорияЗаемщика, 
						ТекПродукт.Получить("title") + ": " + "" + ТекСубПродукт.Получить("title"),
						canConfirmIncome, КодРегиона, Скидки);
					КонецЕсли;
					cannotConfirmIncome = Ограничения.Получить("cannotConfirmIncome"); 
					Если cannotConfirmIncome <> Неопределено Тогда
						СоздатьКредитнуюПрограмму(ТипИпотеки, КатегорияЗаемщика, 
						ТекПродукт.Получить("title") + ": " + "" + ТекСубПродукт.Получить("title"),
						cannotConfirmIncome, КодРегиона, Скидки);
					КонецЕсли; 
				КонецЦикла;
			КонецЦикла;
		Иначе
			ТекстОшибки = ПолучитьJsonПоКоду(Результат.КодСостояния);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Исключение	
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции 

&Вместо("СоздатьКлиента")
Функция Расш1_СоздатьКлиента(Данные)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно,Домклик_idКлиента", Неопределено, Неопределено, Истина);
	
	Если ЗначениеЗаполнено(Данные.КонтактнаяИнформацияМобильныйТелефон) Тогда   
		
		Метод = "/ipoteka/application/api/v1/clients";
		HTTPЗапрос	= Новый HTTPЗапрос; 
		Json = ПолучитьJsonМетода(Данные, Метод);
		HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, Json, Результат);
		
		Если Не Результат.Успешно  Тогда
			Возврат Результат;	
		КонецЕсли;
		
		ЗапросДляЖурнала = СтрШаблон("%1%2%3%2%4",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
		УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки),Json);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_СозданиеКлиента", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
		
		Попытка					
			Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);	
			
			ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
			Результат.КодСостояния = Ответ.КодСостояния; 
			Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
			СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока);  
			Результат.Успешно = СтруктураОтвета.success;
			Если Результат.КодСостояния > 199 И Результат.КодСостояния < 300 И СтруктураОтвета.success = Истина Тогда 
				Результат.Домклик_idКлиента = СтруктураОтвета.data.casId;
			КонецЕсли;
		Исключение		
			Результат.Успешно = Ложь;   
			Результат.КодСостояния = 500; 
			Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки; 
	Иначе    
		Результат.Успешно = Ложь;   
		Результат = Дев_ИпотекаСервер.ДанныеОшибки("Номер телефона клиента " + Строка(Данные.Клиент) + " не заполнен", 500);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Возникла ошибка запроса к серверу. Данные от " 
		+ Формат(ТекущаяДатаСеанса(), "ДЛФ=DDT") + " записаны в журнал API; обратитесь к администратору");
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, Результат.ТелоКакСтрока);
	КонецЕсли;		 
	
	Возврат Результат;
	
КонецФункции

&Вместо("ПолучитьПредложенияПоДанным")
Функция Расш1_ПолучитьПредложенияПоДанным(Данные)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно", Неопределено, Неопределено, Истина);
	
	Метод ="/ipoteka/application/api/v1/products/select";
	HTTPЗапрос	= Новый HTTPЗапрос; 
	Json = ПолучитьJsonМетода(Данные, Метод);
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, Json, Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3%2%4",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки),Json);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_ПредложенияПоКлиенту", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
		Результат.КодСостояния = Ответ.КодСостояния; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока, Истина); 
		Результат.Успешно = СтруктураОтвета.Получить("success");
		Если Результат.КодСостояния > 199 И Результат.КодСостояния < 300 И Результат.Успешно Тогда
			Для каждого ТекПрограмма Из СтруктураОтвета.Получить("data").Получить("programs") Цикл   
				Если ТекПрограмма.Получить("type") <> "CALCULATED" Тогда
					Продолжить; // не подходящие по условиям
				КонецЕсли;
				ТипИпотеки = СчитатьЗначение(ТекПрограмма.Получить("product"), "ТипыИпотеки");          
				КатегорияЗаемщика = СчитатьЗначение(ТекПрограмма.Получить("subproduct"), "КатегорииЗаемщикаИпотека");     
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	УПДК_КредитныеПрограммы.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.УПДК_КредитныеПрограммы КАК УПДК_КредитныеПрограммы
				|ГДЕ
				|	УПДК_КредитныеПрограммы.ТипИпотеки = &ТипИпотеки
				|	И УПДК_КредитныеПрограммы.КатегорияЗаемщика = &КатегорияЗаемщика
				|	И УПДК_КредитныеПрограммы.Кредитор.Банк = &Банк";
				
				Запрос.УстановитьПараметр("Банк", Справочники.Банки.Сбербанк);
				Запрос.УстановитьПараметр("КатегорияЗаемщика", КатегорияЗаемщика);
				Запрос.УстановитьПараметр("ТипИпотеки", ТипИпотеки);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если РезультатЗапроса.Пустой() Тогда
					ТекПрограмма = Справочники.УПДК_КредитныеПрограммы.СоздатьЭлемент();     
					ТекПрограмма.КатегорияЗаемщика = КатегорияЗаемщика;
					ТекПрограмма.ТипИпотеки = ТипИпотеки;   
				Иначе     
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					ТекПрограмма = Выборка.Ссылка.ПолучитьОбъект();  
					ТекПрограмма.ПометкаУдаления = Ложь;
				КонецЕсли;
				ТекПрограмма.Наименование = ТекПрограмма.Получить("name"); 
				ТекПрограмма.ЕжемесячныйПлатеж = ТекПрограмма.Получить("monthlyPayment"); 
				ТекПрограмма.Ставка = ТекПрограмма.Получить("rate");    
				ТекПрограмма.МаксимальныйРазмерКредита = ТекПрограмма.Получить("creditSum");
				//secondMonthlyPayment, secondRate, realtyCost?        
				НайденнаяСсылка = Справочники.Партнеры.НайтиПоРеквизиту("Банк", Справочники.Банки.Сбербанк);
				Если НайденнаяСсылка.Пустая() Тогда
					Кредитор = Справочники.Партнеры.СоздатьЭлемент();
				Иначе
					Кредитор = НайденнаяСсылка.ПолучитьОбъект();   			
				КонецЕсли;	
				Кредитор.Наименование = "Сбербанк";
				Кредитор.CRM_ТипОтношений = Справочники.CRM_ТипыОтношений.Кредитор;	
				Кредитор.Банк = Справочники.Банки.Сбербанк; 
				Кредитор.Записать();
				ТекПрограмма.Кредитор = Кредитор.Ссылка;
				ТекПрограмма.Записать();
			КонецЦикла;
		КонецЕсли;
	Исключение	
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции

&Вместо("СоздатьОбновитьРасчет")
Функция Расш1_СоздатьОбновитьРасчет(Данные)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Домклик_idРасчета,Успешно,Данные",
	Неопределено, Неопределено, Неопределено, Истина, Данные);
	
	Если ЗначениеЗаполнено(Данные.Домклик_idКлиента) Тогда
		
		Метод = "/ipoteka/application/api/v1/calculations";
		Если ЗначениеЗаполнено(Данные.Домклик_idРасчета) Тогда
			HTTPМетод = "PUT";
		Иначе	
			HTTPМетод = "POST";
		КонецЕсли;
		
		HTTPЗапрос	= Новый HTTPЗапрос; 
		Json = ПолучитьJsonМетода(Данные, Метод);
		HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, Json, Результат);
		
		Если Не Результат.Успешно  Тогда
			Возврат Результат;	
		КонецЕсли;
		
		ЗапросДляЖурнала = СтрШаблон("%1%2%3%2%4",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
		УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки),Json);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_СозданиеОбновлениеРасчета", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
		
		Попытка	
			Ответ = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
			
			ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
			Результат.КодСостояния = Ответ.КодСостояния; 
			Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
			СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока); 
			Результат.Успешно = СтруктураОтвета.success;
			Если Результат.КодСостояния > 199 И Результат.КодСостояния < 300 И СтруктураОтвета.success = Истина Тогда
				Результат.Домклик_idРасчета = СтруктураОтвета.data.id;
				//создать кредит программу  
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	УПДК_КредитныеПрограммы.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.УПДК_КредитныеПрограммы КАК УПДК_КредитныеПрограммы
				|ГДЕ
				|	УПДК_КредитныеПрограммы.ТипИпотеки = &ТипИпотеки
				|	И УПДК_КредитныеПрограммы.КатегорияЗаемщика = &КатегорияЗаемщика
				|	И УПДК_КредитныеПрограммы.Кредитор.Банк = &Банк";
				
				Запрос.УстановитьПараметр("Банк", Справочники.Банки.Сбербанк);
				Запрос.УстановитьПараметр("КатегорияЗаемщика", Данные.КатегорияЗаемщика);
				Запрос.УстановитьПараметр("ТипИпотеки", Данные.КПЖелищныйКредит);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если Не РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					ТекПрограмма = Выборка.Ссылка.ПолучитьОбъект();  
					ТекПрограмма.ПометкаУдаления = Ложь;   
					ТекПрограмма.СрокКредита = СтруктураОтвета.data.term;  
					ТекПрограмма.ЕжемесячныйПлатеж = СтруктураОтвета.data.payment;  
					ТекПрограмма.Ставка = СтруктураОтвета.data.rate;   
					ТекПрограмма.Записать();
				КонецЕсли;
			КонецЕсли;
		Исключение		
			Результат.Успешно = Ложь;   
			Результат.КодСостояния = 500; 
			Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
		КонецПопытки; 		
	Иначе	
		Результат.Успешно = Ложь;   
		Результат = Дев_ИпотекаСервер.ДанныеОшибки("Номер телефона клиента " + Строка(Данные.Клиент) + " не заполнен", 500);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Возникла ошибка запроса к серверу. Данные от " 
		+ Формат(ТекущаяДатаСеанса(), "ДЛФ=DDT") + " записаны в журнал API; обратитесь к администратору");
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, Результат.ТелоКакСтрока);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&Вместо("СоздатьОбновитьСделку")
Функция Расш1_СоздатьОбновитьСделку(Данные)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Домклик_idСделки,Домклик_idАнкеты,Успешно,Данные", 
	Неопределено, Неопределено, Неопределено, Неопределено, Истина, Данные);
	
	Если ЗначениеЗаполнено(Данные.Домклик_idРасчета) Тогда
		Если ЗначениеЗаполнено(Данные.Домклик_idСделки) Тогда
			Метод = СтрШаблон("/ipoteka/application/api/v1/deals/%1", ОбработатьИд(Данные.Домклик_idРасчета));
			HTTPМетод = "PUT";
		Иначе
			Метод = "/ipoteka/application/api/v1/deals";
			HTTPМетод = "POST"; 
		КонецЕсли;
		
		HTTPЗапрос	= Новый HTTPЗапрос; 
		Json = ПолучитьJsonМетода(Данные, Метод);
		HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, Json, Результат);
		
		Если Не Результат.Успешно  Тогда
			Возврат Результат;	
		КонецЕсли;
		
		ЗапросДляЖурнала = СтрШаблон("%1%2%3%2%4",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
		УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки),Json);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_СозданиеОбновлениеСделки", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
		
		Попытка					
			Ответ = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);	
			
			ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
			Результат.КодСостояния = Ответ.КодСостояния; 
			Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
			СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока); 
			Результат.Успешно = СтруктураОтвета.success;
			Если Результат.КодСостояния > 199 И Результат.КодСостояния < 300 И СтруктураОтвета.success = Истина Тогда
				Результат.Домклик_idСделки = СтруктураОтвета.data.id;	  
				Если СтруктураОтвета.data.applications.Количество() Тогда
					Результат.Домклик_idАнкеты = СтруктураОтвета.data.applications[0].id;
				КонецЕсли;
			КонецЕсли;
		Исключение		
			Результат.Успешно = Ложь;   
			Результат.КодСостояния = 500; 
			Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
		КонецПопытки; 		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&Вместо("ВалидацияСделки")
Функция Расш1_ВалидацияСделки(ИдСделки)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно", Неопределено, Неопределено, Истина);
	
	Если Не ЗначениеЗаполнено(ИдСделки) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Метод = СтрШаблон("/ipoteka/application/api/v1/products/%1", ОбработатьИд(ИдСделки));
	HTTPЗапрос	= Новый HTTPЗапрос; 
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, ,Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_ВалидацияСделки", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);		
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока);   
		
		Ошибки = Новый Массив; 
		Результат.Успешно = СтруктураОтвета.success;	
		Если СтруктураОтвета.data.Свойство("validationErrors") Тогда
			Для каждого ТекОшибка Из СтруктураОтвета.data.validationErrors Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекОшибка.message);
				Ошибки.Добавить(ТекОшибка.message);		
			КонецЦикла;  
		КонецЕсли;
		Если Ошибки.Количество() Тогда
			Результат = Дев_ИпотекаСервер.ДанныеОшибки(Ошибки, 500);
		Иначе	
			Результат.КодСостояния = Ответ.КодСостояния; 
			Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);		
		КонецЕсли;
	Исключение		
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);	
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));					
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&Вместо("УдалениеЧерновикаСделки")
Функция Расш1_УдалениеЧерновикаСделки(ИдСделки)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно", Неопределено, Неопределено, Истина);
	
	Если Не ЗначениеЗаполнено(ИдСделки) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Метод = СтрШаблон("/ipoteka/application/api/v1/deals/%1", ОбработатьИд(ИдСделки));
	HTTPЗапрос	= Новый HTTPЗапрос; 
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, ,Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_УдалениеЧерновикаСделки", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		
		Ответ = HTTPСоединение.ВызватьHTTPМетод("DELETE", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
		Результат.КодСостояния = Ответ.КодСостояния; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока);    
		Результат.Успешно = СтруктураОтвета.success;
	Исключение		
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));					
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции

&Вместо("ОтправкаСделкиВБанк")
Функция Расш1_ОтправкаСделкиВБанк(ИдСделки)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно", Неопределено, Неопределено, Истина);
	
	Если Не ЗначениеЗаполнено(ИдСделки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Метод = СтрШаблон("/ipoteka/application/api/v2/deals/%1/send", ОбработатьИд(ИдСделки));
	HTTPЗапрос	= Новый HTTPЗапрос; 
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, ,Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_ОтправкаСделкиВБанк", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);		
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока);   
		
		Ошибки = Новый Массив;  
		Результат.Успешно = СтруктураОтвета.success;
		Если СтруктураОтвета.success = Истина Тогда			
			Если СтруктураОтвета.data.Свойство("validationErrors") Тогда
				Для каждого ТекОшибка Из СтруктураОтвета.data.validationErrors Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекОшибка.message);
					Ошибки.Добавить(ТекОшибка.message);		
				КонецЦикла;  
			КонецЕсли;   	
		КонецЕсли; 
		Если Ошибки.Количество() Тогда
			Результат = Дев_ИпотекаСервер.ДанныеОшибки(Ошибки, 500);
		Иначе	
			Результат.КодСостояния = Ответ.КодСостояния; 
			Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);		
		КонецЕсли;
	Исключение		
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));					
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции

&Вместо("СоздатьОбновитьАнкету")
Функция Расш1_СоздатьОбновитьАнкету(Данные)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Домклик_idАнкеты,Успешно?Данные", 
	Неопределено, Неопределено, Неопределено, Истина, Данные);
	
	Если Не ЗначениеЗаполнено(Данные.Домклик_idСделки) Тогда
		Возврат Результат;
	КонецЕсли;  
	
	Метод = СтрШаблон("/ipoteka/application/api/v1/deals/%1/applications", ОбработатьИд(Данные.Домклик_idСделки) );
	Если ЗначениеЗаполнено(Данные.Домклик_idАнкеты) Тогда
		HTTPМетод = "PUT";
	Иначе	
		HTTPМетод = "POST"; 
	КонецЕсли;	
	
	HTTPЗапрос	= Новый HTTPЗапрос; 
	Json = ПолучитьJsonМетода(Данные, Метод);
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, Json, Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3%2%4",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки),Json);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_СозданиеОбновлениеАнкеты", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
		Результат.КодСостояния = Ответ.КодСостояния; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока);  
		Результат.Успешно = СтруктураОтвета.success;
		Если Результат.КодСостояния > 199 И Результат.КодСостояния < 300 И СтруктураОтвета.success = Истина Тогда
			Результат.Домклик_idАнкеты = СтруктураОтвета.data.id;	
		КонецЕсли;
	Исключение		
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);	
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
	КонецПопытки; 		
	
	Возврат Результат;
	
КонецФункции

&Вместо("УдалениеАнкетыСозаемщика")
Функция Расш1_УдалениеАнкетыСозаемщика(ИдСделки, ИдАнкеты)
	
	Данные = Новый Структура("Данные.Домклик_idСделки, Домклик_idАнкеты", ИдСделки, ИдАнкеты);
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно, Данные",
	Неопределено, Неопределено, Истина, Данные);  
	
	Если Не ЗначениеЗаполнено(ИдСделки) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Метод = СтрШаблон("/ipoteka/application/api/v1/deals/%1/applications", ОбработатьИд(Данные.Домклик_idСделки));
	
	HTTPЗапрос	= Новый HTTPЗапрос; 
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос,, Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_УдалениеАнкеты", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("DELETE", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
		Результат.КодСостояния = Ответ.КодСостояния; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока); 
		Результат.Успешно = СтруктураОтвета.success;
	Исключение		
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);	
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));					
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции 

&Вместо("ДобавитьДокумент")
Функция Расш1_ДобавитьДокумент(ИдАнкеты, ТипДокумента, base64Данные, ИмяФайла)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно,id,ИдАнкеты,ТипДокумента,ИмяФайла", 
	Неопределено, Неопределено, Истина, Неопределено, ИдАнкеты, ТипДокумента, ИмяФайла);
	
	Если Не ЗначениеЗаполнено(ИдАнкеты) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ЗначениеТипа = Неопределено; 
	Если ТипДокумента = "passport" Тогда
		ЗначениеТипа = "PASSPORT";
	ИначеЕсли ТипДокумента = "ndfl_certificate" Тогда
		ЗначениеТипа = "DOC_2NDFL";		
	ИначеЕсли ТипДокумента = "snils" Тогда
		ЗначениеТипа = "SNILS";	
	ИначеЕсли ТипДокумента = "employmentHistory" Тогда
		ЗначениеТипа = "WORK_BOOK";	
	ИначеЕсли ТипДокумента = "other" Тогда
		ЗначениеТипа = "OTHER";
	Иначе       
		Ошибка = "Тип документа " + Строка(ТипДокумента) + " не распознан";
		Результат.Успешно = Ложь;   
		Результат = Дев_ИпотекаСервер.ДанныеОшибки(Ошибка, 500);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Возникла ошибка запроса к серверу. Данные от " 
		+ Формат(ТекущаяДатаСеанса(), "ДЛФ=DDT") + " записаны в журнал API; обратитесь к администратору");
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_ДобавитьДокумент", ТекущаяДатаСеанса(), Ошибка);
		Возврат Результат;
	КонецЕсли;
	
	Метод = СтрШаблон("/ipoteka/application/api/v1/applications/%1/documents", ОбработатьИд(ИдАнкеты));
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPСоединение = ПодготовитьHTTPСоединениеФайл(Метод, HTTPЗапрос, base64Данные,  Результат);
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_ДобавитьДокумент", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
		Результат.КодСостояния = Ответ.КодСостояния; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока); 
		Результат.Успешно = СтруктураОтвета.success;  
		Если Результат.КодСостояния > 199 И Результат.КодСостояния < 300 И СтруктураОтвета.success = Истина Тогда
			Результат.id = СтруктураОтвета.data.id;	
		КонецЕсли;
	Исключение		
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);	
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));					
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции 

&Вместо("УдалениеФайла")
Функция Расш1_УдалениеФайла(ИдАнкеты, ИдФайла)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно", Неопределено, Неопределено, Истина);
	
	Если Не ЗначениеЗаполнено(ИдАнкеты) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Метод = СтрШаблон("/ipoteka/application/api/v1/applications/%1/documents/%2", ОбработатьИд(ИдАнкеты),ОбработатьИд(ИдФайла));
	HTTPЗапрос	= Новый HTTPЗапрос; 
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, ,Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_УдалениеФайла", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("DELETE", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
		Результат.КодСостояния = Ответ.КодСостояния; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока); 
		Результат.Успешно = СтруктураОтвета.success;
	Исключение		
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);	
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));					
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции

&Вместо("ПодписьСогласия")
Функция Расш1_ПодписьСогласия(ИдСделки)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно", Неопределено, Неопределено, Истина);
	
	Если Не ЗначениеЗаполнено(ИдСделки) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Метод = СтрШаблон("/ipoteka/application/api/v1/deals/%1/acceptances", ОбработатьИд(ИдСделки)); 
	HTTPЗапрос	= Новый HTTPЗапрос; 
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, ,Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_ПодписьСогласия", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока); 
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока);
		
		Ошибки = Новый Массив; 
		Результат.Успешно = СтруктураОтвета.success;	
		Если СтруктураОтвета.Свойство("data") Тогда
			Если СтруктураОтвета.data.Свойство("validationErrors") Тогда
				Для каждого ТекОшибка Из СтруктураОтвета.data.validationErrors Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекОшибка.message);
					Ошибки.Добавить(ТекОшибка.message);		
				КонецЦикла;  
			КонецЕсли;  
			Если СтруктураОтвета.data.Свойство("applicationValidationErrors") Тогда
				Для каждого ТекОшибкаЗаявки Из СтруктураОтвета.data.applicationValidationErrors Цикл
					Если ТекОшибкаЗаявки.Свойство("validationErrors") Тогда
						Для каждого ТекОшибка Из ТекОшибкаЗаявки.validationErrors Цикл
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекОшибка.message);
							Ошибки.Добавить(ТекОшибка.message);		
						КонецЦикла;  
					КонецЕсли; 	
				КонецЦикла;  
			КонецЕсли;  
		КонецЕсли;
		Если Ошибки.Количество() Тогда
			Результат = Дев_ИпотекаСервер.ДанныеОшибки(Ошибки, 500);
		Иначе	
			Результат.КодСостояния = Ответ.КодСостояния; 
			Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);		
		КонецЕсли;
	Исключение		
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));					
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции

&Вместо("ПодписьСогласияУчастнику")
Функция Расш1_ПодписьСогласияУчастнику(ИдСделки, ИдАнкеты)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно", Неопределено, Неопределено, Истина);    
	
	Если Не ЗначениеЗаполнено(ИдСделки) Или Не ЗначениеЗаполнено(ИдАнкеты) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Метод = СтрШаблон("/ipoteka/application/api/v1/deals/%1/applications/%2/acceptance", ОбработатьИд(ИдСделки), ОбработатьИд(ИдАнкеты));	
	HTTPЗапрос	= Новый HTTPЗапрос; 
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, ,Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_ПодписьСогласияУчастнику", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
		Результат.КодСостояния = Ответ.КодСостояния; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока); 
		Результат.Успешно = СтруктураОтвета.success;
	Исключение		
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));					
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции

&Вместо("СтатусПодписиСогласияУчастника")
Функция Расш1_СтатусПодписиСогласияУчастника(ИдСделки, ИдАнкеты)
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно,Статус", Неопределено, Неопределено, Истина, Неопределено);
	
	Если Не ЗначениеЗаполнено(ИдСделки) Или Не ЗначениеЗаполнено(ИдАнкеты) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Метод = СтрШаблон("/ipoteka/application/api/v1/deals/%1/applications/%2/acceptance", ОбработатьИд(ИдСделки), ОбработатьИд(ИдАнкеты));	
	HTTPЗапрос	= Новый HTTPЗапрос; 
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, ,Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_СтатусПодписиСогласияУчастника", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
		Результат.КодСостояния = Ответ.КодСостояния; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока); 
		Результат.Успешно = СтруктураОтвета.success;       
		Если Результат.КодСостояния > 199 И Результат.КодСостояния < 300 И СтруктураОтвета.success = Истина Тогда
			Если СтруктураОтвета.data.status = "REQUESTED" Тогда
				Результат.Статус = "Запрошен";
			ИначеЕсли СтруктураОтвета.data.status = "REVOKED" Тогда
				Результат.Статус = "Аннулирован";	
			ИначеЕсли СтруктураОтвета.data.status = "APPROVED" Тогда
				Результат.Статус = "Одобрен";
			ИначеЕсли СтруктураОтвета.data.status = "NOT_SENT" Тогда
				Результат.Статус = "Не отправлен";
			КонецЕсли;
		КонецЕсли;
	Исключение		
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));					
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции

&Вместо("ПолучитьОфисы")
Функция Расш1_ПолучитьОфисы()
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно", Неопределено, Неопределено, Истина);
	
	Метод = "/ipoteka/application/api/v1/offices/";	
	
	HTTPЗапрос	= Новый HTTPЗапрос; 
	HTTPСоединение = ПодготовитьHTTPСоединение(Метод, HTTPЗапрос, ,Результат);
	
	Если Не Результат.Успешно  Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗапросДляЖурнала = СтрШаблон("%1%2%3",HTTPЗапрос.АдресРесурса,  Символы.ПС , 
	УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки));
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_ПолучитьОфисы", ТекущаяДатаСеанса(), ЗапросДляЖурнала);  
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
		Результат.КодСостояния = Ответ.КодСостояния; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока); 
		Результат.Успешно = СтруктураОтвета.success;
		Если Результат.КодСостояния > 199 И Результат.КодСостояния < 300 И СтруктураОтвета.success = Истина Тогда
			ТекОбъект = Справочники.Банки.Сбербанк.ПолучитьОбъект();   
			ТекОбъект.Офисы.Очистить();
			Для каждого ТекОфис Из СтруктураОтвета.data Цикл  
				НовСтр = ТекОбъект.Офисы.Добавить();   
				НовСтр.Домклик_id = ТекОфис.id;
				НовСтр.Наименование = ТекОфис.address; 
				НовСтр.Регион = Число(ТекОфис.regionCode);
			КонецЦикла;
			ТекОбъект.Записать();
		КонецЕсли;
	Исключение		
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));					
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти