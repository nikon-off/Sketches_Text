#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВернутьНаименование(ВыбранныйОбъект) 
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйОбъект, "Наименование")
КонецФункции

&НаКлиенте
Процедура ПриСоздании(Отказ, СтандартнаяОбработка)
	
	ЗакрытьДляРедактированияВсеГруппы();
	
КонецПроцедуры   

Функция ЗаполнитьПредставленияДляЧтенияГруппыДополнительно()
	
	Элементы.РайонПредставлениеДляЧтения.Заголовок = "";
	Элементы.СегментПредставлениеДляЧтения.Заголовок = "";
	Элементы.ОСПредставлениеДляЧтения.Заголовок = "";
	Элементы.СекцияПредставлениеДляЧтения.Заголовок = "";
	Элементы.ИсполнительПредставлениеДляЧтения.Заголовок = "";
	//Элементы.ИсполнительЗадачПредставлениеДляЧтения.Заголовок = "";
	
	//Заполняем представления для чтения 
	Если ЗначениеЗаполнено(Объект.Район) Тогда
		Элементы.РайонПредставлениеДляЧтения.Заголовок = "Район: " + Объект.Район; 
	КонецЕсли; 
	
	//Заполняем представления для чтения 
	Если ЗначениеЗаполнено(Объект.Сегмент) Тогда
		Элементы.СегментПредставлениеДляЧтения.Заголовок = "Сегмент: " + Объект.Сегмент; 
	КонецЕсли; 
	
	//Заполняем представления для чтения 
	Если ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда
		Элементы.ОСПредставлениеДляЧтения.Заголовок = "ОбъектСтроительства: " + Объект.ОбъектСтроительства; 
	КонецЕсли; 
	
	//Заполняем представления для чтения 
	Если ЗначениеЗаполнено(Объект.Секция) Тогда
		Элементы.СекцияПредставлениеДляЧтения.Заголовок = "Секция: " + Объект.Секция; 
	КонецЕсли; 
	
	//Заполняем представления для чтения 
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		Элементы.ИсполнительПредставлениеДляЧтения.Заголовок = "Пользователь: " + Объект.Исполнитель; 
	КонецЕсли; 
	
	////Заполняем представления для чтения 
	//Если ЗначениеЗаполнено(Объект.ИсполнительЗадач) Тогда
	//	Элементы.ИсполнительЗадачПредставлениеДляЧтения.Заголовок = "Пользователь: " + Объект.ИсполнительЗадач; 
	//КонецЕсли; 
	
	//Районы из таблицы
	Если Объект.Районы.Количество() > 0 Тогда 
		Для Каждого Район из Объект.Районы Цикл
			Если Не Район.Удален Тогда
				Элементы.РайонПредставлениеДляЧтения.Заголовок = Элементы.РайонПредставлениеДляЧтения.Заголовок + ", " + Район.Район; 
			КонецЕсли;	
		КонецЦикла; 
	КонецЕсли;   
	
	//Сегменты из таблицы
	Если Объект.Сегменты.Количество() > 0 Тогда 
		Для Каждого Сегмент из Объект.Сегменты Цикл
			Если Не Сегмент.Удален Тогда
				Элементы.СегментПредставлениеДляЧтения.Заголовок = Элементы.СегментПредставлениеДляЧтения.Заголовок + ", " + Сегмент.Сегмент; 
			КонецЕсли;	
		КонецЦикла; 
	КонецЕсли;   
	
	//ОбъектыСтроительства из таблицы
	Если Объект.ОбъектыСтроительства.Количество() > 0 Тогда 
		Для Каждого ОС из Объект.ОбъектыСтроительства Цикл
			Если Не ОС.Удален Тогда
				Элементы.ОСПредставлениеДляЧтения.Заголовок = Элементы.ОСПредставлениеДляЧтения.Заголовок + ", " + ОС.ОС; 
			КонецЕсли;	
		КонецЦикла; 
	КонецЕсли;   
	
	//Секции из таблицы
	Если Объект.Секции.Количество() > 0 Тогда 
		Для Каждого Секция из Объект.Секции Цикл
			Если Не Секция.Удален Тогда
				Элементы.СекцияПредставлениеДляЧтения.Заголовок = Элементы.СекцияПредставлениеДляЧтения.Заголовок + ", " + Секция.Секция; 
			КонецЕсли;	
		КонецЦикла; 
	КонецЕсли;   
	
	//Исполнители из таблицы
	Если Объект.Исполнители.Количество() > 0 Тогда 
		Для Каждого Исполнитель из Объект.Исполнители Цикл
			Если Не Исполнитель.Удален Тогда
				Элементы.ИсполнительПредставлениеДляЧтения.Заголовок = Элементы.ИсполнительПредставлениеДляЧтения.Заголовок + ", " + Исполнитель.Исполнитель; 
			КонецЕсли;	
		КонецЦикла; 
	КонецЕсли;   
	
	////ИсполнителиЗадач из таблицы
	//Если Объект.ИсполнителиЗадач.Количество() > 0 Тогда 
	//	Для Каждого ИсполнительЗадач из Объект.ИсполнителиЗадач Цикл
	//		Если Не ИсполнительЗадач.Удален Тогда
	//			Элементы.ИсполнительЗадачПредставлениеДляЧтения.Заголовок = Элементы.ИсполнительЗадачПредставлениеДляЧтения.Заголовок + ", " + ИсполнительЗадач.ИсполнительЗадач; 
	//		КонецЕсли;	
	//	КонецЦикла; 
	//КонецЕсли;   
	
КонецФункции 

Функция ЗакрытьОткрытьРедактированиеРайон(Открыто)
	
	Если Элементы.РайонПредставлениеДляЧтения.Заголовок = "" И Не Открыто Тогда 
		Элементы.ГруппаРайон.Видимость = Открыто;
		Элементы.РайонПредставлениеДляЧтения.Видимость = Открыто;  
		
	Иначе Элементы.ГруппаРайон.Видимость = Истина;	
		Элементы.РайонПредставлениеДляЧтения.Видимость = Не Открыто;  
	КонецЕсли; 
	
	Элементы.Район.Видимость = Открыто; 
	Элементы.РайонЗаголовок.Видимость = Открыто;
	Элементы.РайонДобавить.Видимость = Открыто; 
	Элементы.ГруппаРайоновСписок.Видимость = Открыто;
	Элементы.ГруппаРайон.Видимость = Открыто;
	
КонецФункции    

Функция ЗакрытьОткрытьРедактированиеСегмент(Открыто)
	
	Если Элементы.СегментПредставлениеДляЧтения.Заголовок = "" И Не Открыто Тогда 
		Элементы.ГруппаСегмент.Видимость = Открыто;
		Элементы.СегментПредставлениеДляЧтения.Видимость = Открыто;  
		
	Иначе Элементы.ГруппаСегмент.Видимость = Истина;	
		Элементы.СегментПредставлениеДляЧтения.Видимость = Не Открыто;  
	КонецЕсли; 
	
	Элементы.Сегмент.Видимость = Открыто; 
	Элементы.СегментЗаголовок.Видимость = Открыто;
	Элементы.СегментДобавить.Видимость = Открыто; 
	Элементы.ГруппаСегментовСписок.Видимость = Открыто;
	Элементы.ГруппаСегмент.Видимость = Открыто;
	
КонецФункции    

Функция ЗакрытьОткрытьРедактированиеОС(Открыто)
	
	Если Элементы.ОСПредставлениеДляЧтения.Заголовок = "" И Не Открыто Тогда 
		Элементы.ГруппаОС.Видимость = Открыто;
		Элементы.ОСПредставлениеДляЧтения.Видимость = Открыто;  
		
	Иначе Элементы.ГруппаОС.Видимость = Истина;	
		Элементы.ОСПредставлениеДляЧтения.Видимость = Не Открыто;  
	КонецЕсли; 
	
	Элементы.ОС.Видимость = Открыто; 
	Элементы.ОСЗаголовок.Видимость = Открыто;
	Элементы.ОСДобавить.Видимость = Открыто; 
	Элементы.ГруппаОСовСписок.Видимость = Открыто;
	Элементы.ГруппаОС.Видимость = Открыто;
	
КонецФункции    

Функция ЗакрытьОткрытьРедактированиеСекция(Открыто)
	
	Если Элементы.СекцияПредставлениеДляЧтения.Заголовок = "" И Не Открыто Тогда 
		Элементы.ГруппаСекция.Видимость = Открыто;
		Элементы.СекцияПредставлениеДляЧтения.Видимость = Открыто;  
		
	Иначе Элементы.ГруппаСекция.Видимость = Истина;	
		Элементы.СекцияПредставлениеДляЧтения.Видимость = Не Открыто;  
	КонецЕсли; 
	
	Элементы.Секция.Видимость = Открыто; 
	Элементы.СекцияЗаголовок.Видимость = Открыто;
	Элементы.СекцияДобавить.Видимость = Открыто; 
	Элементы.ГруппаСекцийСписок.Видимость = Открыто;
	Элементы.ГруппаСекция.Видимость = Открыто;
	
КонецФункции    

Функция ЗакрытьОткрытьРедактированиеИсполнитель(Открыто)
	
	Если Элементы.ИсполнительПредставлениеДляЧтения.Заголовок = "" И Не Открыто Тогда 
		Элементы.ГруппаИсполнитель.Видимость = Открыто;
		Элементы.ИсполнительПредставлениеДляЧтения.Видимость = Открыто;  
		
	Иначе Элементы.ГруппаИсполнитель.Видимость = Истина;	
		Элементы.ИсполнительПредставлениеДляЧтения.Видимость = Не Открыто;  
	КонецЕсли; 
	
	Элементы.Исполнитель.Видимость = Открыто; 
	Элементы.ИсполнительДобавить.Видимость = Открыто; 
	Элементы.ГруппаИсполнителейСписок.Видимость = Открыто;
	Элементы.ГруппаИсполнитель.Видимость = Открыто;
	
КонецФункции    

Функция ЗакрытьОткрытьРедактированиеИсполнительЗадач(Открыто)
	
	//Если Элементы.ИсполнительЗадачПредставлениеДляЧтения.Заголовок = "" И Не Открыто Тогда 
	//	Элементы.ГруппаИсполнительЗадач.Видимость = Открыто;
	//	Элементы.ИсполнительЗадачПредставлениеДляЧтения.Видимость = Открыто;  
	//	
	//Иначе Элементы.ГруппаИсполнительЗадач.Видимость = Истина;	
	//	Элементы.ИсполнительЗадачПредставлениеДляЧтения.Видимость = Не Открыто;  
	//КонецЕсли; 
	
	//Элементы.ИсполнительЗадач.Видимость = Открыто;
	//Элементы.ИсполнительЗадачДобавить.Видимость = Открыто; 
	//Элементы.ГруппаИсполнителейЗадачСписок.Видимость = Открыто;
	Элементы.ГруппаИсполнительЗадач.Видимость = Открыто;
	
КонецФункции    

&НаКлиенте
Функция ЗакрытьДляРедактированияВсеГруппы()
	
	ЗакрытьОткрытьРедактированиеРайон(Ложь);
	ЗакрытьОткрытьРедактированиеСегмент(Ложь);
	ЗакрытьОткрытьРедактированиеОС(Ложь);
	ЗакрытьОткрытьРедактированиеСекция(Ложь);
	ЗакрытьОткрытьРедактированиеИсполнитель(Ложь);
	ЗакрытьОткрытьРедактированиеИсполнительЗадач(Ложь);
	
КонецФункции // ЗакрытьДляРедактированияВсеГруппы() 

Функция УстановитьВидимостьТипОбъект() 
	
	//ПараметрыОтбора = Новый Структура;
	//ПараметрыОтбора.Вставить("Удален", Ложь);
	//Если Объект.Районы.НайтиСтроки(ПараметрыОтбора).Количество() > 0 
	//	ИЛИ Объект.Сегменты.НайтиСтроки(ПараметрыОтбора).Количество() > 0 
	//	ИЛИ Объект.ОбъектыСтроительства.НайтиСтроки(ПараметрыОтбора).Количество() > 0 
	//	ИЛИ Объект.Секции.НайтиСтроки(ПараметрыОтбора).Количество() > 0 
	//	Тогда
	//		Элементы.ТипОбъекта.Доступность = Ложь;
	//	иначе
	//		Элементы.ТипОбъекта.Доступность = Истина;
	//КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция УстановитьВидимость()
	ИзменитьЧекБокс(Элементы.ПоднятьСтоимостьНаСуммуВыбор, Объект.ПоднятьСтоимостьНаСумму); 
	ИзменитьЧекБокс(Элементы.ПоднятьСтоимостьНаПроцентВыбор, Объект.ПоднятьСтоимостьНаПроцент); 
	ИзменитьЧекБокс(Элементы.УстановитьФиксСтоимостьВыбор, Объект.УстановитьФиксСтоимость);
	
	ИзменитьЧекБокс(Элементы.ОповеститьВыбор, Объект.Оповестить); 
	ИзменитьЧекБокс(Элементы.СМСВыбор, Объект.СМС); 
	ИзменитьЧекБокс(Элементы.EmailВыбор, Объект.Email); 
	ИзменитьЧекБокс(Элементы.НапоминаниеВыбор, Объект.Напоминание);
	
	ИзменитьЧекБокс(Элементы.ПоставитьЗадачуВыбор, Объект.ПоставитьЗадачу); 
	Элементы.ГруппаИсполнительЗадач.Видимость = Объект.ПоставитьЗадачу;
	
	Элементы.ГруппаКанал.Видимость = Объект.Оповестить;
	
	Элементы.ВыборМ2ИлиКвартирыСумма.Видимость = ?(НЕ Объект.ВыборУсловия, Объект.ПоднятьСтоимостьНаСумму, Ложь);
	Элементы.ВыборМ2ИлиКвартирыПроцент.Видимость = ?(НЕ Объект.ВыборУсловия, Объект.ПоднятьСтоимостьНаПроцент, Ложь);
	Элементы.ГруппаНаСумму.Видимость = ?(НЕ Объект.ВыборУсловия, Объект.ПоднятьСтоимостьНаСумму, Ложь);
	Элементы.ГруппаНаПроцент.Видимость = ?(НЕ Объект.ВыборУсловия, Объект.ПоднятьСтоимостьНаПроцент, Ложь);
	Элементы.ГруппаФиксСумма.Видимость = ?(НЕ Объект.ВыборУсловия, Объект.УстановитьФиксСтоимость, Ложь); 
	
	ВыборУсловияПриИзменении(Элементы.ВыборУсловия);
КонецФункции

&НаСервере
Процедура ДобавитьУсловие(ФормаМодифицирована = Истина)
	
	Модифицированность = ФормаМодифицирована;
	
	КоличествоУсловий = КоличествоУсловий + 1;
	НомерТекущего = КоличествоУсловий - СписокУдаленныхУсловий.Количество();
	
	// Массив для новых реквизитов
	ДобавляемыеРеквизиты = Новый Массив;
	
	// Опишем ревизиты формы
	//Реквизит_НомерСтроки = Новый РеквизитФормы("Условия_НомерСтроки" + КоличествоУсловий,	Новый ОписаниеТипов("Число"),, "Номер строки");
	Реквизит_ЛогическаяОперация = Новый РеквизитФормы("Условия_ЛогическаяОперация" + КоличествоУсловий,	Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыЛогическихОпераций"),, "И / ИЛИ");
	Реквизит_Условие = Новый РеквизитФормы("Условия_Условие" + КоличествоУсловий, Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУсловийАвтоподнятияЦен"),, "Условие"); 
	Реквизит_Знак = Новый РеквизитФормы("Условия_Знак" + КоличествоУсловий,	Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыЗнаковСравнений"),, "Знак");
	Реквизит_Значение = Новый РеквизитФормы("Условия_Значение" + КоличествоУсловий,	Новый ОписаниеТипов("Строка"),, "Значение");
	Реквизит_Действующие = Новый РеквизитФормы("Условия_Действующие" + КоличествоУсловий,	Новый ОписаниеТипов("Булево"),, "Действующие");
	
	// Заполним массив
	//ДобавляемыеРеквизиты.Добавить(Реквизит_НомерСтроки);
	ДобавляемыеРеквизиты.Добавить(Реквизит_ЛогическаяОперация);	
	ДобавляемыеРеквизиты.Добавить(Реквизит_Условие); 
	ДобавляемыеРеквизиты.Добавить(Реквизит_Значение);
	ДобавляемыеРеквизиты.Добавить(Реквизит_Действующие);
	ДобавляемыеРеквизиты.Добавить(Реквизит_Знак);
	
	// Добавим новые реквизиты в форму
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ДобавляемыеРеквизиты.Очистить();
	
	#Область Группы
	
	ИмяГруппы = "ГруппаБлокУсловия" + КоличествоУсловий;
	ИмяГруппы = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаСтроки);
	ИмяГруппы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы.Заголовок = "Все реквизиты";
	ИмяГруппы.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ИмяГруппы.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
	ИмяГруппы.РастягиватьПоГоризонтали = Истина;
	
	ИмяГруппы0 = "ГруппаБлокУсловия1стр" + КоличествоУсловий;
	ИмяГруппы0 = Элементы.Добавить(ИмяГруппы0, Тип("ГруппаФормы"), ИмяГруппы);
	ИмяГруппы0.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы0.Заголовок = "Строка 1";
	ИмяГруппы0.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы0.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы0.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ИмяГруппы0.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;        
	ИмяГруппы0.РастягиватьПоГоризонтали = Ложь;
	ИмяГруппы0.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
	
	ИмяГруппы1 = "ГруппаБлокУсловия1кол" + КоличествоУсловий;
	ИмяГруппы1 = Элементы.Добавить(ИмяГруппы1, Тип("ГруппаФормы"), ИмяГруппы0);
	ИмяГруппы1.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы1.Заголовок = "Колонка 1";
	ИмяГруппы1.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы1.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы1.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ИмяГруппы1.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;        
	ИмяГруппы1.РастягиватьПоГоризонтали = Ложь;
	ИмяГруппы1.РастягиватьПоВертикали = Ложь;
	ИмяГруппы1.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	ИмяГруппы1.Ширина = 10;
	
	ИмяГруппы2 = "ГруппаБлокУсловия2кол" + КоличествоУсловий;
	ИмяГруппы2 = Элементы.Добавить(ИмяГруппы2, Тип("ГруппаФормы"), ИмяГруппы0);
	ИмяГруппы2.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы2.Заголовок = "Колонка 2";
	ИмяГруппы2.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы2.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ИмяГруппы2.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
	ИмяГруппы2.РастягиватьПоВертикали = Ложь;
	ИмяГруппы2.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	//*prog2@CLOUD.CRM4DEV.RU, 2024-01-22 05:38:55
	//ИмяГруппы2.Ширина = 10;
	// -------- заменено на:
	ИмяГруппы2.Ширина = 2;
	//*/prog2@CLOUD.CRM4DEV.RU, 2024-01-22 05:38:55
	
	ИмяГруппы3 = "ГруппаБлокУсловият3кол" + КоличествоУсловий;
	ИмяГруппы3 = Элементы.Добавить(ИмяГруппы3, Тип("ГруппаФормы"), ИмяГруппы0);
	ИмяГруппы3.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы3.Заголовок = "Колонка 3";
	ИмяГруппы3.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы3.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы3.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ИмяГруппы3.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
	ИмяГруппы3.РастягиватьПоГоризонтали = Ложь;
	ИмяГруппы3.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	//*prog2@CLOUD.CRM4DEV.RU, 2024-01-22 05:39:10
	//ИмяГруппы3.Ширина = 30;
	// -------- заменено на:
	ИмяГруппы3.Ширина = 12;
	//*/prog2@CLOUD.CRM4DEV.RU, 2024-01-22 05:39:10
	
	ИмяГруппы4 = "ГруппаБлокУсловия4кол" + КоличествоУсловий;
	ИмяГруппы4 = Элементы.Добавить(ИмяГруппы4, Тип("ГруппаФормы"), ИмяГруппы0);
	ИмяГруппы4.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы4.Заголовок = "Колонка 4";
	ИмяГруппы4.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы4.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы4.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ИмяГруппы4.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
	ИмяГруппы4.РастягиватьПоГоризонтали = Ложь;
	ИмяГруппы4.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	//*prog2@CLOUD.CRM4DEV.RU, 2024-01-22 05:39:24
	//ИмяГруппы4.Ширина = 10;
	// -------- заменено на:
	ИмяГруппы4.Ширина = 2;
	//*/prog2@CLOUD.CRM4DEV.RU, 2024-01-22 05:39:24
	
	ИмяГруппы5 = "ГруппаБлокУсловия5кол" + КоличествоУсловий;
	ИмяГруппы5 = Элементы.Добавить(ИмяГруппы5, Тип("ГруппаФормы"), ИмяГруппы0);
	ИмяГруппы5.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы5.Заголовок = "Колонка 5";
	ИмяГруппы5.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы5.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы5.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ИмяГруппы5.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
	ИмяГруппы5.РастягиватьПоГоризонтали = Ложь;
	ИмяГруппы5.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	ИмяГруппы5.Ширина = 0; 
	
	ИмяГруппы6 = "ГруппаБлокУсловия6кол" + КоличествоУсловий;
	ИмяГруппы6 = Элементы.Добавить(ИмяГруппы6, Тип("ГруппаФормы"), ИмяГруппы0);
	ИмяГруппы6.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы6.Заголовок = "Колонка 6";
	ИмяГруппы6.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы6.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы6.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ИмяГруппы6.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
	ИмяГруппы6.РастягиватьПоГоризонтали = Ложь;
	ИмяГруппы6.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	ИмяГруппы6.Ширина = 0;
	
	ИмяГруппы7 = "ГруппаБлокУсловия7кол" + КоличествоУсловий;
	ИмяГруппы7 = Элементы.Добавить(ИмяГруппы7, Тип("ГруппаФормы"), ИмяГруппы0);
	ИмяГруппы7.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы7.Заголовок = "Колонка 7";
	ИмяГруппы7.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы7.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы7.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ИмяГруппы7.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
	ИмяГруппы7.РастягиватьПоГоризонтали = Истина;
	ИмяГруппы7.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	ИмяГруппы7.Ширина = 3;
	
	
	ИмяГруппы01 = "ГруппаБлокУсловия2стр" + КоличествоУсловий;
	ИмяГруппы01 = Элементы.Добавить(ИмяГруппы01, Тип("ГруппаФормы"), ИмяГруппы);
	ИмяГруппы01.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы01.Заголовок = "Строка 2";
	ИмяГруппы01.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы01.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы01.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ИмяГруппы01.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;        
	ИмяГруппы01.РастягиватьПоГоризонтали = Истина;
	ИмяГруппы01.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
	ИмяГруппы01.Видимость = Ложь;
	
	ИмяГруппы02 = "ГруппаБлокУсловия3стр" + КоличествоУсловий;
	ИмяГруппы02 = Элементы.Добавить(ИмяГруппы02, Тип("ГруппаФормы"), ИмяГруппы);
	ИмяГруппы02.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы02.Заголовок = "Строка 3";
	ИмяГруппы02.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы02.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы02.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ИмяГруппы02.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;        
	ИмяГруппы02.РастягиватьПоГоризонтали = Истина;
	ИмяГруппы02.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
	ИмяГруппы02.Видимость = Ложь;
	
	ИмяГруппы03 = "ГруппаБлокУсловия4стр" + КоличествоУсловий;
	ИмяГруппы03 = Элементы.Добавить(ИмяГруппы03, Тип("ГруппаФормы"), ИмяГруппы);
	ИмяГруппы03.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы03.Заголовок = "Строка 4";
	ИмяГруппы03.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы03.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы03.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ИмяГруппы03.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;        
	ИмяГруппы03.РастягиватьПоГоризонтали = Истина;
	ИмяГруппы03.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
	ИмяГруппы03.Видимость = Ложь;
	
	ИмяГруппы04 = "ГруппаБлокУсловия5стр" + КоличествоУсловий;
	ИмяГруппы04 = Элементы.Добавить(ИмяГруппы04, Тип("ГруппаФормы"), ИмяГруппы);
	ИмяГруппы04.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы04.Заголовок = "Строка 5";
	ИмяГруппы04.Отображение = ОтображениеОбычнойГруппы.Нет;
	ИмяГруппы04.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы04.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ИмяГруппы04.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;        
	ИмяГруппы04.РастягиватьПоГоризонтали = Истина;
	ИмяГруппы04.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
	ИмяГруппы04.Видимость = Ложь;
	
	#КонецОбласти
	
	#Область Строка1
	
	#Область Колонка1
	
	////НомерСтроки
	//ЭлементНомерСтроки = "Условия_НомерСтроки" + КоличествоУсловий;
	//ЭлементНомерСтроки = Элементы.Добавить(ЭлементНомерСтроки, Тип("ПолеФормы"), ИмяГруппы1);
	//ЭлементНомерСтроки.Вид = ВидПоляФормы.ПолеНадписи;
	//ЭлементНомерСтроки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	//ЭлементНомерСтроки.Заголовок = "№";
	//ЭлементНомерСтроки.Ширина = 2;
	//ЭлементНомерСтроки.ПутьКДанным = "Условия_НомерСтроки" + КоличествоУсловий;
	//ЭлементНомерСтроки.РастягиватьПоГоризонтали = Ложь;
	//ЭлементНомерСтроки.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	//ЭтаФорма["Условия_НомерСтроки" + КоличествоУсловий] = НомерТекущего;
	
	#КонецОбласти
	
	#Область Колонка2
	
	//ЛогическаяОперация
	ЭлементЛогическаяОперация = "Условия_ЛогическаяОперация" + КоличествоУсловий;
	ЭлементЛогическаяОперация = Элементы.Добавить(ЭлементЛогическаяОперация, Тип("ПолеФормы"), ИмяГруппы2);
	ЭлементЛогическаяОперация.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЛогическаяОперация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементЛогическаяОперация.Заголовок = "И/ИЛИ";
	ЭлементЛогическаяОперация.ПутьКДанным = "Условия_ЛогическаяОперация" + КоличествоУсловий; 
	Если НЕ ЗначениеЗаполнено(ЭтаФорма["Условия_ЛогическаяОперация" + КоличествоУсловий]) Тогда
		ЭтаФорма["Условия_ЛогическаяОперация" + КоличествоУсловий] = Перечисления.ВариантыЛогическихОпераций.И;
	КонецЕсли;
	ЭлементЛогическаяОперация.Ширина = 2;
	ЭлементЛогическаяОперация.РастягиватьПоГоризонтали = Ложь;
	Если НомерТекущего = 1 Тогда
		ЭлементЛогическаяОперация.Доступность = Ложь;
	КонецЕсли;
	ЭлементЛогическаяОперация.УстановитьДействие("ПриИзменении", "ЛогическаяОперацияПриИзменении");
	
	#КонецОбласти
	
	#Область Колонка3
	
	//Условие
	ЭлементУсловие = "Условия_Условие" + КоличествоУсловий;
	ЭлементУсловие = Элементы.Добавить(ЭлементУсловие, Тип("ПолеФормы"), ИмяГруппы3);
	ЭлементУсловие.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементУсловие.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементУсловие.Заголовок = "Условие";
	ЭлементУсловие.ПутьКДанным = "Условия_Условие" + КоличествоУсловий;
	//*prog2@CLOUD.CRM4DEV.RU, 2024-01-22 05:59:09
	//ЭлементУсловие.Ширина = 20;
	// -------- заменено на:
	ЭлементУсловие.Ширина = 12;
	//*/prog2@CLOUD.CRM4DEV.RU, 2024-01-22 05:59:09
	ЭлементУсловие.РастягиватьПоГоризонтали = Ложь;
	ЭлементУсловие.УстановитьДействие("ПриИзменении", "ЭлементУсловиеПриИзменении");
	
	
	#КонецОбласти
	
	#Область Колонка4
	
	//Знак
	ЭлементЗнак = "Условия_Знак" + КоличествоУсловий;
	ЭлементЗнак = Элементы.Добавить(ЭлементЗнак, Тип("ПолеФормы"), ИмяГруппы4);
	ЭлементЗнак.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЗнак.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементЗнак.Заголовок = "Знак";
	ЭлементЗнак.ПутьКДанным = "Условия_Знак" + КоличествоУсловий;
	Если НЕ ЗначениеЗаполнено(ЭтаФорма["Условия_Знак" + КоличествоУсловий]) Тогда
		ЭтаФорма["Условия_Знак" + КоличествоУсловий] = Перечисления.ВариантыЗнаковСравнений.БольшеРавно;
	КонецЕсли;
	ЭлементЗнак.Ширина = 5;
	ЭлементЗнак.РастягиватьПоГоризонтали = Ложь;
	ЭлементЗнак.УстановитьДействие("ПриИзменении", "ЗначениеПриИзменении");
	
	#КонецОбласти
	
	#Область Колонка5
	
	//Значение
	ЭлементЗначение = "Условия_Значение" + КоличествоУсловий;
	ЭлементЗначение = Элементы.Добавить(ЭлементЗначение, Тип("ПолеФормы"), ИмяГруппы5);
	ЭлементЗначение.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЗначение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементЗначение.Заголовок = "Значение";
	ЭлементЗначение.ПутьКДанным = "Условия_Значение" + КоличествоУсловий;
	ЭлементЗначение.Ширина = 5;
	ЭлементЗначение.РастягиватьПоГоризонтали = Ложь;
	ЭлементЗначение.УстановитьДействие("ПриИзменении", "СтатусРаботыПриИзменении");
	
	#КонецОбласти
	
	#Область Колонка6
	
	//Значение
	ЭлементЗначение = "Условия_Действующие" + КоличествоУсловий;
	ЭлементЗначение = Элементы.Добавить(ЭлементЗначение, Тип("ПолеФормы"), ИмяГруппы6);
	ЭлементЗначение.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементЗначение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементЗначение.Заголовок = "Действующие";
	ЭлементЗначение.ПутьКДанным = "Условия_Действующие" + КоличествоУсловий;
	
	#КонецОбласти
	
	#Область Колонка7
	
	//ЭлементУдалить
	ЭлементУдалить = "Условия_ЭлементУдалить" + КоличествоУсловий;
	ЭлементУдалить = Элементы.Добавить(ЭлементУдалить, Тип("ДекорацияФормы"), ИмяГруппы7);
	ЭлементУдалить.Вид = ВидДекорацииФормы.Картинка;
	ЭлементУдалить.Заголовок = "";
	ЭлементУдалить.Гиперссылка = Истина;
	ЭлементУдалить.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	ЭлементУдалить.РастягиватьПоВертикали = Ложь;
	ЭлементУдалить.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ЭлементУдалить.Картинка = БиблиотекаКартинок.Иконка_Закрыть;
	ЭлементУдалить.УстановитьДействие("Нажатие", "УдалитьУсловие");
	
	#КонецОбласти
	
	#КонецОбласти
	
	//ПроверитьНаличиеЭлементов();
	
	//НомерТекущего = 1;
	//Для Инд = 1 По КоличествоУсловий Цикл
	//	Если СписокУдаленныхУсловий.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ЭтаФорма["Условия_НомерСтроки" + КоличествоУсловий] = НомерТекущего;
	//	
	//	НомерТекущего = НомерТекущего + 1;
	//КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеЭлементов()
	
	СписокУдаленныхУсловий.Очистить();;
	Для Инд = 1 По КоличествоУсловий Цикл
		
		Попытка
			Если ТипЗнч(Элементы["Условия_НомерСтроки"+Инд]) = Тип("ПолеФормы") Тогда 
			КонецЕсли;
		исключение
			НайденныйЭлемент = СписокУдаленныхУсловий.НайтиПоЗначению(Строка(Инд));
			СписокУдаленныхУсловий.Добавить(Строка(Инд));
		конецпопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУсловиеСервер(Знач ЭлементИмя)
	
	ТекНомер = Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрДлина("Условия_ЭлементУдалить")); 
	
	//УстановитьДоступность = Ложь;
	//Если ЭтаФорма["Условия_ЛогическаяОперация" + ТекНомер] = 1 Тогда
	//	УстановитьДоступность = Истина;
	//КонецЕсли;
	
	Если СписокУдаленныхУсловий.НайтиПоЗначению(Строка(ТекНомер)) = Неопределено Тогда
		попытка
			Элементы.Удалить(Элементы["ГруппаБлокУсловия" + ТекНомер]);
			УдаляемыеРеквизиты = Новый Массив;	
			УдаляемыеРеквизиты.Добавить("Условия_ЛогическаяОперация" + ТекНомер);	
			УдаляемыеРеквизиты.Добавить("Условия_Условие" + ТекНомер);
			УдаляемыеРеквизиты.Добавить("Условия_Знак" + ТекНомер);
			УдаляемыеРеквизиты.Добавить("Условия_Значение" + ТекНомер);
			ИзменитьРеквизиты(, УдаляемыеРеквизиты); 
		исключение
		КонецПопытки;
		
		СписокУдаленныхУсловий.Добавить(ТекНомер);
		
	КонецЕсли;
	
	//Если УстановитьДоступность Тогда
	//	Для Инд = ТекНомер По КоличествоУсловий Цикл
	//		Если ТипЗнч(Элементы["Условия_ЛогическаяОперация"+ТекНомер]) = Тип("ПолеФормы") Тогда 
	//			Элементы["Условия_ЛогическаяОперация"+ТекНомер].Доступность = Ложь; 
	//			прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//ПроверитьНаличиеЭлементов();
	//
	//НомерТекущего = 1;
	//Для Инд = 1 По КоличествоУсловий Цикл
	//	Если СписокУдаленныхУсловий.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ЭтаФорма["Условия_НомерСтроки" + КоличествоУсловий] = НомерТекущего;
	//	
	//	НомерТекущего = НомерТекущего + 1;
	//КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура СохранитьНаСервере()
	
КонецПроцедуры

Функция ЗаполнитьДанныеИзОбъекта() 
	
	ЗаполнитьРайоныИзТаблицы();
	ЗаполнитьСегментыИзТаблицы();
	ЗаполнитьОСИзТаблицы();
	ЗаполнитьСекцииИзТаблицы();
	ЗаполнитьИсполнительИзТаблицы();
	//ЗаполнитьИсполнительЗадачИзТаблицы();
	УстановитьВидимостьТипОбъект();
	
	ЗаполнитьПредставленияДляЧтенияГруппыДополнительно();   
	
КонецФункции

&НаСервере
Процедура ОчиститьСвязанныеРегистры(Ссылка)
	Справочники.ДЦО_НастойкиПоднятия.ОчиститьСвязанныеРегистры(Ссылка);
КонецПроцедуры


#КонецОбласти


#Область ФункцииОбработкиСписковЭлементовФормы
// Заполнение списка универсальный
Функция ДобавитьЭлементСпискаВСписок(Индекс, ПриОткрытии = Ложь, ПостфиксНазвания, РодительЭлемента, ЗаголовокНадписи, ИмяПроцедурыУдаления, ИмяПроцедурыДляОткрытия = "")
	
	ГруппаСписок = ЭтаФорма.Элементы.Добавить("Группа" + ПостфиксНазвания + Индекс, Тип("ГруппаФормы"),Элементы[РодительЭлемента]);
	ГруппаСписок.Вид = ВидГруппыФормы.ОбычнаяГруппа; 
	ГруппаСписок.Заголовок = "";
	ГруппаСписок.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСписок.ОтображатьЗаголовок = ЛОЖЬ; 
	ГруппаСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	ГруппаСписок.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаСписок.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаСписок.ЦветФона = Новый Цвет(248,248,249);  	
	
	//Декорация надпись
	ИмяЭлемента = ЭтаФорма.Элементы.Добавить("Заголовок" + ПостфиксНазвания + Индекс, Тип("ДекорацияФормы"),ГруппаСписок);
	ИмяЭлемента.Вид = ВидДекорацииФормы.Надпись;
	ИмяЭлемента.Заголовок = ЗаголовокНадписи;  
	
	Если ИмяПроцедурыДляОткрытия <> "" Тогда
		ИмяЭлемента.Гиперссылка = Истина;
		ИмяЭлемента.УстановитьДействие("Нажатие", ИмяПроцедурыДляОткрытия);	
	КонецЕсли;
	
	//Декорация картинка
	КартинкаЭлемента = ЭтаФорма.Элементы.Добавить("Картинка" + ПостфиксНазвания + Индекс, Тип("ДекорацияФормы"),ГруппаСписок);
	КартинкаЭлемента.Вид = ВидДекорацииФормы.Картинка;
	КартинкаЭлемента.Картинка = БиблиотекаКартинок.Дев_Иконка_Закрыть_Черная;
	КартинкаЭлемента.РазмерКартинки = РазмерКартинки.Растянуть;
	КартинкаЭлемента.Ширина = 2;
	КартинкаЭлемента.Высота = 1;
	КартинкаЭлемента.Гиперссылка = Истина;
	КартинкаЭлемента.УстановитьДействие("Нажатие", ИмяПроцедурыУдаления); 
	
КонецФункции 

// Районы
Функция ДобавитьРайонВТаблицу(НомерСтроки)
	
	Если НомерСтроки = -1 Тогда
		НовыйРайон = Объект.Районы.Добавить();
		НовыйРайон.Район = Объект.Район; 
		НомерСтроки = НовыйРайон.НомерСтроки - 1;
	КонецЕсли;
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(НомерСтроки);
	МассивВозврата.Добавить(Объект.Район.Наименование);  
	
	Возврат МассивВозврата;
	
КонецФункции // ДобавитьПроектВТаблицу() 

Функция УдалитьРайонИзТаблицы(Знач ИмяЭлемента)  
	
	НомерГруппы = СтрЗаменить(ИмяЭлемента, "КартинкаРайоны", ""); 
	
	ГруппаРайона = Элементы["ГруппаРайоны" + НомерГруппы]; 
	Если ГруппаРайона <> Неопределено Тогда 
		Объект.Районы[Число(НомерГруппы)].Удален = Истина;
		Элементы.Удалить(ГруппаРайона);	
	КонецЕсли;    
	
КонецФункции // УдалитьПроектИзТаблицы()

Функция ЗаполнитьРайоныИзТаблицы()  
	
	Для каждого Район из Объект.Районы Цикл 
		Если НЕ Район.Удален Тогда
			ИмяРайона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Район.Район, "Наименование"); 
			ДобавитьЭлементСпискаВСписок(Район.НомерСтроки - 1, Истина, "Районы", "ГруппаРайоновСписок", ИмяРайона, "УдалитьРайон"); 
		КонецЕсли;
	КонецЦикла; 
	
КонецФункции // ЗаполнитьПроектИзТаблицы()

// Сегменты
Функция ДобавитьСегментВТаблицу(НомерСтроки)
	
	Если НомерСтроки = -1 Тогда
		НовыйСегмент = Объект.Сегменты.Добавить();
		НовыйСегмент.Сегмент = Объект.Сегмент; 
		НомерСтроки = НовыйСегмент.НомерСтроки - 1;
	КонецЕсли;
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(НомерСтроки);
	МассивВозврата.Добавить(Объект.Сегмент.Наименование);  
	
	Возврат МассивВозврата;
	
КонецФункции // ДобавитьСегментВТаблицу() 

Функция УдалитьСегментИзТаблицы(Знач ИмяЭлемента)  
	
	НомерГруппы = СтрЗаменить(ИмяЭлемента, "КартинкаСегменты", ""); 
	
	ГруппаСегмента = Элементы["ГруппаСегменты" + НомерГруппы]; 
	Если ГруппаСегмента <> Неопределено Тогда 
		Объект.Сегменты[Число(НомерГруппы)].Удален = Истина;
		Элементы.Удалить(ГруппаСегмента);	
	КонецЕсли;    
	
КонецФункции // УдалитьСегментИзТаблицы()

Функция ЗаполнитьСегментыИзТаблицы()  
	
	Для каждого Сегмент из Объект.Сегменты Цикл  
		Если НЕ Сегмент.Удален Тогда
			ИмяСегмента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сегмент.Сегмент, "Наименование"); 
			ДобавитьЭлементСпискаВСписок(Сегмент.НомерСтроки - 1, Истина, "Сегменты", "ГруппаСегментовСписок", ИмяСегмента, "УдалитьСегмент");
		КонецЕсли;
	КонецЦикла; 
	
КонецФункции // ЗаполнитьСегментИзТаблицы()

// ОбъектыСтроительства
Функция ДобавитьОСВТаблицу(НомерСтроки)
	
	Если НомерСтроки = -1 Тогда
		НовыйОС = Объект.ОбъектыСтроительства.Добавить();
		НовыйОС.ОС = Объект.ОбъектСтроительства; 
		НомерСтроки = НовыйОС.НомерСтроки - 1;
	КонецЕсли; 
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(НомерСтроки);
	МассивВозврата.Добавить(Объект.ОбъектСтроительства.Наименование);  
	
	Возврат МассивВозврата;
	
КонецФункции // ДобавитьОСВТаблицу() 

Функция УдалитьОСИзТаблицы(Знач ИмяЭлемента)  
	
	НомерГруппы = СтрЗаменить(ИмяЭлемента, "КартинкаОбъектыСтроительства", ""); 
	
	ГруппаОСа = Элементы["ГруппаОбъектыСтроительства" + НомерГруппы]; 
	Если ГруппаОСа <> Неопределено Тогда 
		Объект.ОбъектыСтроительства[Число(НомерГруппы)].Удален = Истина;
		Элементы.Удалить(ГруппаОСа);	
	КонецЕсли;    
	
КонецФункции // УдалитьОСИзТаблицы()

Функция ЗаполнитьОСИзТаблицы()  
	
	Для каждого ОС из Объект.ОбъектыСтроительства Цикл  
		Если НЕ ОС.Удален Тогда
			ИмяОСа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОС.ОС, "Наименование"); 
			ДобавитьЭлементСпискаВСписок(ОС.НомерСтроки - 1, Истина, "ОбъектыСтроительства", "ГруппаОСовСписок", ИмяОСа, "УдалитьОС");
		КонецЕсли;
	КонецЦикла; 
	
КонецФункции // ЗаполнитьОСИзТаблицы()

// Секции
Функция ДобавитьСекцияВТаблицу(НомерСтроки)
	
	Если НомерСтроки = -1 Тогда
		НовыйСекция = Объект.Секции.Добавить();
		НовыйСекция.Секция = Объект.Секция; 
		НомерСтроки = НовыйСекция.НомерСтроки - 1;
	КонецЕсли; 
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(НомерСтроки);
	МассивВозврата.Добавить(Объект.Секция.Наименование);  
	
	Возврат МассивВозврата;
	
КонецФункции // ДобавитьСекцияВТаблицу() 

Функция УдалитьСекцияИзТаблицы(Знач ИмяЭлемента)  
	
	НомерГруппы = СтрЗаменить(ИмяЭлемента, "КартинкаСекции", ""); 
	
	ГруппаСекции = Элементы["ГруппаСекции" + НомерГруппы]; 
	Если ГруппаСекции <> Неопределено Тогда 
		Объект.Секции[Число(НомерГруппы)].Удален = Истина;
		Элементы.Удалить(ГруппаСекции);	
	КонецЕсли;    
	
КонецФункции // УдалитьСекцияИзТаблицы()

Функция ЗаполнитьСекцииИзТаблицы()  
	
	Для каждого Секция из Объект.Секции Цикл  
		Если НЕ Секция.Удален Тогда
			ИмяСекция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Секция.Секция, "Наименование"); 
			ДобавитьЭлементСпискаВСписок(Секция.НомерСтроки - 1, Истина, "Секции", "ГруппаСекцийСписок", ИмяСекция, "УдалитьСекция");
		КонецЕсли;
	КонецЦикла; 
	
КонецФункции // ЗаполнитьСекцияИзТаблицы()

// Исполнитель
Функция ДобавитьИсполнительВТаблицу(НомерСтроки)
	
	Если НомерСтроки = -1 Тогда
		НовыйСекция = Объект.Исполнители.Добавить();
		НовыйСекция.Исполнитель = Объект.Исполнитель; 
		НомерСтроки = НовыйСекция.НомерСтроки - 1;
	КонецЕсли; 
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(НомерСтроки);
	МассивВозврата.Добавить(Объект.Исполнитель.Наименование);  
	
	Возврат МассивВозврата;
	
КонецФункции // ДобавитьИсполнительВТаблицу() 

Функция УдалитьИсполнительИзТаблицы(Знач ИмяЭлемента)  
	
	НомерГруппы = СтрЗаменить(ИмяЭлемента, "КартинкаИсполнители", ""); 
	
	ГруппаИсполнители = Элементы["ГруппаИсполнители" + НомерГруппы]; 
	Если ГруппаИсполнители <> Неопределено Тогда 
		Объект.Исполнители[Число(НомерГруппы)].Удален = Истина;
		Элементы.Удалить(ГруппаИсполнители);	
	КонецЕсли;    
	
КонецФункции // УдалитьИсполнительИзТаблицы()

Функция ЗаполнитьИсполнительИзТаблицы()  
	
	Для каждого Исполнитель из Объект.Исполнители Цикл  
		Если НЕ Исполнитель.Удален Тогда
			ИмяИсполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Исполнитель.Исполнитель, "Наименование"); 
			ДобавитьЭлементСпискаВСписок(Исполнитель.НомерСтроки - 1, Истина, "Исполнители", "ГруппаИсполнителейСписок", ИмяИсполнитель, "УдалитьИсполнитель"); 
		КонецЕсли;
	КонецЦикла; 
	
КонецФункции // ЗаполнитьИсполнительИзТаблицы()

// ИсполнительЗадач
Функция ДобавитьИсполнительЗадачВТаблицу(НомерСтроки)
	
	Если НомерСтроки = -1 Тогда
		НовыйСекция = Объект.ИсполнителиЗадач.Добавить();
		НовыйСекция.ИсполнительЗадач = Объект.ИсполнительЗадач; 
		НомерСтроки = НовыйСекция.НомерСтроки - 1;
	КонецЕсли; 
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(НомерСтроки);
	МассивВозврата.Добавить(Объект.ИсполнительЗадач.Наименование);  
	
	Возврат МассивВозврата;
	
КонецФункции // ДобавитьИсполнительЗадачВТаблицу() 

Функция УдалитьИсполнительЗадачИзТаблицы(Знач ИмяЭлемента)  
	
	НомерГруппы = СтрЗаменить(ИмяЭлемента, "КартинкаИсполнителиЗадач", ""); 
	
	ГруппаИсполнителиЗадач = Элементы["ГруппаИсполнителиЗадач" + НомерГруппы]; 
	Если ГруппаИсполнителиЗадач <> Неопределено Тогда 
		Объект.ИсполнителиЗадач[Число(НомерГруппы)].Удален = Истина;
		Элементы.Удалить(ГруппаИсполнителиЗадач);	
	КонецЕсли;    
	
КонецФункции // УдалитьИсполнительЗадачИзТаблицы()

Функция ЗаполнитьИсполнительЗадачИзТаблицы()  
	
	Для каждого ИсполнительЗадач из Объект.ИсполнителиЗадач Цикл  
		Если НЕ ИсполнительЗадач.Удален Тогда
			ИмяИсполнительЗадач = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсполнительЗадач.ИсполнительЗадач, "Наименование"); 
			ДобавитьЭлементСпискаВСписок(ИсполнительЗадач.НомерСтроки - 1, Истина, "ИсполнителиЗадач", "ГруппаИсполнителейЗадачСписок", ИмяИсполнительЗадач, "УдалитьИсполнительЗадач"); 
		КонецЕсли;	
	КонецЦикла; 
	
КонецФункции // ЗаполнитьИсполнительЗадачИзТаблицы()


#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы 

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	
	Если Объект.ТипОбъекта = "Район" Тогда 
		ЗакрытьОткрытьРедактированиеРайон(Истина); 
		ЗакрытьОткрытьРедактированиеСегмент(Ложь);
		ЗакрытьОткрытьРедактированиеОС(Ложь);
		ЗакрытьОткрытьРедактированиеСекция(Ложь);
	КонецЕсли;
	Если Объект.ТипОбъекта = "Сегмент" Тогда 
		ЗакрытьОткрытьРедактированиеРайон(Ложь); 
		ЗакрытьОткрытьРедактированиеСегмент(Истина);
		ЗакрытьОткрытьРедактированиеОС(Ложь);
		ЗакрытьОткрытьРедактированиеСекция(Ложь);
	КонецЕсли;
	Если Объект.ТипОбъекта = "ОС" Тогда 
		ЗакрытьОткрытьРедактированиеРайон(Ложь); 
		ЗакрытьОткрытьРедактированиеСегмент(Ложь);
		ЗакрытьОткрытьРедактированиеОС(Истина);
		ЗакрытьОткрытьРедактированиеСекция(Ложь);
	КонецЕсли;
	Если Объект.ТипОбъекта = "Секция" Тогда 
		ЗакрытьОткрытьРедактированиеРайон(Ложь); 
		ЗакрытьОткрытьРедактированиеСегмент(Ложь);
		ЗакрытьОткрытьРедактированиеОС(Ложь);
		ЗакрытьОткрытьРедактированиеСекция(Истина);
	КонецЕсли; 
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУсловие(Элемент)
	
	УдалитьУсловиеСервер(Элемент.Имя);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ИзменитьЧекБокс(Элемент, Значение)
	
	Если Значение Тогда
		Элемент.Картинка = БиблиотекаКартинок.Дев_ИконкаАктивныйЧекбокс; 
	Иначе
		Элемент.Картинка = БиблиотекаКартинок.Дев_ИконкаПустойЧекБокс; 
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецФункции // ИзменитьЧекБокс()

&НаКлиенте
Процедура ОповеститьВыборНажатие(Элемент)
	Объект.Оповестить = Не Объект.Оповестить;
	ИзменитьЧекБокс(Элемент, Объект.Оповестить); 
	Элементы.ГруппаКанал.Видимость = Объект.Оповестить;
	ЗакрытьОткрытьРедактированиеИсполнитель(Объект.Оповестить);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьЗадачуВыборНажатие(Элемент)
	Объект.ПоставитьЗадачу = Не Объект.ПоставитьЗадачу;
	ИзменитьЧекБокс(Элемент, Объект.ПоставитьЗадачу); 
	ЗакрытьОткрытьРедактированиеИсполнительЗадач(Объект.ПоставитьЗадачу);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СмсВыборНажатие(Элемент)
	Объект.СМС = Не Объект.СМС;
	ИзменитьЧекБокс(Элемент, Объект.СМС);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура EmailВыборНажатие(Элемент)
	Объект.Email = Не Объект.Email;
	ИзменитьЧекБокс(Элемент, Объект.Email); 
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НапоминаниеВыборНажатие(Элемент)
	Объект.Напоминание = Не Объект.Напоминание;
	ИзменитьЧекБокс(Элемент, Объект.Напоминание); 
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыборУсловияПриИзменении(Элемент) 
	Элементы.ГруппаПоДействию.Видимость = НЕ Объект.ВыборУсловия;
	Элементы.ГруппаПоВыбытию.Видимость = Объект.ВыборУсловия;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыборНажатиеПоднятьСтоимостьНаСумму(Элемент)
	Объект.ПоднятьСтоимостьНаСумму = Не Объект.ПоднятьСтоимостьНаСумму;
	ИзменитьЧекБокс(Элемент, Объект.ПоднятьСтоимостьНаСумму); 
	Если Объект.ПоднятьСтоимостьНаСумму Тогда
		Объект.ПоднятьСтоимостьНаПроцент = Ложь;
		Объект.УстановитьФиксСтоимость = Ложь;
	КонецЕсли;
	УстановитьВидимость();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыборНажатиеПоднятьСтоимостьНаПроцент(Элемент)
	Объект.ПоднятьСтоимостьНаПроцент = Не Объект.ПоднятьСтоимостьНаПроцент;
	ИзменитьЧекБокс(Элемент, Объект.ПоднятьСтоимостьНаПроцент); 
	Если Объект.ПоднятьСтоимостьНаПроцент Тогда
		Объект.ПоднятьСтоимостьНаСумму = Ложь;
		Объект.УстановитьФиксСтоимость = Ложь;
	КонецЕсли; 
	УстановитьВидимость(); 
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыборНажатиеУстановитьФиксСтоимость(Элемент)
	Объект.УстановитьФиксСтоимость = Не Объект.УстановитьФиксСтоимость;
	ИзменитьЧекБокс(Элемент, Объект.УстановитьФиксСтоимость); 
	Если Объект.УстановитьФиксСтоимость Тогда
		Объект.ПоднятьСтоимостьНаПроцент = Ложь;
		Объект.ПоднятьСтоимостьНаСумму = Ложь;
	КонецЕсли;
	УстановитьВидимость();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЭлементУсловиеПриИзменении(Элемент)
	
	ПолеФормы = Элементы["Условия_Действующие" + СтрЗаменить(Элемент.Имя, "Условия_Условие","")];
	УсловиеВидимости = ЭтотОбъект[Элемент.Имя] = ПредопределенноеЗначение("Перечисление.ВариантыУсловийАвтоподнятияЦен.Забронировано");
	ПолеФормы.Видимость =  УсловиеВидимости;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьНаСервере();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Модифицированность Тогда 
			
			Модифицированность = Ложь;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораОтветаОбОчистке", ЭтотОбъект);
			Заголовок = НСтр("ru = 'После изменения настроек ДЦО, старые данные очистятся!'");
			ТекстВопроса = НСтр("ru = 'Очистить данные связаных регистров?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,Заголовок);
			
		Иначе
			Если Записать() Тогда
				Закрыть();			
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Записать() Тогда
			Закрыть();			
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораОтветаОбОчистке(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеРегистры(Объект.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные связанных регистров очищены");
		Объект.ДатаИзменения = ОбщегоНазначенияКлиент.ДатаСеанса();
		Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		Если Записать() Тогда
			Закрыть();			
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда 
		Модифицированность = Ложь;
		Закрыть();			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Условия_Добавить(Команда)
	
	ДобавитьУсловие();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Условия_ДобавитьСтроку(Команда)
	Элементы.УсловияВыбытия.ДобавитьСтроку();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Объект.Условия.Очистить();
	Объект.Районы.Очистить();
	Объект.Сегменты.Очистить();
	Объект.ОбъектыСтроительства.Очистить();
	Объект.Секции.Очистить();
	Объект.УсловияВыбытия.Очистить();
	Объект.Исполнители.Очистить();
	Объект.ИсполнителиЗадач.Очистить();	
	Объект.ТипОбъекта = "";
	Объект.ВыборУсловия = 0;
	Объект.ПоднятьСтоимостьНаСумму = 0;
	Объект.Сумма = 0;
	Объект.ПоднятьСтоимостьНаПроцент = 0;
	Объект.Процент = 0;
	Объект.УстановитьФиксСтоимость = 0;
	Объект.ФиксСумма = 0;
	Объект.Оповестить = 0;
	Объект.Исполнитель = "";
	Объект.СМС = 0;
	Объект.Email = 0;
	Объект.Напоминание = 0;
	Объект.ПоставитьЗадачу = 0;
	Объект.ИсполнительЗадач = "";
	Объект.ПоднятьПоБрони = 0;
	
	Для Инд = 1 По КоличествоУсловий Цикл
		УдалитьУсловиеСервер("Условия_ЭлементУдалить"+Инд);
	КонецЦикла; 
	
	ПриОткрытии(Ложь);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РайонДобавитьНажатие(Элемент) 
	
	Если ЗначениеЗаполнено(Объект.Район) Тогда
		
		НомерСтроки = -1;
		Для Каждого Строка из Объект.Районы Цикл
			Если Строка.Район = Объект.Район Тогда
				Если НЕ Строка.Удален Тогда
					Объект.Район = Неопределено;  
					Возврат;
				иначе
					Строка.Удален = Ложь;
					НомерСтроки = Строка.НомерСтроки - 1;
					Прервать;
				КонецЕсли;
        	КонецЕсли;
   		КонецЦикла;

		Попытка
			Данные = ДобавитьРайонВТаблицу(НомерСтроки);
			ДобавитьЭлементСпискаВСписок(Данные[0],, "Районы", "ГруппаРайоновСписок", Данные[1], "УдалитьРайон"); 
			Объект.Район = Неопределено;  
			
		Исключение      
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		УстановитьВидимостьТипОбъект();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СегментДобавитьНажатие(Элемент)
	Если ЗначениеЗаполнено(Объект.Сегмент) Тогда
		
		НомерСтроки = -1;
		Для Каждого Строка из Объект.Сегменты Цикл
			Если Строка.Сегмент = Объект.Сегмент Тогда
				Если НЕ Строка.Удален Тогда
					Объект.Сегмент = Неопределено;  
					Возврат;
				иначе
					Строка.Удален = Ложь;
					НомерСтроки = Строка.НомерСтроки - 1;
					Прервать;
				КонецЕсли;
        	КонецЕсли;
   		КонецЦикла;

		Попытка
			Данные = ДобавитьСегментВТаблицу(НомерСтроки);
			ДобавитьЭлементСпискаВСписок(Данные[0],, "Сегменты", "ГруппаСегментовСписок", Данные[1], "УдалитьСегмент"); 
			Объект.Сегмент = Неопределено;  
			
		Исключение      
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
		
		УстановитьВидимостьТипОбъект();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекцияДобавитьНажатие(Элемент)
	Если ЗначениеЗаполнено(Объект.Секция) Тогда
		
		НомерСтроки = -1;
		Для Каждого Строка из Объект.Секции Цикл
			Если Строка.Секция = Объект.Секция Тогда
				Если НЕ Строка.Секция Тогда
					Объект.Район = Неопределено;  
					Возврат;
				иначе
					Строка.Удален = Ложь;
					НомерСтроки = Строка.НомерСтроки - 1;
					Прервать;
				КонецЕсли;
        	КонецЕсли;
   		КонецЦикла;

		Попытка
			Данные = ДобавитьСекцияВТаблицу(НомерСтроки);
			ДобавитьЭлементСпискаВСписок(Данные[0],, "Секции", "ГруппаСекцийСписок", Данные[1], "УдалитьСекция"); 
			Объект.Секция = Неопределено;  
			
		Исключение      
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
		
		УстановитьВидимостьТипОбъект();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСДобавитьНажатие(Элемент)
	Если ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда
		
		НомерСтроки = -1;
		Для Каждого Строка из Объект.ОбъектыСтроительства Цикл
			Если Строка.ОС = Объект.ОбъектСтроительства Тогда
				Если НЕ Строка.Удален Тогда
					Объект.ОбъектСтроительства = Неопределено;  
					Возврат;
				иначе
					Строка.Удален = Ложь;
					НомерСтроки = Строка.НомерСтроки - 1;
					Прервать;
				КонецЕсли;
        	КонецЕсли;
   		КонецЦикла;

		Попытка
			Данные = ДобавитьОСВТаблицу(НомерСтроки);
			ДобавитьЭлементСпискаВСписок(Данные[0],, "ОбъектыСтроительства", "ГруппаОСовСписок", Данные[1], "УдалитьОС"); 
			Объект.ОбъектСтроительства = Неопределено;  
			
		Исключение      
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
		
		УстановитьВидимостьТипОбъект();

	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИсполнительДобавитьНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		
		НомерСтроки = -1;
		Для Каждого Строка из Объект.Исполнители Цикл
			Если Строка.Исполнитель = Объект.Исполнитель Тогда
				Если НЕ Строка.Удален Тогда
					Объект.Исполнитель = Неопределено;  
					Возврат;
				иначе
					Строка.Удален = Ложь;
					НомерСтроки = Строка.НомерСтроки - 1;
					Прервать;
				КонецЕсли;
        	КонецЕсли;
   		КонецЦикла;

		Попытка
			Данные = ДобавитьИсполнительВТаблицу(НомерСтроки);
			ДобавитьЭлементСпискаВСписок(Данные[0],, "Исполнители", "ГруппаИсполнителейСписок", Данные[1], "УдалитьИсполнитель"); 
			Объект.Исполнитель = Неопределено;  
			
		Исключение      
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		УстановитьВидимостьТипОбъект();

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРайон(Элемент)
	
	УдалитьРайонИзТаблицы(Элемент.Имя);
	УстановитьВидимостьТипОбъект(); 
	
КонецПроцедуры // УдалитьРайон() 

&НаКлиенте
Процедура УдалитьСегмент(Элемент)
	
	УдалитьСегментИзТаблицы(Элемент.Имя);
	УстановитьВидимостьТипОбъект(); 
	
КонецПроцедуры // УдалитьНаблюдателя() 

&НаКлиенте
Процедура УдалитьСекция(Элемент)
	
	УдалитьСекцияИзТаблицы(Элемент.Имя);
	УстановитьВидимостьТипОбъект(); 

КонецПроцедуры // УдалитьНаблюдателя() 

&НаКлиенте
Процедура УдалитьОС(Элемент)
	
	УдалитьОСИзТаблицы(Элемент.Имя);
	УстановитьВидимостьТипОбъект(); 
	
КонецПроцедуры // УдалитьНаблюдателя() 

&НаКлиенте
Процедура УдалитьИсполнитель(Элемент)
	
	УдалитьИсполнительИзТаблицы(Элемент.Имя);
	УстановитьВидимостьТипОбъект(); 
	
КонецПроцедуры  

&НаКлиенте
Процедура УдалитьИсполнительЗадач(Элемент)
	
	УдалитьИсполнительЗадачИзТаблицы(Элемент.Имя);
	УстановитьВидимостьТипОбъект(); 
	
КонецПроцедуры  

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	ЗаполнитьДанныеИзОбъекта();
	ЗакрытьДляРедактированияВсеГруппы(); 
	УстановитьВидимость(); 
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда		   
		ТипОбъектаПриИзменении(Элементы.ТипОбъекта); 
		УстановитьВидимостьТипОбъект();
		ЗакрытьОткрытьРедактированиеИсполнитель(Объект.Оповестить); 
		ЗакрытьОткрытьРедактированиеИсполнительЗадач(Объект.ПоставитьЗадачу); 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НоваяНастройка = Объект.Ссылка.Пустая();
	
	Для каждого ТекСтрока Из Объект.Условия Цикл	
		
		ДобавитьУсловие(Ложь);
		
		ЭтаФорма["Условия_ЛогическаяОперация" + КоличествоУсловий] = ТекСтрока.ЛогическаяОперация; 
		ЭтаФорма["Условия_Условие" + КоличествоУсловий] = ТекСтрока.Условие;
		ЭтаФорма["Условия_Знак" + КоличествоУсловий] = ТекСтрока.Знак;
		ЭтаФорма["Условия_Значение" + КоличествоУсловий] = ТекСтрока.Значение;
		ЭтаФорма["Условия_Действующие" + КоличествоУсловий] = ТекСтрока.Действующие;
		Элементы["Условия_Действующие" + КоличествоУсловий].Видимость = ТекСтрока.Условие = ПредопределенноеЗначение("Перечисление.ВариантыУсловийАвтоподнятияЦен.Забронировано");
		
		Элементы["Условия_ЛогическаяОперация" + КоличествоУсловий].Доступность = НоваяНастройка; 
		Элементы["Условия_Условие" + КоличествоУсловий].Доступность = НоваяНастройка;
		Элементы["Условия_Знак" + КоличествоУсловий].Доступность = НоваяНастройка;
		Элементы["Условия_Значение" + КоличествоУсловий].Доступность = НоваяНастройка;
		Элементы["Условия_Действующие" + КоличествоУсловий].Доступность = НоваяНастройка;
		
	КонецЦикла;
	
	Если НоваяНастройка Тогда
		Объект.Использовать = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.Район) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Есть не добавленный Район. Необходимо нажать на знак плюса, справа от строки ввода",, Элементы["Район"]);
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сегмент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Есть не добавленный Сегмент. Необходимо нажать на знак плюса, справа от строки ввода",, Элементы["Сегмент"]);
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Секция) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Есть не добавленная Секция. Необходимо нажать на знак плюса, справа от строки ввода",, Элементы["Секция"]);
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Есть не добавленный ОС. Необходимо нажать на знак плюса, справа от строки ввода",, Элементы["ОС"]);
		Отказ = Истина;
	КонецЕсли; 
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Есть не добавленный Исполнитель. Необходимо нажать на знак плюса, справа от строки ввода",, Элементы["Исполнитель"]);
		Отказ = Истина;
	КонецЕсли; 
	
	Объект.Условия.Очистить();
	СтрокаУсловия = "";
	НомерТекущего = 1;
	Для Инд = 1 По КоличествоУсловий Цикл
		Если СписокУдаленныхУсловий.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЭтаФорма["Условия_Условие" + Инд]) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено условие " + НомерТекущего,, Элементы["Условия_Условие" + Инд]);
			Отказ = Истина;
		КонецЕсли;
		
		НовСтрока = Объект.Условия.Добавить();
		НовСтрока.ЛогическаяОперация = ЭтаФорма["Условия_ЛогическаяОперация" + Инд];
		НовСтрока.Условие = ЭтаФорма["Условия_Условие" + Инд]; 
		НовСтрока.Знак = ЭтаФорма["Условия_Знак" + Инд];
		НовСтрока.Значение = ЭтаФорма["Условия_Значение" + Инд];
		НовСтрока.Действующие = ЭтаФорма["Условия_Действующие" + Инд];
		СтрокаУсловия = СтрШаблон("%1 %2_%3 %6%4 %5", СтрокаУсловия, НовСтрока.ЛогическаяОперация, 
		НовСтрока.Условие, НовСтрока.Знак, НовСтрока.Значение, 
		?(НовСтрока.Действующие, "действующие ", ""));
		
		НомерТекущего = НомерТекущего + 1;
	КонецЦикла;
	
	СтрокаОбъектов = "";
	Если Объект.ТипОбъекта = "Район" Тогда
		Для каждого Район из Объект.Районы Цикл 
			Если НЕ Район.Удален Тогда
				СтрокаОбъектов = СтрокаОбъектов + ВернутьНаименование(Район.Район) + "; "; 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	Если Объект.ТипОбъекта = "Сегмент" Тогда 
		Для каждого Сегмент из Объект.Сегменты Цикл  
			Если НЕ Сегмент.Удален Тогда
				СтрокаОбъектов = СтрокаОбъектов + ВернутьНаименование(Сегмент.Сегмент) + "; "; 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	Если Объект.ТипОбъекта = "ОС" Тогда 
		Для каждого ОС из Объект.ОбъектыСтроительства Цикл  
			Если НЕ ОС.Удален Тогда
				СтрокаОбъектов = СтрокаОбъектов + ВернутьНаименование(ОС.ОС) + "; "; 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	Если Объект.ТипОбъекта = "Секция" Тогда 
		Для каждого Секция из Объект.Секции Цикл  
			Если НЕ Секция.Удален Тогда
				СтрокаОбъектов = СтрокаОбъектов + ВернутьНаименование(Секция.Секция) + "; "; 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	СтрокаОбъектов = Лев(СтрокаОбъектов, СтрДлина(СтрокаОбъектов)-2);
	
	Если Объект.ВыборУсловия Тогда
		СтрокаНаименования = "По выбытию: ";
	иначе
		СтрокаНаименования = "По действию: ";
	КонецЕсли;
	
	Объект.Наименование = СтрокаНаименования + СтрокаОбъектов; 
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере()
	
	НаборЗаписей = РегистрыСведений.ДЦО_НастройкиПоднятияЦен.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Настройка.Установить(Объект.Ссылка);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Настройка = Объект.Ссылка;
	Запись.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПослеЗаписиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Модифицированность Тогда 
			
			Отказ = Истина;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораОтветаОбОчистке", ЭтотОбъект);
			Заголовок = НСтр("ru = 'После изменения настроек ДЦО, старые данные очистятся!'");
			ТекстВопроса = НСтр("ru = 'Очистить данные связаных регистров?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,Заголовок);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
