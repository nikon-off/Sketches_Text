
#Область РаспределениеЗадач

Процедура НачальноеРаспределениеЗадач() Экспорт
	
	Если Не Метаданные.РегламентныеЗадания.Найти("Расш1_Дев_НачальноеРаспределениеЗадач") = Неопределено Тогда
		КорректныеМетаданные = Метаданные.НайтиПоПолномуИмени("РегламентныеЗадания.Расш1_Дев_НачальноеРаспределениеЗадач");
	Иначе
		КорректныеМетаданные = Метаданные.НайтиПоПолномуИмени("РегламентныеЗадания.Дев_НачальноеРаспределениеЗадач");
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(КорректныеМетаданные);  
	
	ТзНастроекРаспределенияЗадач = ПолучитьТзНастроекРаспределенияЗадач();
	
	Если ТзНастроекРаспределенияЗадач = Неопределено Тогда
		ВызватьИсключение "Таблица настроек для распределения задач не заполнена или все настройки отключены";
	КонецЕсли;
	
	Для Каждого Строка Из ТзНастроекРаспределенияЗадач Цикл
		Если ЗначениеЗаполнено(Строка.КартаМаршрута) Тогда
			РаспределитьНачальнуюНагрузку(Строка);
		Иначе
			РаспределитьНачальнуюНагрузкуБезПривязкиКБП(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерераспределениеЗадач() Экспорт
	
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Расш1_Дев_ПерераспределениеЗадач);  
	
	Если Не Метаданные.РегламентныеЗадания.Найти("Расш1_Дев_ПерераспределениеЗадач") = Неопределено Тогда
		КорректныеМетаданные = Метаданные.НайтиПоПолномуИмени("РегламентныеЗадания.Расш1_Дев_ПерераспределениеЗадач");
	Иначе
		КорректныеМетаданные = Метаданные.НайтиПоПолномуИмени("РегламентныеЗадания.Дев_ПерераспределениеЗадач");
	КонецЕсли;
	
	ТзНастроекРаспределенияЗадач = ПолучитьТзНастроекРаспределенияЗадач();
	
	Если ТзНастроекРаспределенияЗадач = Неопределено Тогда
		ВызватьИсключение "Таблица настроек для распределения задач не заполнена или все настройки отключены";
    КонецЕсли;
    
	
    Для Каждого Строка Из ТзНастроекРаспределенияЗадач Цикл
        
        ВернутьЗадачиВОчередьНедоступногоСотрудника(Строка);
        
        Если Не Строка.УчитыватьЗанятость Тогда
            СнятьИсполнителейЗаПросрочноеВремяПринятие(Строка);
        КонецЕсли;
    КонецЦикла;
	
	Для Каждого Строка Из ТзНастроекРаспределенияЗадач Цикл
		Если ЗначениеЗаполнено(Строка.КартаМаршрута) Тогда
			РаспределитьНачальнуюНагрузку(Строка);
		Иначе
			РаспределитьНачальнуюНагрузкуБезПривязкиКБП(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Распределение задач согласно значениям настроек РС Дев_НастройкиРаспределенияЗадач
//
// Параметры:
//  СтрокаТЗ  - СтрокаТаблицыЗначений - строка таблицы значений,
//                полученной при обходе коллекции ТЗ РС
//                Дев_НастройкиРаспределенияЗадач
//
Процедура РаспределитьНачальнуюНагрузку(СтрокаТЗ)
	
	КартаМаршрута = СтрокаТЗ.КартаМаршрута;
	РольИсполнителя = СтрокаТЗ.РольИсполнителя;
	Дата = ТекущаяДатаСеанса();
	
	Если Не Метаданные.РегистрыСведений.Найти("ОтсутствияИЗанятости1") = Неопределено Тогда
		ПолноеИмя = "РегистрСведений.ОтсутствияИЗанятости1";
	Иначе
		ПолноеИмя = "РегистрСведений.Дев_ОтсутствияИЗанятости";
	КонецЕсли;
	
	Если Не Метаданные.РегистрыСведений.Найти("Расш1_Дев_ПорядокПользователейДляРаспределенияЗадач") = Неопределено Тогда
		ПолноеИмя2 = "РегистрСведений.Расш1_Дев_ПорядокПользователейДляРаспределенияЗадач";
	Иначе
		ПолноеИмя2 = "РегистрСведений.Дев_ПорядокПользователейДляРаспределенияЗадач";
    КонецЕсли;
    
    Если Не СтрокаТЗ.УчитыватьЗанятость Тогда
        ОтборПоЗанятости1 = "";
        ОтборПоЗанятости2 = "";
    Иначе
         ОтборПоЗанятости1 = "И ВТ_События.Дата ЕСТЬ NULL";
         ОтборПоЗанятости2 = "И НеЗавершенныеЗадачи.Количество ЕСТЬ NULL";
    КонецЕсли;
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_Событие.Ответственный КАК Ответственный,
	|	CRM_Событие.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА CRM_Событие.Дата = CRM_Событие.ОкончаниеСобытия
	|			ТОГДА ДОБАВИТЬКДАТЕ(CRM_Событие.ОкончаниеСобытия, МИНУТА, 30)
	|		ИНАЧЕ CRM_Событие.ОкончаниеСобытия
	|	КОНЕЦ КАК ОкончаниеСобытия
	|ПОМЕСТИТЬ ВТ_События
	|ИЗ
	|	Документ.CRM_Событие КАК CRM_Событие
	|ГДЕ
	|	НЕ CRM_Событие.СостояниеСобытия В (&СостояниеСобытия)
	|	И CRM_Событие.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, МИНУТА, -30) И ДОБАВИТЬКДАТЕ(&Дата, МИНУТА, 30)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтсутствияИЗанятости.Пользователь КАК Пользователь,
	|	ОтсутствияИЗанятости.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_Пользователи
	|ИЗ
	|	"+ПолноеИмя+" КАК ОтсутствияИЗанятости
	|ГДЕ
	|	НЕ ОтсутствияИЗанятости.Вид В (&Вид)
	|	И ОтсутствияИЗанятости.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, МИНУТА, -30) И ДОБАВИТЬКДАТЕ(&Дата, МИНУТА, 30)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Пользователи.Пользователь КАК Пользователь,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ НеЗавершенныеЗадачи
	|ИЗ
	|	ВТ_Пользователи КАК ВТ_Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ПО (ВТ_Пользователи.Пользователь = ЗадачаИсполнителя.Исполнитель)
	|			И (НЕ ЗадачаИсполнителя.Выполнена)
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута В(&КартаМаршрута)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Пользователи.Пользователь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокЗадач.Пользователь КАК Пользователь,
	|	ПорядокЗадач.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТ_Порядок
	|ИЗ
	|	"+ПолноеИмя2+" КАК ПорядокЗадач
	|ГДЕ
	|	ПорядокЗадач.КартаМаршрута В(&КартаМаршрута)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Пользователи.Пользователь КАК Пользователь,
	|	ВТ_Пользователи.Дата КАК Дата,
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
	|	ЕСТЬNULL(ВТ_События.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоСобытия,
	|	ЕСТЬNULL(ВТ_События.ОкончаниеСобытия, ДАТАВРЕМЯ(1, 1, 1)) КАК ОкончаниеСобытия,
	|	ЕСТЬNULL(ВТ_Порядок.Порядок, 0) КАК Порядок
	|ИЗ
	|	ВТ_Пользователи КАК ВТ_Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|		ПО (ИсполнителиЗадач.Исполнитель = ВТ_Пользователи.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_События КАК ВТ_События
	|		ПО ВТ_Пользователи.Пользователь = ВТ_События.Ответственный
	|		ЛЕВОЕ СОЕДИНЕНИЕ НеЗавершенныеЗадачи КАК НеЗавершенныеЗадачи
	|		ПО ВТ_Пользователи.Пользователь = НеЗавершенныеЗадачи.Пользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Порядок КАК ВТ_Порядок
	|		ПО ВТ_Пользователи.Пользователь = ВТ_Порядок.Пользователь
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя В(&РольИсполнителя)
	|	"+ОтборПоЗанятости1+"
	|	"+ОтборПоЗанятости2+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителя.ДатаНачала КАК ДатаНачала,
	|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута) КАК КартаМаршрута,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачаИсполнителя.Ссылка) КАК Задача
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПринятаКИсполнению
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.РольИсполнителя В(&РольИсполнителя)
	|	И ЗадачаИсполнителя.ДатаНачала < КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута В(&КартаМаршрута)
	|	И &Дата НЕ МЕЖДУ ЗадачаИсполнителя.ДатаНачала И ДОБАВИТЬКДАТЕ(ЗадачаИсполнителя.ДатаНачала, МИНУТА, &ВремяПринятияЗадачи)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала
	|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	
	Вид = Новый СписокЗначений;
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Выходной);//Выходной
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Отпуск);
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.ПолучитьСсылку(Новый УникальныйИдентификатор("bc0b0d15-371a-11ec-a24d-00155d000e43"))); //Юольничный
	Запрос.УстановитьПараметр("Вид", Вид);
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ВремяПринятияЗадачи", СтрокаТЗ.ВремяПринятияЗадачи);
	
	РольИсполнителяСЗ = Новый СписокЗначений;
	РольИсполнителяСЗ.Добавить(РольИсполнителя);
	//РольИсполнителя.ЗагрузитьЗначения(ТзНастроекРаспределенияЗадач.ВыгрузитьКолонку("РольИсполнителя"));
	//РольИсполнителя.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("3ff0fca1-6ed5-11e8-a1fd-00155d000217"))); //брокет
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителяСЗ);
	
	СостояниеСобытия = Новый СписокЗначений;
	СостояниеСобытия.Добавить(Справочники.CRM_СостоянияСобытий.Завершено);
	СостояниеСобытия.Добавить(Справочники.CRM_СостоянияСобытий.Отменено);
	Запрос.УстановитьПараметр("СостояниеСобытия", СостояниеСобытия);
	
	КартаМаршрутаСЗ = Новый СписокЗначений;
	КартаМаршрутаСЗ.Добавить(КартаМаршрута);
	//КартаМаршрута.ЗагрузитьЗначения(ТзНастроекРаспределенияЗадач.ВыгрузитьКолонку("КартаМаршрута"));
	Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрутаСЗ);
	//Запрос.УстановитьПараметр("КартаМаршрута", Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("f2331fb8-ba40-11ec-a26f-00155d000d85"))); // Заявка на трейд-ин для брокера
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	
    //П1 = РезультатЗапроса[0].Выгрузить();
    //П2 = РезультатЗапроса[1].Выгрузить();
    //П3 = РезультатЗапроса[2].Выгрузить();
    //П4 = РезультатЗапроса[3].Выгрузить();
    //П5 = РезультатЗапроса[4].Выгрузить();
    //П6 = РезультатЗапроса[5].Выгрузить();
	
	Граница = РезультатЗапроса.ВГраница();
	
	Если РезультатЗапроса[Граница-1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиКраспределению = РезультатЗапроса[Граница].Выбрать();
	
	ПользователиДляРасперделения = РезультатЗапроса[Граница-1].Выбрать();
	
	МассивСтруктур = Новый Массив;
	
	ПорядокВОчереди = ПолучитьНомерОчереди(РольИсполнителя, КартаМаршрута);
    
    Для Сч = 1 По Граница+1 Цикл
        
        Пока ПользователиДляРасперделения.Следующий() Цикл 
            
            Если ЗадачиКраспределению.Следующий() Тогда
                ВыборкаЗадачи = ЗадачиКраспределению;
            Иначе
                Прервать;
            КонецЕсли;
            
            ДатаНачала = ТекущаяДатаСеанса();
            СтруктураЗаполнения = Новый Структура("Исполнитель, ДатаНачала", ПользователиДляРасперделения.Пользователь, ДатаНачала);
            УПДК_ОбщегоНазначения.ЗаписатьДанныеВОбъектСБлокировкой(ВыборкаЗадачи.Ссылка, СтруктураЗаполнения);
            
            СтруктураОповещения = Новый Структура;
            СтруктураОповещения.Вставить("Получатель"		,ПользователиДляРасперделения.Пользователь);
            СтруктураОповещения.Вставить("Предмет"			,ВыборкаЗадачи.Ссылка);
            СтруктураОповещения.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхВсплавающее);
            СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.Напоминание);
            СтруктураОповещения.Вставить("СрокОповещения"	,5);
            СтруктураОповещения.Вставить("Периодичность"	,Перечисления.CRM_ПериодичностьОповещений.Минута);
            СтруктураОповещения.Вставить("Сумма"			,0);
            СтруктураОповещения.Вставить("Тема"				,ВыборкаЗадачи.КартаМаршрута);
            СтруктураОповещения.Вставить("Содержание"       ,ВыборкаЗадачи.Задача);
            // ссылка на настройку оповещений пользоветеля (чтобы при добавлении нового оповещения
            // можно было удалить все предыдущие)
            СтруктураОповещения.Вставить("Настройка" 		,Неопределено); 
            
            МассивСтруктур.Добавить(СтруктураОповещения);
            
            ДобавитьПорядокОчереди(ПользователиДляРасперделения.Пользователь, ПорядокВОчереди, РольИсполнителя, КартаМаршрута);
            
            ПорядокВОчереди = ПорядокВОчереди + 1; 
            
        КонецЦикла;
        
        Если Не СтрокаТЗ.УчитыватьЗанятость Тогда
            ПользователиДляРасперделения.Сбросить();
        Иначе
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
	
	CRM_ОповещенияСервер.ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

Процедура РаспределитьНачальнуюНагрузкуБезПривязкиКБП(СтрокаТЗ)
	
	КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПустаяСсылка();
	РольИсполнителя = СтрокаТЗ.РольИсполнителя;
	Дата = ТекущаяДатаСеанса();
	
	Если Не Метаданные.РегистрыСведений.Найти("ОтсутствияИЗанятости1") = Неопределено Тогда
		ПолноеИмя = "РегистрСведений.ОтсутствияИЗанятости1";
	Иначе
		ПолноеИмя = "РегистрСведений.Дев_ОтсутствияИЗанятости";
	КонецЕсли;
	
	Если Не Метаданные.РегистрыСведений.Найти("Расш1_Дев_ПорядокПользователейДляРаспределенияЗадач") = Неопределено Тогда
		ПолноеИмя2 = "РегистрСведений.Расш1_Дев_ПорядокПользователейДляРаспределенияЗадач";
	Иначе
		ПолноеИмя2 = "РегистрСведений.Дев_ПорядокПользователейДляРаспределенияЗадач";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_Событие.Ответственный КАК Ответственный,
	|	CRM_Событие.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА CRM_Событие.Дата = CRM_Событие.ОкончаниеСобытия
	|			ТОГДА ДОБАВИТЬКДАТЕ(CRM_Событие.ОкончаниеСобытия, МИНУТА, 30)
	|		ИНАЧЕ CRM_Событие.ОкончаниеСобытия
	|	КОНЕЦ КАК ОкончаниеСобытия
	|ПОМЕСТИТЬ ВТ_События
	|ИЗ
	|	Документ.CRM_Событие КАК CRM_Событие
	|ГДЕ
	|	НЕ CRM_Событие.СостояниеСобытия В (&СостояниеСобытия)
	|	И CRM_Событие.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, МИНУТА, -30) И ДОБАВИТЬКДАТЕ(&Дата, МИНУТА, 30)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтсутствияИЗанятости.Пользователь КАК Пользователь,
	|	ОтсутствияИЗанятости.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_Пользователи
	|ИЗ
	|	"+ПолноеИмя+" КАК ОтсутствияИЗанятости
	|ГДЕ
	|	НЕ ОтсутствияИЗанятости.Вид В (&Вид)
	|	И ОтсутствияИЗанятости.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, МИНУТА, -30) И ДОБАВИТЬКДАТЕ(&Дата, МИНУТА, 30)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Пользователи.Пользователь КАК Пользователь,
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ НеЗавершенныеЗадачи
	|ИЗ
	|	ВТ_Пользователи КАК ВТ_Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ПО (ВТ_Пользователи.Пользователь = ЗадачаИсполнителя.Исполнитель)
	|			И (НЕ ЗадачаИсполнителя.Выполнена)
	|ГДЕ
	|	ЗадачаИсполнителя.РольИсполнителя В(&РольИсполнителя)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Пользователи.Пользователь,
	|	ЗадачаИсполнителя.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокЗадач.Пользователь КАК Пользователь,
	|	ПорядокЗадач.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТ_Порядок
	|ИЗ
	|	"+ПолноеИмя2+" КАК ПорядокЗадач
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Пользователи.Пользователь КАК Пользователь,
	|	ВТ_Пользователи.Дата КАК Дата,
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
	|	ЕСТЬNULL(ВТ_События.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоСобытия,
	|	ЕСТЬNULL(ВТ_События.ОкончаниеСобытия, ДАТАВРЕМЯ(1, 1, 1)) КАК ОкончаниеСобытия,
	|	ЕСТЬNULL(ВТ_Порядок.Порядок, 0) КАК Порядок
	|ИЗ
	|	ВТ_Пользователи КАК ВТ_Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|		ПО (ИсполнителиЗадач.Исполнитель = ВТ_Пользователи.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_События КАК ВТ_События
	|		ПО ВТ_Пользователи.Пользователь = ВТ_События.Ответственный
	|		ЛЕВОЕ СОЕДИНЕНИЕ НеЗавершенныеЗадачи КАК НеЗавершенныеЗадачи
	|		ПО ВТ_Пользователи.Пользователь = НеЗавершенныеЗадачи.Пользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Порядок КАК ВТ_Порядок
	|		ПО ВТ_Пользователи.Пользователь = ВТ_Порядок.Пользователь
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя В(&РольИсполнителя)
	|	И ВТ_События.Дата ЕСТЬ NULL
	|	И НеЗавершенныеЗадачи.Количество ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителя.ДатаНачала КАК ДатаНачала,
	|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута) КАК КартаМаршрута,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачаИсполнителя.Ссылка) КАК Задача
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПринятаКИсполнению
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.РольИсполнителя В(&РольИсполнителя)
	|	И ЗадачаИсполнителя.ДатаНачала < КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала
	|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	
	Вид = Новый СписокЗначений;
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Выходной);
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Отпуск);
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.ПолучитьСсылку(Новый УникальныйИдентификатор("bc0b0d15-371a-11ec-a24d-00155d000e43")));
	Запрос.УстановитьПараметр("Вид", Вид);
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РольИсполнителяПараметры = Новый СписокЗначений;
	РольИсполнителяПараметры.Добавить(РольИсполнителя);
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителяПараметры);
	
	СостояниеСобытия = Новый СписокЗначений;
	СостояниеСобытия.Добавить(Справочники.CRM_СостоянияСобытий.Завершено);
	СостояниеСобытия.Добавить(Справочники.CRM_СостоянияСобытий.Отменено);
	Запрос.УстановитьПараметр("СостояниеСобытия", СостояниеСобытия);
	
	//КартаМаршрута = Новый СписокЗначений;
	//КартаМаршрута.Добавить(Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")));
	//Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Граница = РезультатЗапроса.ВГраница();
	
	Если РезультатЗапроса[Граница-1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиКраспределению = РезультатЗапроса[Граница].Выбрать();
	
	ПользователиДляРасперделения = РезультатЗапроса[Граница-1].Выбрать();
	
	МассивСтруктур = Новый Массив;
	
	ПорядокВОчереди = ПолучитьНомерОчереди(РольИсполнителя, КартаМаршрута);
	
	Пока ПользователиДляРасперделения.Следующий() Цикл 
		
		Если ЗадачиКраспределению.Следующий() Тогда
			ВыборкаЗадачи = ЗадачиКраспределению;
		Иначе
			Прервать;
		КонецЕсли;
		
		ДатаНачала = ТекущаяДатаСеанса();
		СтруктураЗаполнения = Новый Структура("Исполнитель, ДатаНачала", ПользователиДляРасперделения.Пользователь, ДатаНачала);
		УПДК_ОбщегоНазначения.ЗаписатьДанныеВОбъектСБлокировкой(ВыборкаЗадачи.Ссылка, СтруктураЗаполнения);
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Получатель"		,ПользователиДляРасперделения.Пользователь);
		СтруктураОповещения.Вставить("Предмет"			,ВыборкаЗадачи.Ссылка);
		СтруктураОповещения.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхВсплавающее);
		СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.Напоминание);
		СтруктураОповещения.Вставить("СрокОповещения"	,5);
		СтруктураОповещения.Вставить("Периодичность"	,Перечисления.CRM_ПериодичностьОповещений.Минута);
		СтруктураОповещения.Вставить("Сумма"			,0);
		СтруктураОповещения.Вставить("Тема"				,РольИсполнителя);
		СтруктураОповещения.Вставить("Содержание"       ,ВыборкаЗадачи.Задача);
		// ссылка на настройку оповещений пользоветеля (чтобы при добавлении нового оповещения
		// можно было удалить все предыдущие)
		СтруктураОповещения.Вставить("Настройка" 		,Неопределено); 
		
		МассивСтруктур.Добавить(СтруктураОповещения);
		
		ДобавитьПорядокОчереди(ПользователиДляРасперделения.Пользователь, ПорядокВОчереди, РольИсполнителя, КартаМаршрута);
		
		ПорядокВОчереди = ПорядокВОчереди + 1;
		
	КонецЦикла;
	
	CRM_ОповещенияСервер.ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

Процедура РаспределитьНаИсполнителя(РольИсполнителя, КартаМаршрута, Предмет, Исполнитель) Экспорт
	
	ДопОтбор = "";
	
	МассивДопОтбора = СписокЗначенийДопОтбораПорядкаРаспределения().ВыгрузитьЗначения();
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.РеализацияНедвижимости") Тогда 
		
		Клиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Клиент");
		ИсполнительЗакрепленногоКлиента = ПолучитьЗакрепленногоСотрудникаПоТекущемуКлиенту(Клиент,,,РольИсполнителя);
		Если Не ИсполнительЗакрепленногоКлиента = Неопределено Тогда
			Выборка = ИсполнительЗакрепленногоКлиента;
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Э_Перезаявка") Тогда
			Выборка = ВыборкаРаспределенияНаИсполнителяПоПерезаявке(РольИсполнителя, КартаМаршрута, Предмет);
		ИначеЕсли СпособОплатыТрейдИн(Предмет) Тогда
			ДопОтбор =  МассивДопОтбора[0];
			Выборка = ВыборкаРаспределенияНаИсполнителя(РольИсполнителя, КартаМаршрута, Предмет, ДопОтбор); 
		ИначеЕсли СпособОплатыТранш(Предмет) Тогда
			ДопОтбор =  МассивДопОтбора[1];
			Выборка = ВыборкаРаспределенияНаИсполнителя(РольИсполнителя, КартаМаршрута, Предмет, ДопОтбор); 
		ИначеЕсли НаличиеНесовершеннолетнегоВподписантах(Предмет) Тогда
			ДопОтбор =  МассивДопОтбора[2];
			Выборка = ВыборкаРаспределенияНаИсполнителя(РольИсполнителя, КартаМаршрута, Предмет, ДопОтбор); 
		Иначе
			Выборка = ВыборкаРаспределенияНаИсполнителя(РольИсполнителя, КартаМаршрута, Предмет); 
		КонецЕсли;
		
	Иначе
		Выборка = ВыборкаРаспределенияНаИсполнителя(РольИсполнителя, КартаМаршрута, Предмет);
	КонецЕсли; 
	
	Если Выборка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Исполнитель = Выборка.Пользователь;
		Прервать;
	КонецЦикла;
	
	Номер = ПолучитьНомерОчереди(РольИсполнителя, КартаМаршрута, ДопОтбор);
	
	ДобавитьПорядокОчереди(Исполнитель, Номер, РольИсполнителя, КартаМаршрута, ДопОтбор); 
	//++Никонов по задаче enco-418 вынес закрепление во внешний интерфейс, т.к. не всегда понятно когда и как надо назначать ответственным
    //Если ТипЗнч(Предмет) = Тип("ДокументСсылка.РеализацияНедвижимости") Тогда
    //	УстановитьСрокОтветсвенности(Предмет, Исполнитель);
    //КонецЕсли; 
    //--Никонов
	
КонецПроцедуры

Функция ВыборкаРаспределенияНаИсполнителя(РольИсполнителя, КартаМаршрута, Предмет, ДопОтбор = "")
	
	УстановитьПривилегированныйРежим(Истина);
    
	//++Никонов по задаче enco-418
    //Брокер = Справочники.Пользователи.ПустаяСсылка();
    //Если ТипЗнч(Предмет) = Тип("ДокументСсылка.РеализацияНедвижимости") Тогда
    //	Брокер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Брокер");
    //КонецЕсли; 
    //--Никонов
	
	Если Не Метаданные.РегистрыСведений.Найти("ОтсутствияИЗанятости1") = Неопределено Тогда
		ПолноеИмя = "РегистрСведений.ОтсутствияИЗанятости1";
	Иначе
		ПолноеИмя = "РегистрСведений.Дев_ОтсутствияИЗанятости";
	КонецЕсли;
	
	Если Не Метаданные.РегистрыСведений.Найти("Расш1_Дев_ПорядокПользователейДляРаспределенияЗадач") = Неопределено Тогда
		ПолноеИмя2 = "РегистрСведений.Расш1_Дев_ПорядокПользователейДляРаспределенияЗадач";
	Иначе
		ПолноеИмя2 = "РегистрСведений.Дев_ПорядокПользователейДляРаспределенияЗадач";
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОтсутствияИЗанятости.Пользователь КАК Пользователь,
	|	ОтсутствияИЗанятости.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_Пользователи
	|ИЗ
	|	"+ПолноеИмя+" КАК ОтсутствияИЗанятости
	|ГДЕ
	|	НЕ ОтсутствияИЗанятости.Вид В (&Вид)
	|	И ОтсутствияИЗанятости.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, МИНУТА, -30) И ДОБАВИТЬКДАТЕ(&Дата, МИНУТА, 30)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокЗадач.Пользователь КАК Пользователь,
	|	ПорядокЗадач.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТ_Порядок
	|ИЗ
	|	"+ПолноеИмя2+" КАК ПорядокЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|		ПО (ИсполнителиЗадач.РольИсполнителя = ПорядокЗадач.РольИсполнителя
	|				И ИсполнителиЗадач.Исполнитель = ПорядокЗадач.Пользователь)
	|ГДЕ
	|	ПорядокЗадач.РольИсполнителя = &РольИсполнителя
	|	И ПорядокЗадач.КартаМаршрута = &КартаМаршрута
	|	И ПорядокЗадач.ДопОтбор = &ДопОтбор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Пользователи.Пользователь КАК Пользователь,
	|	ЕСТЬNULL(ВТ_Порядок.Порядок, 0) КАК Порядок
	|ИЗ
	|	ВТ_Пользователи КАК ВТ_Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Порядок КАК ВТ_Порядок
	|		ПО (ВТ_Пользователи.Пользователь = ВТ_Порядок.Пользователь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтсутствияИЗанятости.Пользователь КАК Пользователь,
	|	МИНИМУМ(ОтсутствияИЗанятости.Дата) КАК Дата
	|ИЗ
	|	"+ПолноеИмя+" КАК ОтсутствияИЗанятости
	|ГДЕ
	|	НЕ ОтсутствияИЗанятости.Вид В (&Вид)
    //|	И ОтсутствияИЗанятости.Пользователь В (&Брокер)
	|	И ОтсутствияИЗанятости.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтсутствияИЗанятости.Пользователь";
	
	Вид = Новый СписокЗначений;
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Выходной); //Выходной
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Отпуск);
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.ПолучитьСсылку(Новый УникальныйИдентификатор("bc0b0d15-371a-11ec-a24d-00155d000e43"))); //Юольничный
	Запрос.УстановитьПараметр("Вид", Вид);
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
    //Запрос.УстановитьПараметр("Брокер", Брокер);
	Запрос.УстановитьПараметр("ДопОтбор", ДопОтбор);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВГраница = РезультатЗапроса.ВГраница();
	
    //Если Не РезультатЗапроса[ВГраница].Пустой() Тогда
    //	Возврат РезультатЗапроса[ВГраница].Выбрать();
    //КонецЕсли;
	
	Если РезультатЗапроса[ВГраница-1].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса[ВГраница-1].Выбрать();
	
КонецФункции

Функция ВыборкаРаспределенияНаИсполнителяПоПерезаявке(РольИсполнителя, КартаМаршрута, Предмет)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Брокер = Справочники.Пользователи.ПустаяСсылка();
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.РеализацияНедвижимости") Тогда
		Брокер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Брокер");
	КонецЕсли; 
	
	Если Не Метаданные.РегистрыСведений.Найти("ОтсутствияИЗанятости1") = Неопределено Тогда
		ПолноеИмя = "РегистрСведений.ОтсутствияИЗанятости1";
	Иначе
		ПолноеИмя = "РегистрСведений.Дев_ОтсутствияИЗанятости";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОтсутствияИЗанятости.Пользователь КАК Пользователь,
	|	МИНИМУМ(ОтсутствияИЗанятости.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_Пользователи
	|ИЗ
	|	"+ПолноеИмя+" КАК ОтсутствияИЗанятости
	|ГДЕ
	|	НЕ ОтсутствияИЗанятости.Вид В (&Вид)
	|	И ОтсутствияИЗанятости.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтсутствияИЗанятости.Пользователь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Предмет КАК Предмет,
	|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	|	МИНИМУМ(ЗадачаИсполнителя.Дата) КАК Дата
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Пользователи КАК ВТ_Пользователи
	|		ПО (ВТ_Пользователи.Пользователь = ЗадачаИсполнителя.Исполнитель)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ЗадачаИсполнителя.Предмет) = ТИП(Документ.РеализацияНедвижимости)
	|	И ЗадачаИсполнителя.РольИсполнителя = &РольИсполнителя
	|	И ЗадачаИсполнителя.CRM_Партнер = &Клиент
	|	И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута = &КартаМаршрута
	|	И НЕ ЗадачаИсполнителя.Исполнитель.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.Исполнитель.Недействителен
	|	И НЕ ВТ_Пользователи.Пользователь ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачаИсполнителя.Предмет,
	|	ЗадачаИсполнителя.Исполнитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтсутствияИЗанятости.Пользователь КАК Пользователь,
	|	МИНИМУМ(ОтсутствияИЗанятости.Дата) КАК Дата
	|ИЗ
	|	"+ПолноеИмя+" КАК ОтсутствияИЗанятости
	|ГДЕ
	|	НЕ ОтсутствияИЗанятости.Вид В (&Вид)
	|	И ОтсутствияИЗанятости.Пользователь В (&Брокер)
	|	И ОтсутствияИЗанятости.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтсутствияИЗанятости.Пользователь";
	
	Вид = Новый СписокЗначений;
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Выходной); //Выходной
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Отпуск);
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.ПолучитьСсылку(Новый УникальныйИдентификатор("bc0b0d15-371a-11ec-a24d-00155d000e43"))); //Юольничный
	Запрос.УстановитьПараметр("Вид", Вид);
	
	Запрос.УстановитьПараметр("Клиент", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Клиент"));
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
	Запрос.УстановитьПараметр("Брокер", Брокер);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВГраница = РезультатЗапроса.ВГраница();
	
	Если Не РезультатЗапроса[ВГраница].Пустой() Тогда
		Возврат РезультатЗапроса[ВГраница].Выбрать();
	КонецЕсли;
	
	Если РезультатЗапроса[ВГраница-1].Пустой() Тогда
		Возврат ВыборкаРаспределенияНаИсполнителя(РольИсполнителя, КартаМаршрута, Предмет); 
	КонецЕсли;
	
	Возврат РезультатЗапроса[ВГраница-1].Выбрать();
	
КонецФункции

Процедура СнятьИсполнителейЗаПросрочноеВремяПринятие(СтрокаТЗ)
	
	Если ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	КартаМаршрута = СтрокаТЗ.КартаМаршрута;
	
	Если ЗначениеЗаполнено(КартаМаршрута) Тогда
		ОтборКартыМаршрута = "И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута = &КартаМаршрута";
		Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
	Иначе
		ОтборКартыМаршрута = "";
	КонецЕсли;
	
	РольИсполнителя = СтрокаТЗ.РольИсполнителя;
	ВремяПринятияЗадачи = СтрокаТЗ.ВремяПринятияЗадачи;
	Дата = ТекущаяДатаСеанса();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.РольИсполнителя = &РольИсполнителя
	|	"+ОтборКартыМаршрута+"
	|	И НЕ ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.ДатаПринятияКИсполнению = ДАТАВРЕМЯ(1,1,1)
	|	И &ТекущаяДата НЕ МЕЖДУ ЗадачаИсполнителя.ДатаНачала И ДОБАВИТЬКДАТЕ(ЗадачаИсполнителя.ДатаНачала, МИНУТА, &ВремяПринятияЗадачи)";
	
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	Запрос.УстановитьПараметр("ВремяПринятияЗадачи", ВремяПринятияЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураЗаполнения = Новый Структура("Исполнитель", Справочники.Пользователи.ПустаяСсылка());
		УПДК_ОбщегоНазначения.ЗаписатьДанныеВОбъектСБлокировкой(Выборка.Ссылка, СтруктураЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТзНастроекРаспределенияЗадач() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Метаданные.РегистрыСведений.Найти("Расш1_Дев_НастройкиРаспределенияЗадач") = Неопределено Тогда
		ПолноеИмя = "РегистрСведений.Расш1_Дев_НастройкиРаспределенияЗадач";
	Иначе
		ПолноеИмя = "РегистрСведений.Дев_НастройкиРаспределенияЗадач";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	"+ПолноеИмя+" КАК Т
	|ГДЕ  
	//++ Абидинов по задаче ENCO-283
	//|	Т.Используется  
	//|   И Т.ИдентификаторОбъекта = Значение(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)";
	|	Т.Используется";  
	//- Абидинов по задаче ENCO-283
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить();	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНомерОчереди(РольИсполнителя, КартаМаршрута, ДопОтбор = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Метаданные.РегистрыСведений.Найти("Расш1_Дев_ПорядокПользователейДляРаспределенияЗадач") = Неопределено Тогда
		ПолноеИмя = "РегистрСведений.Расш1_Дев_ПорядокПользователейДляРаспределенияЗадач";
	Иначе
		ПолноеИмя = "РегистрСведений.Дев_ПорядокПользователейДляРаспределенияЗадач";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Порядок КАК Порядок
	|ИЗ
	|	"+ПолноеИмя+" КАК Т
	|ГДЕ
	|	Т.РольИсполнителя = &РольИсполнителя
	|	И Т.КартаМаршрута = &КартаМаршрута
	|	И Т.ДопОтбор = &ДопОтбор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ";
	
	Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("ДопОтбор", ДопОтбор);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(); 
	
	НомерВОчереди = 0;
	
	Если Выборка.Следующий() Тогда
		НомерВОчереди = Выборка.Порядок;
	КонецЕсли; 
	
	Возврат НомерВОчереди + 1;
	
КонецФункции

Процедура ДобавитьПорядокОчереди(Пользователь, Номер, РольИсполнителя, КартаМаршрута, ДопОтбор = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Метаданные.РегистрыСведений.Найти("Расш1_Дев_ПорядокПользователейДляРаспределенияЗадач") = Неопределено Тогда
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений.Расш1_Дев_ПорядокПользователейДляРаспределенияЗадач");
	Иначе
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений.Дев_ПорядокПользователейДляРаспределенияЗадач");
	КонецЕсли;
	
	МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.РольИсполнителя = РольИсполнителя;
	МенеджерЗаписи.КартаМаршрута = КартаМаршрута;
	МенеджерЗаписи.ДопОтбор = ДопОтбор;
	МенеджерЗаписи.Порядок = Номер;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура УстановитьСрокОтветсвенности(Договор, Пользователь, РольИсполнителя = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Метаданные.РегистрыСведений.Найти("Расш1_Дев_СрокиОтветственностиБрокеровВДоговорах") = Неопределено Тогда
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений.Расш1_Дев_СрокиОтветственностиБрокеровВДоговорах");
	Иначе
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений.Дев_СрокиОтветственностиБрокеровВДоговорах");
	КонецЕсли;
	
	СрокЗакрепления = УПДК_БизнесПроцессыИЗадачиПовтИсп.ПолучитьСрокЗакрепления(Договор, Пользователь);
	
	Если СрокЗакрепления = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Договор = Договор;
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.РольИсполнителя = РольИсполнителя;
	МенеджерЗаписи.ДатаОкончания = ТекущаяДатаСеанса() + СрокЗакрепления*24*60*60;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

//Если клиент приобретает несколько объектов в рамках срока закрепления, 
// заявка должна уходить на того специалиста ССК, который работал по первой заявке
Функция ПолучитьЗакрепленногоСотрудникаПоТекущемуКлиенту(Клиент, ПолучитьВыборку = Истина, Ссылка = Неопределено, РольИсполнителя = Неопределено, КартаМаршрута = Неопределено) Экспорт
	
	#Область Черновик
	//На случай, если надо поменять определения параметров запроса
	//СтруктураЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "РольИсполнителя, БизнесПроцесс.КартаМаршрута");
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	РеализацияНедвижимости.Ссылка КАК Ссылка,
	//|	РеализацияНедвижимости.Дата КАК Дата
	//|ИЗ
	//|	Документ.РеализацияНедвижимости КАК РеализацияНедвижимости
	//|ГДЕ
	//|	РеализацияНедвижимости.Клиент = &Клиент
	//|	И РеализацияНедвижимости.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), ДЕНЬ, -) И КОНЕЦПЕРИОДА(&ТекДата, МЕСЯЦ)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель
	//|ИЗ
	//|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	//|ГДЕ
	//|	ЗадачаИсполнителя.РольИсполнителя = &РольИсполнителя
	//|	И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута = &КартаМаршрута
	//|	И ЗадачаИсполнителя.CRM_Партнер = &Клиент
	//|	И НЕ ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	//|	И ЗадачаИсполнителя.Предмет ССЫЛКА Документ.РеализацияНедвижимости
	//|	И НЕ ЗадачаИсполнителя.Ссылка = &Ссылка"; 
	
	//Запрос.УстановитьПараметр("Клиент", Клиент);
	//Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	//Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
	//Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//
	//РезультатЗапроса = Запрос.ВыполнитьПакет();
	//
	//ВГраница = РезультатЗапроса.ВГраница();
	//
	//Если РезультатЗапроса[ВГраница-1].Пустой() Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//Если РезультатЗапроса[ВГраница].Пустой() Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//Выборка = РезультатЗапроса[ВГраница].Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Возврат Выборка.Исполнитель
	//КонецЦикла;
	#КонецОбласти
    
	Если Не Метаданные.РегистрыСведений.Найти("ОтсутствияИЗанятости1") = Неопределено Тогда
		ПолноеИмя = "РегистрСведений.ОтсутствияИЗанятости1";
	Иначе
		ПолноеИмя = "РегистрСведений.Дев_ОтсутствияИЗанятости";
	КонецЕсли;
	
	Если Не Метаданные.РегистрыСведений.Найти("Расш1_Дев_СрокиОтветственностиБрокеровВДоговорах") = Неопределено Тогда
		ПолноеИмя2 = "РегистрСведений.Расш1_Дев_СрокиОтветственностиБрокеровВДоговорах";
	Иначе
		ПолноеИмя2 = "РегистрСведений.Дев_СрокиОтветственностиБрокеровВДоговорах";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОтсутствияИЗанятости.Пользователь КАК Пользователь,
	|	ОтсутствияИЗанятости.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_Пользователи
	|ИЗ
	|	"+ПолноеИмя+" КАК ОтсутствияИЗанятости
	|ГДЕ
	|	НЕ ОтсутствияИЗанятости.Вид В (&Вид)
	|	И ОтсутствияИЗанятости.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ТекДата, МИНУТА, -30) И ДОБАВИТЬКДАТЕ(&ТекДата, МИНУТА, 30)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Пользователь КАК Пользователь
	|ИЗ
	|	"+ПолноеИмя2+" КАК Т
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Пользователи КАК ВТ_Пользователи
    |		ПО (ВТ_Пользователи.Пользователь = Т.Пользователь)
    |           
	|ГДЕ
	|	Т.Договор.Клиент = &Клиент
	|	И Т.РольИсполнителя = &РольИсполнителя
	|	И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), НАЧАЛОПЕРИОДА(Т.ДатаОкончания, ДЕНЬ), ДЕНЬ) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.ДатаОкончания УБЫВ";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
    
    Вид = Новый СписокЗначений;
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Выходной); //Выходной
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Отпуск);
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.ПолучитьСсылку(Новый УникальныйИдентификатор("bc0b0d15-371a-11ec-a24d-00155d000e43"))); //Юольничный
	Запрос.УстановитьПараметр("Вид", Вид);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
    КонецЕсли;
    
    Если ПолучитьВыборку Тогда
        Возврат РезультатЗапроса.Выбрать();
    Иначе
        Выборка = РезультатЗапроса.Выбрать();
        Если Выборка.Следующий() Тогда
            Возврат Выборка.Пользователь;
        КонецЕсли;
    КонецЕсли;
	
	//Выборка = РезультатЗапроса.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	 Возврат Выборка.Пользователь; 
	//КонецЦикла;
	
КонецФункции

//Если в способе оплаты указан «трейд-ин», такие заявки распределяются по очереди в отдельном учете.
Функция СпособОплатыТрейдИн(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияНедвижимости.ЭтапыОплаты КАК Т
	|ГДЕ
	|	Т.ФормаОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.ТрейдИн)
	|	И Т.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т2.Ссылка
	|ИЗ
	|	Документ.РеализацияНедвижимости КАК Т2
	|ГДЕ
	|	Т2.Ссылка = &Ссылка
	|	И Т2.СпособПриобретения = &СпособПриобретения";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//В хране сделать предопределенный элемент Трейд-Ин
	Запрос.УстановитьПараметр("СпособПриобретения", Справочники.УПДК_СпособыПриобретенияНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор("e992eb94-1066-11e3-93ef-000c29350d30"))); // Трейд-ин
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
КонецФункции 

//Если в способе оплаты указан «Транш», такие заявки распределяются по очереди в отдельном учете.
Функция СпособОплатыТранш(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	 |ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияНедвижимости.ЭтапыОплаты КАК Т
	|ГДЕ
	|	Т.ФормаОплаты В(&СпособПриобретения)
	|	И Т.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//Как в хран переносить, пока  хз 
    СпособПриобретения = Новый Массив;
    СпособПриобретения.Добавить(ПланыВидовХарактеристик.УПДК_ФормыОплаты.ПолучитьСсылку(Новый УникальныйИдентификатор("80549918-6fc7-11ed-a2a0-00155d000d34")));
    //СпособПриобретения.Добавить(ПланыВидовХарактеристик.УПДК_ФормыОплаты.ПолучитьСсылку(Новый УникальныйИдентификатор("f4c430ef-b519-11ee-aa8c-00155dff2d5d")));
    //СпособПриобретения.Добавить(ПланыВидовХарактеристик.УПДК_ФормыОплаты.ПолучитьСсылку(Новый УникальныйИдентификатор("fabee32c-b519-11ee-aa8c-00155dff2d5d")));
    Запрос.УстановитьПараметр("СпособПриобретения", СпособПриобретения); // Транши
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
КонецФункции 

// Если в сделке участвуют несовершеннолетние покупатели «Сторона 2», 
//	такие заявки распределяются по очереди в отдельном учете.
Функция НаличиеНесовершеннолетнегоВподписантах(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.Подписант КАК Подписант
	|ИЗ
	|	Документ.РеализацияНедвижимости.ПодписантыКлиент КАК Т
	|ГДЕ
	|	Т.Подписант.ДатаРождения >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), ГОД, -18)
	|	И Т.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
КонецФункции

Функция СписокЗначенийДопОтбораПорядкаРаспределения() Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	//СписокЗначений.Вставить(0, "НесколькоОбъектов", "Несколько объектов", Ложь);
	СписокЗначений.Вставить(0, "ТрейдИн", "ТрейдИн в заявке", Ложь);
	СписокЗначений.Вставить(1, "Транш", "Траншевые платежи", Ложь);
	СписокЗначений.Вставить(2, "Несовершеннолетние", "Несовершеннолетние покупатели", Ложь);
	
	Возврат СписокЗначений;
	
КонецФункции

Процедура ВернутьЗадачиВОчередьНедоступногоСотрудника(СтрокаТЗ)
    
	КартаМаршрута = СтрокаТЗ.КартаМаршрута;
	РольИсполнителя = СтрокаТЗ.РольИсполнителя;
	Дата = ТекущаяДатаСеанса();
	
	Если Не Метаданные.РегистрыСведений.Найти("ОтсутствияИЗанятости1") = Неопределено Тогда
		ПолноеИмя = "РегистрСведений.ОтсутствияИЗанятости1";
	Иначе
		ПолноеИмя = "РегистрСведений.Дев_ОтсутствияИЗанятости";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
    |ВЫБРАТЬ
    |	ОтсутствияИЗанятости.Пользователь КАК Пользователь,
    |	ОтсутствияИЗанятости.Дата КАК Дата
    |ПОМЕСТИТЬ ВТ_Пользователи
    |ИЗ
    |	"+ПолноеИмя+" КАК ОтсутствияИЗанятости
    |ГДЕ
    |	ОтсутствияИЗанятости.Вид В (&Вид)
    |	И ОтсутствияИЗанятости.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Пользователь
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТ_Пользователи.Пользователь КАК Пользователь,
    |	ЗадачаИсполнителя.Ссылка КАК Задача
    |
    |ИЗ
    |	ВТ_Пользователи КАК ВТ_Пользователи
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
    |		ПО (ВТ_Пользователи.Пользователь = ЗадачаИсполнителя.Исполнитель)
    |			И (НЕ ЗадачаИсполнителя.Выполнена)
    |ГДЕ
    |	ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута В(&КартаМаршрута)
    |	И ЗадачаИсполнителя.РольИсполнителя В(&РольИсполнителя)";
    
	Вид = Новый СписокЗначений;
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Выходной);//Выходной
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.Отпуск);
	Вид.Добавить(Справочники.ВидыОтсутствияИЗанятости.ПолучитьСсылку(Новый УникальныйИдентификатор("bc0b0d15-371a-11ec-a24d-00155d000e43"))); //Юольничный
	Запрос.УстановитьПараметр("Вид", Вид);
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РольИсполнителяСЗ = Новый СписокЗначений;
	РольИсполнителяСЗ.Добавить(РольИсполнителя);
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителяСЗ);
	
	
	КартаМаршрутаСЗ = Новый СписокЗначений;
	КартаМаршрутаСЗ.Добавить(КартаМаршрута);
	Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрутаСЗ);
	
	РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
    	Возврат;
    КонецЕсли;
    
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураЗаполнения = Новый Структура("Исполнитель", Справочники.Пользователи.ПустаяСсылка());
		УПДК_ОбщегоНазначения.ЗаписатьДанныеВОбъектСБлокировкой(Выборка.Ссылка, СтруктураЗаполнения);
	КонецЦикла;

	
КонецПроцедуры
#КонецОбласти