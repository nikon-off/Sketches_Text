
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Автотест") Тогда
		Возврат;
	КонецЕсли;
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.Печать	
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	Дев_УправлениеДокументами.ПриСозданииНаСервере(ЭтаФорма);
	
	//Добавляем к параметрам выбора "ВидДокумента" идентификатор документа
	ИдентификаторДокумента = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.РеализацияНедвижимости");
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПриСозданииЧтенииНаСервере();
		
		ПроверитьСуществованиеПохожегоДоговора();
		
	Иначе
		
		//Блокируем для изменения, если есть доп. соглашения	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДопСоглашениеРеализацияНедвижимости.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДопСоглашениеРеализацияНедвижимости КАК ДопСоглашениеРеализацияНедвижимости
		|ГДЕ
		|	ДопСоглашениеРеализацияНедвижимости.Основание = &Ссылка
		|	И ДопСоглашениеРеализацияНедвижимости.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДопСоглашениеРеализацияНедвижимости.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();

			БлокирующееДопСоглашение = ВыборкаДетальныеЗаписи.Ссылка;
			
			// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
			ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
			// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
			
			Элементы.ПодписантыОрганизацияЗаполнитьПодписантовСторона1.Доступность = Ложь;
			Элементы.ПодписантыКлиентЗаполнитьПодписантовСторона2.Доступность = Ложь;
			Элементы.ПодписантыКлиентЗаполнитьДолиВРавныхДолях.Доступность = Ложь;
			Элементы.ЭтапыОплатыЗаполнитьПоГрафикуОплаты.Доступность = Ложь;
			Элементы.ЭтапыОплатыРазбитьПлатеж.Доступность = Ложь;
			Элементы.ЗаполнитьПоЗаказу.Доступность = Ложь;
			Элементы.РучныеСкидкиДобавить.Доступность = Ложь;
			Элементы.ПереключательНаценки.Доступность = Ложь;
			
		КонецЕсли;

	КонецЕсли;

	Если СкидкаНаценка = "" Тогда
	    СкидкаНаценка = "Скидка";
	КонецЕсли;

	Для каждого ТекСтрока Из Объект.ПодписантыОрганизация Цикл
		
	    ДобавитьКарточкуПродавца(Ложь);

		ЭтаФорма["Организация" + НомерПродавцов] = ТекСтрока.Организация;
		ЭтаФорма["БанкСчет" + НомерПродавцов] = ТекСтрока.БанковскийСчет;
		ЭтаФорма["Подписант" + НомерПродавцов] = ТекСтрока.Подписант;
		ЭтаФорма["Должность" + НомерПродавцов] = ТекСтрока.Должность;
		ЭтаФорма["ПечатьВПреамбуле" + НомерПродавцов] = ТекСтрока.ВыводитьВПреамбуле;
		ЭтаФорма["ПечатьВПодписях" + НомерПродавцов] = ТекСтрока.ВыводитьВПодписях;
		ЭтаФорма["Основание" + НомерПродавцов] = ТекСтрока.Основание;
		ЭтаФорма["ТипПредставителя" + НомерПродавцов] = ТекСтрока.ТипПредставителя;
	
	КонецЦикла;
	
	Для каждого ТекСтрока Из Объект.ПодписантыКлиент Цикл
		
		ДобавитьКарточкуПокупателя(Истина, Ложь);
		
		Если ВидПартнера = ПредопределенноеЗначение("Перечисление.ВидПартнера.Компания") Тогда
			
			ЭтаФорма["Контрагент" + НомерПокупателей] = ТекСтрока.Контрагент;
			ЭтаФорма["ПокупБанкСчет" + НомерПокупателей] = ТекСтрока.БанковскийСчет;
			ЭтаФорма["ПокупПодписант" + НомерПокупателей] = ТекСтрока.Подписант;
			ЭтаФорма["ПокупДолжность" + НомерПокупателей] = ТекСтрока.Должность;
			ЭтаФорма["ПокупПечатьВПреамбуле" + НомерПокупателей] = ТекСтрока.ВыводитьВПреамбуле;
			ЭтаФорма["ПокупПечатьВПодписях" + НомерПокупателей] = ТекСтрока.ВыводитьВПодписях;
			ЭтаФорма["ПокупОснование" + НомерПокупателей] = ТекСтрока.Основание;
			ЭтаФорма["ПокупТипПредставителя" + НомерПокупателей] = ТекСтрока.ТипПредставителя;
		
		Иначе	
			
			ЭтаФорма["Имя" + НомерПокупателей] = ТекСтрока.Подписант;
			ЭтаФорма["Должность_" + НомерПокупателей] = ТекСтрока.Должность;
			ЭтаФорма["ДоверенноеЛицо" + НомерПокупателей] = ТекСтрока.ДоверенноеЛицо;
			ЭтаФорма["Основание_" + НомерПокупателей] = ТекСтрока.Основание;
			ЭтаФорма["Доля" + НомерПокупателей] = ТекСтрока.Доля;
			ЭтаФорма["СовместноДолевая" + НомерПокупателей] = ТекСтрока.СовместноДолевая;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Инд = 1 По НомерПокупателей Цикл
		Если СписокУдаленныхПокупателей.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Объект.ТипСобственности = ПредопределенноеЗначение("Перечисление.УПДК_ТипыСобственности.Единоличная") Или 
			Объект.ТипСобственности = ПредопределенноеЗначение("Перечисление.УПДК_ТипыСобственности.Совместная") Тогда
		    Элементы["ГруппаБлокПокупателя_Доля" + Инд].Видимость = Ложь;
		Иначе	
			Элементы["ГруппаБлокПокупателя_Доля" + Инд].Видимость = Истина;
			Если Не Объект.ТипСобственности = ПредопределенноеЗначение("Перечисление.УПДК_ТипыСобственности.СовместноДолевая") Тогда
				Элементы["ГруппаБлокПокупателя_Доля" + Инд].ПодчиненныеЭлементы["Покупатель_СовместноДолевая" + Инд].Видимость = Ложь;
			Иначе
				Элементы["ГруппаБлокПокупателя_Доля" + Инд].ПодчиненныеЭлементы["Покупатель_СовместноДолевая" + Инд].Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Элементы.ИзменитьФорму.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.G,, Истина);
	
	УПДК_ОбнулитьСчетчикиЗаписейИстории(); 
	
	Если ЗначениеЗаполнено(Объект.ОбъектНедвижимости) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиДоступаДоговорБезКонтроляВторичнаяНедвижимость.Финансист КАК Финансист,
		|	НастройкиДоступаДоговорБезКонтроляВторичнаяНедвижимость.Юрист КАК Юрист
		|ИЗ
		|	РегистрСведений.НастройкиДоступаДоговорБезКонтроляВторичнаяНедвижимость КАК НастройкиДоступаДоговорБезКонтроляВторичнаяНедвижимость
		|ГДЕ
		|	НастройкиДоступаДоговорБезКонтроляВторичнаяНедвижимость.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			
			Элементы.БезКонтроляОплаты.Видимость = ВыборкаДетальныеЗаписи.Финансист;
			Элементы.БезРегистрации.Видимость = ВыборкаДетальныеЗаписи.Юрист;
		КонецЕсли;  
	КонецЕсли;
	
	Если Параметры.Свойство("КанбанВручную") Тогда
		КанбанВручную = Параметры.КанбанВручную;
		КанбанСделка = Параметры.Сделка;
		КанбанЭтап = Параметры.Этап;
	КонецЕсли;
	
	Элементы.СделкаПоИпотекеТип.СписокВыбора.Добавить("Первоначальный договор"); 
	Элементы.СделкаПоИпотекеТип.СписокВыбора.Добавить("Согласованный договор");
	Элементы.СделкаПоИпотекеТип.СписокВыбора.Добавить("Зарегистрированный договор");
	Элементы.СделкаПоИпотекеТип.СписокВыбора.Добавить("Прочее");
	
	//{CRM4DEV-309 Козловский С.А. 07.12.2023
	ОбработатьФайлыМК();
	//}CRM4DEV-309 Козловский С.А. 07.12.2023
	
КонецПроцедуры

//{CRM4DEV-309 Козловский С.А. 07.12.2023
&НаСервере
Процедура ОбработатьФайлыМК()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияНедвижимостиПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	РеализацияНедвижимостиПрисоединенныеФайлы.Наименование КАК Наименование,
	|	РеализацияНедвижимостиПрисоединенныеФайлы.Служебное КАК Служебное
	|ИЗ
	|	Справочник.РеализацияНедвижимостиПрисоединенныеФайлы КАК РеализацияНедвижимостиПрисоединенныеФайлы
	|ГДЕ
	|	НЕ РеализацияНедвижимостиПрисоединенныеФайлы.ПометкаУдаления
	|	И РеализацияНедвижимостиПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если СтрНайти(ВыборкаДетальныеЗаписи.Служебное, "Сформировано автоматически. Маткапитал") > 0 Тогда
			
			ФайлыМК.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			
			ИмяГруппы_Файл = "ГруппаБлокМК_Файл" + "_" + Строка(ФайлыМК.Количество() - 1);
			ИмяГруппы_Файл = Элементы.Добавить(ИмяГруппы_Файл, Тип("ГруппаФормы"), Элементы.ГруппаБлокМК_Файлы);
			ИмяГруппы_Файл.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ИмяГруппы_Файл.Заголовок = "";
			ИмяГруппы_Файл.Отображение = ОтображениеОбычнойГруппы.Нет;
			ИмяГруппы_Файл.ОтображатьЗаголовок = Ложь; 
			ИмяГруппы_Файл.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ИмяГруппы_Файл.РастягиватьПоГоризонтали = Истина;
			ИмяГруппы_Файл.РастягиватьПоВертикали = Ложь;
			ИмяГруппы_Файл.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
			ИмяГруппы_Файл.Ширина = 80;
			
			////Отступ
			ОтступНаименованиеПередГруппой = "ОтступНаименованиеПередГруппойМК" + "_" + Строка(ФайлыМК.Количество() - 1);
			ОтступНаименованиеПередГруппой = Элементы.Добавить(ОтступНаименованиеПередГруппой, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
			ОтступНаименованиеПередГруппой.Вид = ВидДекорацииФормы.Надпись;
			ОтступНаименованиеПередГруппой.Заголовок = "";
			ОтступНаименованиеПередГруппой.Ширина = 1;
			ОтступНаименованиеПередГруппой.Высота = 0;
			ОтступНаименованиеПередГруппой.РастягиватьПоВертикали = Ложь;
			
			//ЭлементФайл
			ЭлементФайл = "ЭлементФайлМК" + "_" + Строка(ФайлыМК.Количество() - 1);
			ЭлементФайл = Элементы.Добавить(ЭлементФайл, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
			ЭлементФайл.Вид = ВидДекорацииФормы.Надпись;
			ЭлементФайл.Заголовок = ВыборкаДетальныеЗаписи.Наименование;
			ЭлементФайл.Гиперссылка = Истина;  
			ЭлементФайл.УстановитьДействие("Нажатие", "ОткрытьФайл");
			
			//ЭлементУдалитьФайл
			ЭлементУдалитьФайл = "ЭлементУдалитьФайлМК" + "_" + Строка(ФайлыМК.Количество() - 1);
			ЭлементУдалитьФайл = Элементы.Добавить(ЭлементУдалитьФайл, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
			ЭлементУдалитьФайл.Вид = ВидДекорацииФормы.Картинка;
			ЭлементУдалитьФайл.Заголовок = "";
			ЭлементУдалитьФайл.Гиперссылка = Истина;
			ЭлементУдалитьФайл.РастягиватьПоВертикали = Ложь;
			ЭлементУдалитьФайл.Картинка = БиблиотекаКартинок.Иконка_Закрыть;
			ЭлементУдалитьФайл.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			ЭлементУдалитьФайл.Высота = 1;
			ЭлементУдалитьФайл.УстановитьДействие("Нажатие", "УдалитьФайл");
			
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлМК()
КонецПроцедуры
//}CRM4DEV-309 Козловский С.А. 07.12.2023



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВидимостьЭлементов();//Акзор CRM4DEV-266
	Если ЗначениеЗаполнено(БлокирующееДопСоглашение) Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Редактирование запрещено из-за наличия доп соглашения'"),
			ПолучитьНавигационнуюСсылку(БлокирующееДопСоглашение),
			Строка(БлокирующееДопСоглашение));
	КонецЕсли;

	//Бизнес-процессы
	УстановитьСвойстваЭлементовГруппыБизнесПроцесс(ЭтотОбъект);
	УстановитьПодсказкуДляПоляБП();
	//Конец бизнес-процессы
	
	Если ЗначениеЗаполнено(ПохожийДоговор) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПохожийДоговорЗавершение", ЭтотОбъект), НСтр("ru = 'Уже имеется активный договор по данной брони. Открыть форму активного договора?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Объект.ОбъектНедвижимости) Тогда
		ПодключитьОбработчикОжидания("ОткрытьШахматку", 0.1, Истина);				
	КонецЕсли;

	СозданиеГруппТоваровИУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Справочник.Партнеры.Форма.ФормаМастерВводаНового" Тогда
		
		Объект.Клиент = ВыбранноеЗначение;
		УстановитьВидимостьКонтактаКлиента()
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	//Анкетирование
	Если ИмяСобытия = "Проведение_Анкета" Тогда
		ОбновитьАнкетирование();
	КонецЕсли;	
	//Конец Анкетирование
	
	Если ИмяСобытия = "ОбновитьДиалоги" Тогда
		ВыполнитьСкрипт("fireEvent('ОбновитьДиалоги');");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьИсторию(Партнер, СписокИдентификаторов)
	
	Возврат УПДК_События.СформироватьИсториюСобытияНовый(0, Неопределено, Партнер,,,, СписокИдентификаторов);
	
КонецФункции 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриСозданииЧтенииНаСервере();
	
	ЗаблокироватьФормуПриСогласовании();
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,"ИнтерактивноеПроведениеДоговораСПокупателем");
		
	КонецЕсли;

	ЗаписатьПодписантов(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ТипСобственности = Перечисления.УПДК_ТипыСобственности.Совместная Тогда
		КоличествоПодписантов = Строка(ТекущийОбъект.ПодписантыКлиент.Количество());
		Для Каждого СтрПодписант из ТекущийОбъект.ПодписантыКлиент Цикл
			СтрПодписант.Доля = "1/" + КоличествоПодписантов;	
		КонецЦикла;
	КонецЕсли; 
	
	Если КанбанВручную Тогда
	    ТекущийОбъект.ДополнительныеСвойства.Вставить("КанбанВручную", Истина);	
        ТекущийОбъект.ДополнительныеСвойства.Вставить("Сделка", КанбанСделка);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Этап", КанбанЭтап);	
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновитьДоступностьСкидокНаСервере();
	
	ТекущийОбъект.СкидкиНаценки.Очистить();
	
	Для Каждого СтрокаСкидокНаценок из ТаблицаСкидокНаценок Цикл
		
		Если СтрокаСкидокНаценок.Выбран Тогда
			
			НоваяСтрока = ТекущийОбъект.СкидкиНаценки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидокНаценок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаРучныхСкидок Из РучныеСкидки Цикл
		
		НоваяСтрока = ТекущийОбъект.СкидкиНаценки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРучныхСкидок);
		НоваяСтрока.ТипСкидкиНаценки = Перечисления.УПДК_ТипСкидкиНаценки.СуммойНаЦенуКВМ;
		НоваяСтрока.РучнаяСкидка = Истина;
		
	КонецЦикла;	
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Ошибки = Неопределено;
		
		Счетчик = 0;
		
		Для Каждого Стр из ТаблицаСкидокНаценок Цикл
						
			Если Не Стр.Подходит И Стр.Выбран Тогда
				
				Отказ = Истина;
				ТекстОшибки = НСтр("ru = 'Выбраны скидки, которая нельзя использовать в данном договоре'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.СкидкиНаценки["+Счетчик+"].СкидкаНаценка", ТекстОшибки);
				
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);		
		
	КонецЕсли;
	
	МассивДляУдаления = Новый Массив;
	
	Для Каждого ТекСтр из ТекущийОбъект.СкидкиНаценки Цикл
		
		Если ТекСтр.РучнаяСкидка Тогда
			МассивДляУдаления.Добавить(ТекСтр);
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого ТекСтр из МассивДляУдаления Цикл
		
		ТекущийОбъект.СкидкиНаценки.Удалить(ТекСтр);
		
	КонецЦикла;

   	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если УПДК_ОбщегоНазначенияВызовСервера.ЗначениеКонстанты("Б24_ИспользоватьОбмен") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзмененаВCRM", Истина); 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Анкетирование
	УПДК_Анкетирование.ОбновитьЭлементыФормы(ЭтотОбъект, "ГруппаАнкетирование");
	
	Ошибки = Неопределено;
	Счетчик = 1;
	Для Каждого ТекАнкета Из ЭтотОбъект["__ТаблицаСоответствий"] Цикл
	
	Если ТекАнкета.__ОбязательностьЗаполнения Тогда
		УПДК_Анкетирование.ПроверитьОбязательностьЗаполненияАнкеты(ЭтотОбъект, ПараметрыЗаписи, Отказ, ТекАнкета.__ИмяОпроса, Ошибки);	
	КонецЕсли;
	
	КонецЦикла;

	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);	
	//Конец Анкетирование

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//Бизнес-процессы
	Если ЗначениеЗаполнено(_БизнесПроцесс) Тогда
		СвязатьСБизнесПроцессомБезЗадачи();
		Если ЗначениеЗаполнено(_Задача) Тогда
			СвязатьСБизнесПроцессом();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьГруппуБизнесПроцесс();

	ПараметрыЗаписи.Вставить("ОткрыватьФормуЗадачи", УПДК_БизнесПроцессыИЗадачи.ОткрыватьФормуЗадачи(ЭтотОбъект, ПараметрыЗаписи));
	//Конец бизнес-процессы
	
	Если ИспользоватьРегистрациюДокуметов Тогда 	
		СостояниеРегистрации = УПДК_РегистрацияДокументов.ТекстСостоянияГосРегистрацииДокумента(Объект.Ссылка, Ложь);
	КонецЕсли;
	
	ОбновитьДоступностьСкидокНаСервере();
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, Неопределено);
	
	ЗаполнитьОплаченоДолгПоЭтапам();
	
	ПометитьНаУдалениеПрисоединенныеФайлы();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.Проведен Тогда
		
		ПараметрыВопроса = УПДК_ЗалогиВызовСервера.ПараметрыВопросаЗаявкаНаВыводИзЗалога(Объект.Ссылка);
		Если Не ПустаяСтрока(ПараметрыВопроса.ТекстВопроса) Тогда
			
			ОповещениеОВопросе = Новый ОписаниеОповещения("ВопросЗалогЗавершение", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОповещениеОВопросе, ПараметрыВопроса.ТекстВопроса, РежимДиалогаВопрос.ДаНет);		
						
		КонецЕсли;
		
		ПараметрыВопроса = УПДК_РегистрацияДокументовВызовСервера.ПараметрыВопросаЗаявкаНаРегистрацию(Объект.Ссылка);
		Если Не ПустаяСтрока(ПараметрыВопроса.ТекстВопроса) Тогда
			
			ОповещениеОВопросе = Новый ОписаниеОповещения("ВопросРегистрацияЗавершение", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОповещениеОВопросе, ПараметрыВопроса.ТекстВопроса, РежимДиалогаВопрос.ДаНет);		
			
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить("ИзмененСтатусНедвижимости", , ЭтотОбъект);
	
	УПДК_БизнесПроцессыИЗадачиКлиент.ОбновитьСписокОбъектовПоБизнесПроцессу(ЭтотОбъект, _Задача);	
	
	Если ПараметрыЗаписи.Свойство("ОткрыватьФормуЗадачи") И ПараметрыЗаписи.ОткрыватьФормуЗадачи <> Неопределено Тогда
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.УДПК_ФормаЗадачиЛегкая", Новый Структура("Ключ", ПараметрыЗаписи.ОткрыватьФормуЗадачи), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
	Оповестить("ПерезаполнитьКанбан");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПравовогоДокументаПриИзменении(Элемент)
	
	ПриИзмененииВидПравовогоДокументаСервер();
		
	ПоказатьОповещениеПользователя("Перезаполнен банковский счет",,,БиблиотекаКартинок.ВосклицательныйЗнакКрасный);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусСогласованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.Гиперссылка Тогда
		
		Если Модифицированность Или Не Объект.Проведен Тогда
			
			Если Вопрос("Для продолжения документ требуется провести. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗапуститьБизнесПроцессСогласование();
		
		ОбновитьОтображениеДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСобственностиПриИзменении(Элемент)
	ОграничениеТипаСобственностиПоКоличествуПодписантов();
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ГрафикОплаты) И
		Вопрос("Перезаполнить ""Этапы оплат""?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоГрафикуОплатыСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольнаяДатаОплатыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ГрафикОплаты) И
		Вопрос("Перезаполнить ""Этапы оплат""?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоГрафикуОплатыСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	УправлениеФормой();	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)	
	
	ПриИзмененииКлиентНаСервере();	
	
	//Анкетирование
	УПДК_АнкетированиеКлиент.АвтоСтартАнкетирования(ЭтотОбъект);
	//Конец Анкетирование

КонецПроцедуры

&НаКлиенте
Процедура АгентствоНедвижимостиПриИзменении(Элемент)
	
	ОбновитьДоступностьСкидокНаСервере();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПриобретенияПриИзменении(Элемент)	
	СпособПриобретенияПриИзмененииНаСервере();
	ВидимостьЭлементов(); //Акзор CRM4DEV-266
КонецПроцедуры  

&НаКлиенте
Процедура ВидимостьЭлементов() //Акзор CRM4DEV-266 
	ВидимостьБанка = КредитныеСтредства();
	Элементы.БанкИпотеки.Видимость = ВидимостьБанка;
	Элементы.Банк.Видимость = не ВидимостьБанка;
КонецПроцедуры

&НаСервере
Функция КредитныеСтредства()//Акзор CRM4DEV-266
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(Объект.СпособПриобретения) Тогда 
		Если Объект.СпособПриобретения.ФормаОплаты.ТипОплаты = Перечисления.ТипыДвиженияДенежныхСредств.КредитныеСредства Тогда 
			Возврат Истина
		Иначе
			Если не Объект.Банк.Пустая() Тогда 
				Объект.Банк = Справочники.Банки.ПустаяСсылка();
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СкидкиНаценкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "СкидкиНаценкиСкидкаНаценка" Тогда
		ОткрытьФорму("Справочник.УПДК_СкидкиНаценки.Форма.ФормаЭлемента", Новый Структура("Ключ", Элементы.СкидкиНаценки.ТекущиеДанные.СкидкаНаценка), ЭтотОбъект);
	ИначеЕсли  Элемент.ТекущийЭлемент.Имя = "СкидкиНаценкиМаркетинговаяКампания" Тогда
		ОткрытьФорму("Справочник.МаркетинговыеМероприятия.Форма.ФормаЭлемента", Новый Структура("Ключ", Элементы.СкидкиНаценки.ТекущиеДанные.МаркетинговаяКампания), ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Форма = ПолучитьФорму("Справочник.УПДК_ОбъектыНедвижимости.ФормаОбъекта",Новый Структура("Ключ",Объект.СвязанныеОбъекты.Получить(ВыбраннаяСтрока).ОбъектНедвижимости),ЭтаФорма);	
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтказаПриИзменении(Элемент)
	
	УправлениеФормой();
	
	ПриИзмененииПричинаОтказаНаСервере();
	УПДК_АнкетированиеКлиент.АвтоСтартАнкетирования(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗаказКлиентаПриИзменении(Элемент)
	
	ЗаполнитьПоЗаказуНаСервере();
	
	Если ЗначениеЗаполнено(ПохожийДоговор) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПохожийДоговорЗавершение", ЭтотОбъект), НСтр("ru = 'Уже имеется активный договор по данной брони. Открыть форму активного договора?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АгентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = УПДК_ФизическиеЛицаВызовСервера.РиелторыДляДанныхВыбора(Объект.АгентствоНедвижимости, Текст);	

КонецПроцедуры

&НаКлиенте
Процедура АгентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УПДК_ФизическиеЛицаВызовСервера.РиелторыДляДанныхВыбора(Объект.АгентствоНедвижимости, Текст);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПравовогоДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;	
	ДанныеВыбора = ПолучитьВидыПравовыхДокументов(Объект.ОбъектНедвижимости, Текст, Объект.Дата, Объект.Ссылка);   
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПравовогоДокументаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст <> "" Тогда
		
		СтандартнаяОбработка = Ложь; 		
		ДанныеВыбора = ПолучитьВидыПравовыхДокументов(Объект.ОбъектНедвижимости, Текст, Объект.Дата, Объект.Ссылка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаДоговораПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПодписания) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДатаПодписания < НачалоДня(ДатаБрони) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаДоговораПриИзмененииЗавершениеБронь", ЭтотОбъект), "Дата подписания договора раньше чем дата ""Брони"", изменить дату брони?", РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Объект.Дата < ДатаБрони И Объект.Дата <> НачалоДня(ТекущаяДата()) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаДоговораПриИзмененииЗавершениеБронь", ЭтотОбъект), "Дата оформления договора раньше чем дата ""Брони"", изменить дату брони?", РежимДиалогаВопрос.ДаНет); 	                                                                                                                                                                                    		
	ИначеЕсли Объект.ДатаПодписания < НачалоДня(Объект.Дата) Тогда	
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаДоговораПриИзмененииЗавершение", ЭтотОбъект), "Дата подписания договора раньше чем дата оформления договора, изменить дату оформления договора?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатыДатаПлатежаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	Если Текст = "  .  .    " Тогда
		Возврат;
	КонецЕсли;
	
	мДата = Дата(Прав(Текст,4) + Сред(Текст,4,2) + лев(Текст,2));
	
	Если мДата < Дата("20100101") ИЛИ (ЗначениеЗаполнено(Объект.ДатаПодписания) И мДата < Объект.ДатаПодписания) Тогда
		
		СтандартнаяОбработка = Ложь;
		Состояние("Неверно указана дата платежа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПриИзменении(Элемент)	
	РассчитатьЦенуСкидкуСумму();	
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
		
	//Элементы.СимволПроцентаРучнойСкидки.Видимость = Объект.ВидСкидки = ПредопределенноеЗначение("Перечисление.УПДК_ВидыСкидок.Процентом"); 
	//Элементы.ВалютаРучнойСкидки.Видимость = НЕ Элементы.СимволПроцентаРучнойСкидки.Видимость; 
	//
	//Объект.Скидка = 0;
	РассчитатьЦенуСкидкуСумму(); 	

КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПризнакАвтоРасчетаПриИзменении(Элемент)
	
	Если Объект.D4_ВознаграждениеАвто Тогда
		ПерезаполнитьВознаграждениеНаСервере()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура D4_ВознаграждениеЗастройщикаПриИзменении(Элемент)
	
	Себестоимость = Объект.СуммаДокумента - Объект.D4_ВознаграждениеЗастройщика;
	Объект.D4_ДоляЗастройщика = ?(Объект.СуммаДокумента = 0, 0, Объект.D4_ВознаграждениеЗастройщика / Объект.СуммаДокумента);
	Объект.D4_ВознаграждениеАвто = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентКонтактНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаМастерВводаНового", Новый Структура("Контакт", Объект.Клиент), ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_ПодписантыОрганизация

&НаКлиенте
Процедура ПодписантыОрганизацияПодписантПриИзменении(Элемент)
	
	ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Продавец_Подписант"));
	Если ЗначениеЗаполнено(ЭтаФорма["Подписант" + ТекНомер]) Тогда
		ДанныеПодписант = УПДК_ФизическиеЛицаВызовСервера.ПолучитьДанныеПодписантаОрганизации(ЭтаФорма["Организация" + ТекНомер], ЭтаФорма["Подписант" + ТекНомер]);
		//ТекущиеДанные.Основание = ДанныеПодписант.Основание;
		ЭтаФорма["Должность" + ТекНомер] = ДанныеПодписант.Должность;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписантыОрганизацияОрганизацияПриИзменении(Элемент)
	
	ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Продавец_Организация"));
	Если ЗначениеЗаполнено(ЭтаФорма["Организация" + ТекНомер]) Тогда
		
		ЭтаФорма["БанкСчет" + ТекНомер] = УПДК_РаботаСБанкамиВызовСервера.ПолучитьБанковскийСчетПоУмолчанию(ЭтаФорма["Организация" + ТекНомер]);
		
		Подписанты = УПДК_ФизическиеЛицаВызовСервера.ПолучитьПодписантовОрганизацииПоУмолчанию(ЭтаФорма["Организация" + ТекНомер]);
		
		Если Подписанты.Количество() = 1 Тогда
			
			ЭтаФорма["Подписант" + ТекНомер] = Подписанты[0];		
			ДанныеПодписант = УПДК_ФизическиеЛицаВызовСервера.ПолучитьДанныеПодписантаОрганизации(ЭтаФорма["Организация" + ТекНомер], ЭтаФорма["Подписант" + ТекНомер]);
			//ТекущиеДанные.Основание = ДанныеПодписант.Основание;
			ЭтаФорма["Должность" + ТекНомер] = ДанныеПодписант.Должность;

		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписантыПокупательКонтрагентПриИзменении(Элемент)
	
	ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Покупатель_Контрагент"));
	Если ЗначениеЗаполнено(ЭтаФорма["Контрагент" + ТекНомер]) Тогда
		
		ЭтаФорма["ПокупБанкСчет" + ТекНомер] = УПДК_РаботаСБанкамиВызовСервера.ПолучитьБанковскийСчетПоУмолчанию(ЭтаФорма["Контрагент" + ТекНомер]);
						
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписантыОрганизацияПодписантАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Продавец_Подписант"));
	Если ЗначениеЗаполнено(ЭтаФорма["Организация" + ТекНомер]) Тогда		
		ДанныеВыбора = ПолучитьПодписантовОрганизации(ЭтаФорма["Организация" + ТекНомер]);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписантыОрганизацияПодписантОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Продавец_Подписант"));
		Если ЗначениеЗаполнено(ЭтаФорма["Организация" + ТекНомер]) Тогда		
			ДанныеВыбора = ПолучитьПодписантовОрганизации(ЭтаФорма["Организация" + ТекНомер]);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписантыОрганизацияПодписантНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Продавец_Подписант"));
	Если ЗначениеЗаполнено(ЭтаФорма["Организация" + ТекНомер]) Тогда		
		ДанныеВыбора = ПолучитьПодписантовОрганизации(ЭтаФорма["Организация" + ТекНомер]);
	КонецЕсли;
	
КонецПроцедуры 

//++Никонов по задаче
 &НаКлиенте
Процедура ПодписантыОрганизацияБанкСчетСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;                                                                                                                                                                   
	ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Продавец_БанкСчет"));
	Если ЗначениеЗаполнено(ЭтаФорма["Организация" + ТекНомер]) Тогда		
		ОткрытьФорму("Справочник.БанковскиеСчета.Форма.ФормаЭлемента", Новый Структура("Организация, НомерОрганизации", ЭтаФорма["Организация" + ТекНомер], ТекНомер), ЭтотОбъект,,,,Новый ОписаниеОповещения("ПриСозданииНовогоСчёта", ЭтотОбъект));
	Иначе
		Сообщить("Поле Организация не заполнена");
	КонецЕсли;
	
КонецПроцедуры

 &НаКлиенте
Процедура ПриСозданииНовогоСчёта(Результат, ДопПараметры) Экспорт
	 Если ЗначениеЗаполнено(Результат) Тогда
	 	 ЭтотОбъект["БанкСчет" + Результат.НомерОрганизации] = Результат.БанковскийСчет;
	 КонецЕсли;
КонецПроцедуры

//--Никонов

&НаСервереБезКонтекста
Функция ПолучитьПодписантовОрганизации(Организация)
	
	МассивПодписантов = УПДК_ФизическиеЛица.ПолучитьПодписантовОрганизации(Организация);
	
	СписокПодписантов = Новый СписокЗначений;
	СписокПодписантов.ЗагрузитьЗначения(МассивПодписантов);
	
	Возврат СписокПодписантов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_ТаблицаСкидокНаценок

&НаКлиенте
Процедура ТаблицаСкидокНаценокПриИзменении(Элемент)
	
	ОбновитьДоступностьСкидокНаСервере();	
	РассчитатьЦенуСкидкуСумму();
	УстановитьЗаголовокСкидкиНаценки(ТаблицаСкидокНаценок, ЗаголовокСкидкиНаценки);
	
КонецПроцедуры

&НаКлиенте

Процедура ТаблицаСкидокНаценокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_ПодписантыКлиент

&НаКлиенте
Процедура ПодписантыКлиентПодписантПриИзменении(Элемент)
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.ВидПартнера.Компания") Тогда
		
		ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Покупатель_Подписант"));
		Если ЗначениеЗаполнено(ЭтаФорма["Контрагент" + ТекНомер]) Тогда
			
			ДанныеПодписант = УПДК_ФизическиеЛицаВызовСервера.ПолучитьДанныеПодписантаПартнера(Объект.Клиент, ЭтаФорма["Контрагент" + ТекНомер]);
			
			ЭтаФорма["ПокупДолжность" + ТекНомер] = ДанныеПодписант.Должность;
			//ЭтаФорма["ПокупДоверенноеЛицо" + ТекНомер] = ДанныеПодписант.ДоверенноеЛицо;
			ЭтаФорма["ПокупОснование" + ТекНомер] = ДанныеПодписант.Основание;
			
		КонецЕсли;	
	Иначе	
			
		ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Покупатель_Имя"));
		Если ЗначениеЗаполнено(ЭтаФорма["Имя" + ТекНомер]) Тогда
			
			ДанныеПодписант = УПДК_ФизическиеЛицаВызовСервера.ПолучитьДанныеПодписантаПартнера(Объект.Клиент, ЭтаФорма["Имя" + ТекНомер]);
			
			ЭтаФорма["Должность_" + ТекНомер] = ДанныеПодписант.Должность;
			ЭтаФорма["ДоверенноеЛицо" + ТекНомер] = ДанныеПодписант.ДоверенноеЛицо;
			ЭтаФорма["Основание_" + ТекНомер] = ДанныеПодписант.Основание;
			
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписантыКлиентПодписантНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьПодписантовКлиента(Объект.Клиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписантыКлиентПодписантАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 	
	ДанныеВыбора = ПолучитьПодписантовКлиента(Объект.Клиент);

КонецПроцедуры

&НаКлиенте
Процедура ПодписантыКлиентПодписантОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;	
		ДанныеВыбора = ПолучитьПодписантовКлиента(Объект.Клиент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписантыКлиентПодписантСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//При создании подписанта - создаём контактое лицо для клиента
	
	ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Покупатель_Имя"));
	ПараметрыФормы = Новый Структура;
		
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Клиент);
	ЗначенияЗаполнения.Вставить("ПравоПодписи", Истина);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

	ПараметрыОповещения = Новый Структура("ИДСтроки, ИмяПоля");
	ПараметрыОповещения.ИДСтроки = ТекНомер;
	ПараметрыОповещения.ИмяПоля = "Имя"; 
	
	Оповещение = Новый ОписаниеОповещения("СозданиеКонтактногоЛицаКлиентаЗавершение", ЭтотОбъект,
		ПараметрыОповещения);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаМастерВводаНового", 
		ПараметрыФормы, ЭтотОбъект,,,, 
		Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ПодписантыКлиентДоверенноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьКонтактныеЛицаКлиента(Объект.Клиент);

КонецПроцедуры

&НаКлиенте
Процедура ПодписантыКлиентДоверенноеЛицоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьКонтактныеЛицаКлиента(Объект.Клиент);

КонецПроцедуры

&НаКлиенте
Процедура ПодписантыКлиентДоверенноеЛицоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьКонтактныеЛицаКлиента(Объект.Клиент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписантыКлиентДоверенноеЛицоСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//При создании доверенного лица - создаём контактое лицо для клиента
	
	ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Покупатель_ДоверенноеЛицо"));
	ПараметрыФормы = Новый Структура;
		
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Клиент);	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

	ПараметрыОповещения = Новый Структура("ИДСтроки, ИмяПоля");
	ПараметрыОповещения.ИДСтроки = ТекНомер;
	ПараметрыОповещения.ИмяПоля = "ДоверенноеЛицо"; 
	
	Оповещение = Новый ОписаниеОповещения("СозданиеКонтактногоЛицаКлиентаЗавершение", ЭтотОбъект,
		ПараметрыОповещения);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаМастерВводаНового", 
		ПараметрыФормы, ЭтотОбъект,,,, 
		Оповещение);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_Запасы

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	ОбновитьИтоговуюСуммуНоменклатурыИДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	СтавкаНДСПоУмолчанию = УПДК_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Организация, "СтавкаНДСПоУмолчанию");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("ИспользоватьСтавкиНДС, СтавкаНДСПоУмолчанию", ИспользоватьСтавкиНДС, СтавкаНДСПоУмолчанию));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмерения");
	СтруктураДействий.Вставить("ПересчитатьЦену", Новый Структура("Дата, ВидЦены, ОбъектНедвижимости", Объект.Дата, Объект.ВидЦены, Объект.ОбъектНедвижимости));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС, ИспользоватьСтавкиНДС", Объект.ЦенаВключаетНДС, ИспользоватьСтавкиНДС));	
	СтруктураДействий.Вставить("ПересчитатьВсего", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));

	УПДК_ПродажиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВходитВСуммуНедвижимостиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура ("СтавкаНДС, ИспользоватьСтавкиНДС", Объект.СтавкаНДС, ИспользоватьСтавкиНДС));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС, ИспользоватьСтавкиНДС", Объект.ЦенаВключаетНДС, ИспользоватьСтавкиНДС));	
	СтруктураДействий.Вставить("ПересчитатьВсего", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));

	УПДК_ПродажиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС, ИспользоватьСтавкиНДС", Объект.ЦенаВключаетНДС, ИспользоватьСтавкиНДС));
	СтруктураДействий.Вставить("ПересчитатьВсего", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));

	УПДК_ПродажиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС, ИспользоватьСтавкиНДС", Объект.ЦенаВключаетНДС, ИспользоватьСтавкиНДС));	
	СтруктураДействий.Вставить("ПересчитатьВсего", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	
	УПДК_ПродажиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС, ИспользоватьСтавкиНДС", Объект.ЦенаВключаетНДС, ИспользоватьСтавкиНДС));
	СтруктураДействий.Вставить("ПересчитатьВсего", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	
	УПДК_ПродажиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС, ИспользоватьСтавкиНДС", Объект.ЦенаВключаетНДС, ИспользоватьСтавкиНДС));	
	СтруктураДействий.Вставить("ПересчитатьВсего", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	
	УПДК_ПродажиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_ЭтапыОплаты

&НаКлиенте
Процедура ЭтапыОплатыДанныеОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыОплаты.ТекущиеДанные;
	Если ТипДанныхОплатыБанковскийСчет(ТекущиеДанные.ФормаОплаты) Тогда
		Контрагенты = Новый Массив;
		Для Каждого СтрокаПодписантыКлиента Из Объект.ПодписантыКлиент Цикл
			Если ЗначениеЗаполнено(СтрокаПодписантыКлиента.Контрагент) Тогда
				Контрагенты.Добавить(СтрокаПодписантыКлиента.Контрагент);
			КонецЕсли;
		КонецЦикла;
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Контрагенты)));
		МассивПараметров.Добавить(Новый ПараметрВыбора("ТолькоПросмотр", Истина));
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров); 
	ИначеЕсли ТипДанныхТрейдИн(ТекущиеДанные.ФормаОплаты) Тогда  //Акзор ЭНКО-226
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("ОтборТрейдИн", Новый Структура("Клиент, Договор", Объект.Клиент, Объект.Ссылка)));
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров); 
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ТипДанныхТрейдИн(ФормаОплаты)//Акзор ЭНКО-226
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ФормаОплаты) Тогда
		Возврат ФормаОплаты.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ДоговорНаПокупкуПоОбмену")); 
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЭтапыОплатыДанныеОплатыСоздание(Элемент, СтандартнаяОбработка)
	
	ТД = Элементы.ЭтапыОплаты.ТекущиеДанные;
	
	// Определим, какой тип данных соответствует этой форме оплаты
	ОписаниеТипов = УПДК_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТД.ФормаОплаты, "ТипЗначения");	
	ТипДанных = ОписаниеТипов.Типы()[0];
	
	Если ТипДанных = Тип("ДокументСсылка.УПДК_КредитныйДоговор") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Клиент", Объект.Клиент);
		ЗначенияЗаполнения.Вставить("СуммаДокумента", ТД.СуммаПлатежа);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму("Документ.УПДК_КредитныйДоговор.ФормаОбъекта", ПараметрыФормы, 
			Элементы.ЭтапыОплатыДанныеОплаты,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатыПроцентОплатыПриИзменении(Элемент)
	
	ЭтапыГрафикаОплаты = Объект.ЭтапыОплаты;
	ТекущиеДанные = Элементы.ЭтапыОплаты.ТекущиеДанные;
	
	Если ТекущиеДанные.ПроцентОплаты > 0 И ЭтапыГрафикаОплаты.Итог("ПроцентОплаты") = 100 Тогда
		
		СуммаПлатежа = 0;
		Для Каждого ТекСтрока Из ЭтапыГрафикаОплаты Цикл
			Если ТекСтрока.НомерСтроки <> ТекущиеДанные.НомерСтроки Тогда
				СуммаПлатежа = СуммаПлатежа + ТекСтрока.СуммаПлатежа;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные.СуммаПлатежа = Объект.СуммаДокумента - СуммаПлатежа;
	Иначе
		
		ТекущиеДанные.СуммаПлатежа = Объект.СуммаДокумента * ТекущиеДанные.ПроцентОплаты / 100;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатыСуммаПлатежаПриИзменении(Элемент)
	
	ЭтапыГрафикаОплаты = Объект.ЭтапыОплаты;
	ТекущиеДанные = Элементы.ЭтапыОплаты.ТекущиеДанные;
	
	Если Объект.СуммаДокумента > 0 Тогда
		
		Если ТекущиеДанные.СуммаПлатежа > 0 И
			ЭтапыГрафикаОплаты.Итог("СуммаПлатежа") = Объект.СуммаДокумента Тогда
			
			ПроцентОплаты = 0;
			Для Каждого ТекСтрока Из ЭтапыГрафикаОплаты Цикл
				Если ТекСтрока.НомерСтроки <> ТекущиеДанные.НомерСтроки Тогда
					ПроцентОплаты = ПроцентОплаты + ТекСтрока.ПроцентОплаты;
				КонецЕсли;
			КонецЦикла;
			
			ТекущиеДанные.ПроцентОплаты = 100 - ПроцентОплаты;
			
		Иначе
			ТекущиеДанные.ПроцентОплаты = ТекущиеДанные.СуммаПлатежа * 100 / Объект.СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	КоличествоСтрокПлатежей = Объект.ЭтапыОплаты.Количество(); 
	Если КоличествоСтрокПлатежей > 0 Тогда
		
		НомерСтроки = ТекущиеДанные.НомерСтроки;
		
		Если НомерСтроки = КоличествоСтрокПлатежей Тогда
			
			РазницаВПроцентах = 100 - Объект.ЭтапыОплаты.Итог("ПроцентОплаты");
			РазницаВСумме = Объект.СуммаДокумента - Объект.ЭтапыОплаты.Итог("СуммаПлатежа");
			
			Объект.ЭтапыОплаты[0].СуммаПлатежа = Объект.ЭтапыОплаты[0].СуммаПлатежа + РазницаВСумме;
			Объект.ЭтапыОплаты[0].ПроцентОплаты = Объект.ЭтапыОплаты[0].ПроцентОплаты + РазницаВПроцентах;
			
		Иначе
			
			РазницаВПроцентах = 0;
			РазницаВСумме = 0;
			
			Для Счетчик = 0 По НомерСтроки - 1 Цикл
				
				РазницаВПроцентах = РазницаВПроцентах + Объект.ЭтапыОплаты[Счетчик].ПроцентОплаты;
				РазницаВСумме = РазницаВСумме + Объект.ЭтапыОплаты[Счетчик].СуммаПлатежа;
				
			КонецЦикла;
			
			РазницаВСумме =  Объект.СуммаДокумента - РазницаВСумме;
			Если РазницаВСумме <= 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указан слишком большой размер суммы'"));
				Возврат;
			КонецЕсли;
			РазницаВПроцентах = 100 - РазницаВПроцентах;
			
			МассивКоэфициентовСумм = Новый Массив;
			МассивКоэфициентовПроцентов = Новый Массив;
			
			Для Счетчик = НомерСтроки По КоличествоСтрокПлатежей - 1 Цикл
				
				МассивКоэфициентовСумм.Добавить(Объект.ЭтапыОплаты[Счетчик].СуммаПлатежа + 0.01);	
				МассивКоэфициентовПроцентов.Добавить(Объект.ЭтапыОплаты[Счетчик].ПроцентОплаты + 0.01);
				
			КонецЦикла;
			
			МассивИзмененныхСумм = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(РазницаВСумме, МассивКоэфициентовСумм);
			МассивИзмененныхПроцентов = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(РазницаВПроцентах, МассивКоэфициентовПроцентов);
			
			Для Счетчик = НомерСтроки По КоличествоСтрокПлатежей - 1 Цикл
				
				Объект.ЭтапыОплаты[Счетчик].СуммаПлатежа = МассивИзмененныхСумм.Получить(Счетчик - НомерСтроки);
				Объект.ЭтапыОплаты[Счетчик].ПроцентОплаты = МассивИзмененныхПроцентов.Получить(Счетчик - НомерСтроки);
				
			КонецЦикла; 			
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Элемент.ТекущаяСтрока);
	ОбновитьДанныеСтрокЭтаповОплаты(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатыДанныеОплатыПриИзменении(Элемент)
	
    ТД = Элемент.Родитель.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТД.ДанныеОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТД.ДанныеОплаты) = Тип("СправочникСсылка.ВидыГосударственныхСредств") Тогда
		
		ТекстСообщения = УПДК_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТД.ДанныеОплаты, "СодержаниеОповещения");
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(ТД.ДанныеОплаты) = Тип("СправочникСсылка.Банки") Тогда
		
		Объект.Банк = ТД.ДанныеОплаты;
		
	ИначеЕсли ТипЗнч(ТД.ДанныеОплаты) = Тип("ДокументСсылка.УПДК_КредитныйДоговор") И ЗначениеЗаполнено(ТД.ДанныеОплаты) Тогда
		
		Объект.Банк = ПолучитьБанкИзКредитногоДоговора(ТД.ДанныеОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы_Дополнительно

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ОбновитьСтавкиНДССуммыНДСНоменклатуры();
	ОбновитьИтоговуюСуммуНоменклатурыИДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Возврат;		
	КонецЕсли; 
	
	ВидЦеныПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидЦеныПриИзмененииНаСервере()

	Объект.ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЦены, "ЦенаВключаетНДС");	
	
	ОбновитьСтавкиНДССуммыНДСНоменклатуры();
	ОбновитьИтоговуюСуммуНоменклатурыИДокумента();
	
	УстановитьЗаголовкиСуммНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеИсторииПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Элемент.ЦветРамки = WebЦвета.Белый;
	Элемент.ЦветФонаЗаголовка =  WebЦвета.Белый;
	Элемент.ЦветФонаПодвала  =  WebЦвета.Белый;
	
	Браузер = Элементы.ПолеИстории.Документ;

	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		
		Если СтрНайти(ДанныеСобытия.href,"ПоказатьЕще") > 0 Тогда
			УПДК_ПоказатьЕщеНаСервере();
		ИначеЕсли СтрНайти(ДанныеСобытия.href,"ПоказатьВсе") > 0 Тогда
			УПДК_ПоказатьВсеНаСервере();
		ИначеЕсли СтрНайти(ДанныеСобытия.href,"e1cib") > 0 Тогда
			НавСсылка = Сред(ДанныеСобытия.href,СтрНайти(ДанныеСобытия.href,"e1cib"));
			Попытка
				ПерейтиПоНавигационнойСсылке(НавСсылка);
			Исключение
			КонецПопытки;
		Иначе
			РаботаСМессенджерамиКлиент.ОбработкаНажатияИсторияСобытий(ДанныеСобытия.href, Элементы.ПолеИстории, Объект.Клиент);
		КонецЕсли;
	КонецЕсли; 	
	
	Если ДанныеСобытия.Button <> Неопределено И СтрНайти(ДанныеСобытия.Button.outerHTML, "ОбновитьДиалоги") Тогда
		СписокИдентификаторов = РаботаСМессенджерамиКлиент.ПолучитьИдентификаторыРаскрытыхПереписок(Элементы.ПолеИстории, Элементы.ПолеИстории.Документ.body.innerHTML);		
		ИсторияСобытия = ОбновитьИсторию(Объект.Клиент, СписокИдентификаторов);	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПозвонитьОтправитьСМСАгенту(Команда)
	
	СписокЗначений = УПДК_ОбщегоНазначенияВызовСервера.ПолучитьСписокЗначенийДляЗвонкаСМС(Объект.Агент);
		
	ПозвонитьОтправитьСМСКлиентуАгенту(СписокЗначений, Объект.Агент, Элементы.ПозвонитьОтправитьСМСАгенту);
		
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьОтправитьСМСКлиенту(Команда)
	
	СписокЗначений = УПДК_ОбщегоНазначенияВызовСервера.ПолучитьСписокЗначенийДляЗвонкаСМС(Объект.Клиент);

	ПозвонитьОтправитьСМСКлиентуАгенту(СписокЗначений, Объект.Клиент, Элементы.ПозвонитьОтправитьСМСКлиенту);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафикуОплаты(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
		
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗаполнитьПоГрафикуОплатыЗавершение", ЭтотОбъект), "Не заполнен ""График оплаты""!");
		Возврат;
		
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоГрафикуОплатыЗавершениеВопрос", ЭтотОбъект), "Таблица ""Этапы оплат"" будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафикуОплатыЗавершениеВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоГрафикуОплатыСервер();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафикуОплатыЗавершение(ДополнительныеПараметры) Экспорт 	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодписантовСторона2(Команда)
	
	Если НомерПокупателей Тогда
	    ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПодписантовСторона2Завершение", ЭтотОбъект), "Карточки ""Подписанты покупателя"" будут удалены. Продолжить?", РежимДиалогаВопрос.ДаНет);	
	Иначе	
	    ЗаполнитьПодписантовСторона2Сервер();
		ОграничениеТипаСобственностиПоКоличествуПодписантов();
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодписантовСторона2Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПодписантовСторона2Сервер();
	ОграничениеТипаСобственностиПоКоличествуПодписантов();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодписантовСторона1(Команда)
	
	Если НомерПродавцов Тогда
	    ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПодписантовСторона1Завершение", ЭтотОбъект), "Карточки ""Подписанты продавца"" будут удалены. Продолжить?", РежимДиалогаВопрос.ДаНет);	
	Иначе	
	    ЗаполнитьПодписантовСторона1Сервер();
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодписантовСторона1Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПодписантовСторона1Сервер();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолиВРавныхДолях(Команда)
	
	ТекНомер = Прав(ТекущийЭлемент.Имя, СтрДлина(ТекущийЭлемент.Имя) - СтрДлина("Покупатель_ЗаполнитьДолю"));
	
	ВсегоПокупателей = 0;
	Для Инд = 1 По НомерПокупателей Цикл
		
		Если СписокУдаленныхПокупателей.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВсегоПокупателей = ВсегоПокупателей + 1;
		
	КонецЦикла;

	ЭтаФорма["Доля" + ТекНомер] = "1/" + ВсегоПокупателей;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьСкидкиНаценки(Команда)
//	ЗаполнитьСкидкиНаценкиНаСервере();
//КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоЗаказуОтвет", ЭтотОбъект);	
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные документа будут перезаполнены из Заказа клиента, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьПлатеж(Команда)
	
	Если Элементы.ЭтапыОплаты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазбитьПлатежЗавершение", ЭтотОбъект, Неопределено);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Сумма", Элементы.ЭтапыОплаты.ТекущиеДанные.СуммаПлатежа);	
	
	ОткрытьФорму("Документ.РеализацияНедвижимости.Форма.ФормаРазбиванияПлатежа", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОписаниеОповещения); 	
	
КонецПроцедуры

&НаСервере
Процедура КнопкаСохранитьНажатиеНаСервере()
	// Вставить содержимое обработчика.
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСохранитьНажатие(Элемент)
	КнопкаСохранитьНажатиеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеКомандаНажатие(Элемент)
	
	Элементы.ГруппаДобавить.Видимость = Не Элементы.ГруппаДобавить.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапланированноеСобытиеНажатие(Элемент)
	
	СтруктураОснование = Новый Структура;											
	СтруктураОснование.Вставить("Основание", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Основание, ИмяКоманды", СтруктураОснование, "ЗапланированноеСобытие");
	
	ОткрытьФорму("Документ.CRM_Событие.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Записать() Тогда
			Элементы.ГруппаДобавитьКомментарий.Видимость = Не Элементы.ГруппаДобавитьКомментарий.Видимость;
		КонецЕсли;	
	Иначе		
		Элементы.ГруппаДобавитьКомментарий.Видимость = Не Элементы.ГруппаДобавитьКомментарий.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСледуюийШагНажатие(Элемент)          
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ПослеВыбораСледШага", ЭтотОбъект), СледующийШаг, Элемент)
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомментарийКлиентаНаСервере()
	
	УПДК_События.ДобавитьКомментарийПоКлиенту(Объект.Клиент, Объект.Ссылка, КомментарийКлиента, Сделка);	
	Элементы.ГруппаДобавитьКомментарий.Видимость = Ложь;
	ИсторияСобытия = УПДК_События.СформироватьИсториюСобытияНовый(УПДК_ВсегоЗаписей, ЭтотОбъект, Объект.Клиент,, Сделка, УникальныйИдентификатор);	

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийКлиента(Команда)
	
	Если КомментарийКлиента <> "" Тогда
	    ДобавитьКомментарийКлиентаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Записать() Тогда
			ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
			CRM_БизнесПроцессыИЗадачиКлиент.СоздатьЛичнуюЗадачу(, ПараметрыФормы);
		КонецЕсли;	
	Иначе		
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		CRM_БизнесПроцессыИЗадачиКлиент.СоздатьЛичнуюЗадачу(, ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоручениеНажатие(Элемент)
	
	Если Не Записать() Тогда
	    Возврат;
	КонецЕсли;
	
	СтруктураОснования = Новый Структура("Основание,КартаМаршрута", Объект.Ссылка, ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
	ПараметрыФормы = новый Структура("Основание",СтруктураОснования);			
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПечатьНажатие(Элемент)
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектыПечати", ПараметрКоманды);
	Если ПараметрКоманды.Количество() = 1  ИЛИ Истина Тогда
		ОткрытьФорму("Обработка.УПДК_ПечатныеФормы.Форма.ФормаОдинОбъектПечати", 
			ПараметрыФормы, 
			ЭтаФорма, 
			УникальныйИдентификатор,, 
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВызватьИсключение(НСтр("ru = 'Данный функционал пока не доступен!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьНажатие(Элемент)
	
	Телефон = ПолучитьНомерТелефонаПартнера(Объект.Клиент);
	сфпСофтФонПроКлиент.ПоказатьСписокАТСПриЗвонке(Телефон, Объект.Клиент, ЭтаФорма, Элементы.Позвонить);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМСНажатие(Элемент)
	
	Если CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
	    Телефон = ПолучитьНомерТелефонаПартнера(Объект.Клиент);
				
		Если ПустаяСтрока(Телефон) Тогда
			Возврат; 
		КонецЕсли;
		
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.Клиент);
		Структура.Вставить("Телефон", смсОтправкаSMSЧерезSMS4B.смсУбратьЛишниеСимволыТелефона(Телефон));
		ПараметрыФормы = Новый Структура("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбъектНедвижимости(Команда)
	
	Если ИспользоватьНоменклатуру И Объект.Запасы.Количество() Тогда
		
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВыборНедвижимостиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, НСтр("ru = 'Табличная часть ""Товары"" будет очищена, продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Если УПДК_НедвижимостьВызовСервера.ОткрытьНовуюШахматку() Тогда
			ВыбраннаяФорма = "Обработка.ШахматкаНедвижимости.Форма.ШахматкаНовая";		
		Иначе		
			ВыбраннаяФорма = "Обработка.ШахматкаНедвижимости.Форма.Шахматка";
		КонецЕсли;	
		ОткрытьФорму(ВыбраннаяФорма, Новый Структура("РежимВыбора, ВыбиратьОбъектНедвижимости", Истина, Истина), Элементы.ОбъектНедвижимости,,,, Новый ОписаниеОповещения("ПриВыбореОбъектаНедвижимости", ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектНедвижимости(Команда)
	
	ОткрытьЗначение(Объект.ОбъектНедвижимости);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуммуНоменклатурыНажатие(Элемент)
	
	ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("КнопкаДобавить"));
	Цена = ЭтаФорма["Цена" + ТекНомер];
	Количество = ЭтаФорма["Количество" + ТекНомер];
	Если Цена <> 0 И Количество <> 0 Тогда
		ЭтаФорма["Цена" + ТекНомер] = 0;
		ЭтаФорма["Количество" + ТекНомер] = 0;
		Элементы["КнопкаДобавить" + ТекНомер].Видимость = Ложь;
		Элементы["ГруппаДобавлено" + ТекНомер].Видимость = Истина;
		НовСтрока = Объект.Запасы.Добавить();
		НовСтрока.Номенклатура = НомераНоменклатуры["Ном" + ТекНомер].Номенклатура;
		НовСтрока.ЕдиницаИзмерения = НомераНоменклатуры["Ном" + ТекНомер].ЕдиницаИзмерения;
		НовСтрока.Цена = Цена;
		НовСтрока.Количество = Количество;
		НовСтрока.Сумма = Цена * Количество;
		НовСтрока.Всего = НовСтрока.Сумма;
	    Элементы["ИтогЦена" + ТекНомер].Заголовок = Формат(НовСтрока.Сумма, "ЧДЦ=2");
		ОбновитьИтоговуюСуммуНоменклатурыИДокумента();
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура УбратьСуммуНоменклатурыНажатие(Элемент)
	
	ТекНомер = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("КнопкаУбрать"));
	Элементы["КнопкаДобавить" + ТекНомер].Видимость = Истина;
	Элементы["ГруппаДобавлено" + ТекНомер].Видимость = Ложь;
	Найденные = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура", НомераНоменклатуры["Ном" + ТекНомер].Номенклатура));
	Если Найденные.Количество() Тогда
		Объект.Запасы.Удалить(Объект.Запасы.Индекс(Найденные[0]));
	КонецЕсли;	    
	Элементы["ИтогЦена" + ТекНомер].Заголовок = "";
	ОбновитьИтоговуюСуммуНоменклатурыИДокумента()

КонецПроцедуры 

&НаКлиенте
Процедура ПредЗаказ(Команда)
	
	ЗначениеЗаполнения =  Новый Структура;
	ЗаполнитьЗначениеЗаполнения(Объект.ОбъектНедвижимости, ЗначениеЗаполнения);
	ЗначениеЗаполнения.Вставить("Организация", Объект.Организация); 
	ЗначениеЗаполнения.Вставить("ОбъектНедвижимости", Объект.ОбъектНедвижимости);
		
	ОткрытьФорму("Документ.УПДК_ПредварительныйЗаказКлиента.Форма.ФормаДокумента", Новый Структура("ЗначенияЗаполнения", ЗначениеЗаполнения));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаказКлиента(Команда)
	
	ОткрытьФорму("Документ.УПДК_КорректировкаЗаказаКлиента.Форма.ФормаДокумента", Новый Структура("Основание", Объект.ЗаказКлиента));
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьРасторжение(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ОткрытьФорму("Документ.УПДК_РасторжениеДоговора.Форма.ФормаДокумента", Новый Структура("Основание", Объект.Ссылка));
		
	Иначе
		
		Предупреждение("Не найден основной договор с клиентом!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродлитьБронь(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;   
	ПараметрыОткрытияФормы.Вставить("Основание", Объект.ЗаказКлиента);
	
	ОткрытьФорму("Документ.УПДК_КорректировкаЗаказаКлиента.ФормаОбъекта", ПараметрыОткрытияФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьБронь(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;   
	ПараметрыОткрытияФормы.Вставить("Основание", Объект.ЗаказКлиента);
	Форма = ОткрытьФорму("Документ.УПДК_КорректировкаЗаказаКлиента.ФормаОбъекта", ПараметрыОткрытияФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.Независимый);
	Форма.Объект.Закрыт = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АккредитивВходящий(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ОткрытьФорму("Документ.УПДК_АккредитивВходящий.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка));
		
	Иначе
		
		ОткрытьФорму("Документ.УПДК_АккредитивВходящий.ФормаОбъекта", Новый Структура("Основание", Объект.ЗаказКлиента));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередаточныйАкт(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ОткрытьФорму("Документ.УПДК_ПередаточныйАкт.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка));
		
	Иначе
		
		Предупреждение("Не найден основной договор с клиентом!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДоговорПереуступки(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда		
		ОткрытьФорму("Документ.УПДК_РегистрацияПереуступки.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка));				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказКлиента(Команда)
	
	
	//ЗАЧЕМ ТУТ ЭТА КОМАНДА?
	//ЗначениеЗаполнения =  Новый Структура;
	//ЗначениеЗаполнения.Вставить("ОбъектНедвижимости", Объект.ОбъектНедвижимости);
	//ЗначениеЗаполнения.Вставить("Организация", Объект.Организация);
	//
	//ПредварительныйЗаказКлиента = УПДК_НедвижимостьВызовСервера.ТекущийПредварительныйЗаказ(ТекущаяДата(), Объект.ОбъектНедвижимости);
	//
	//Если ПредварительныйЗаказКлиента.Пустая() Тогда 		
	//	ОткрытьФорму("Документ.УПДК_ЗаказКлиента.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначениеЗаполнения));		
	//ИначеЕсли УПДК_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ПредварительныйЗаказКлиента, "Ответственный") <> ПользователиКлиентСервер.ТекущийПользователь()
	//	И НЕ ПользователиРолиДоступны("УПДК_РазрешитьИзменятьДокументы") Тогда
	//	
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вам запрещено создавать бронь, так как Вы не являетесь ответственным за активной предварительной бронью!");
	//	
	//Иначе    		
	//	
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияПредупреждения", ЭтотОбъект, ПредварительныйЗаказКлиента); 
	//	ПоказатьПредупреждение(ОписаниеОповещения,"ВНИМАНИЕ! По данной недвижимости бронь будет заполнена по активной предварительной брони");
	//	
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПродавца(Команда)
	
	ДобавитьКарточкуПродавца();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПокупателя(Команда)
	
	ДобавитьКарточкуПокупателя();
	
	ОграничениеТипаСобственностиПоКоличествуПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьБронь(Команда)
	
	ОткрытьФорму("Документ.УПДК_ЗаказКлиента.Форма.ФормаВыбора", Новый Структура("РежимВыбора", Истина), Элементы.ЗаказКлиента,,,, Новый ОписаниеОповещения("ПриВыбореБрони", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБронь(Команда)
	
	ОткрытьЗначение(Объект.ЗаказКлиента);
	
КонецПроцедуры

#КонецОбласти

#Область БизнесПроцессыЗадачи

//Обработчики событий элементов формы

&НаКлиенте
Процедура УстановитьПодсказкуДляПоляБП()
	Если ИспользоватьБизнесПроцессы Тогда
		Если _ЕстьБизнесПроцессыДляВыбора Тогда
			Элементы._БизнесПроцесс.ПодсказкаВвода 
			= Нстр("ru = 'По клиенту есть несколько актуальных бизнес-процессов. Выберите один из них.'");
		Иначе
			Элементы._БизнесПроцесс.ПодсказкаВвода 
			= Нстр("ru = 'По клиенту нет актуальных бизнес-процессов.'");
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура _БизнесПроцессНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда 
		СтруктураОтбора = Новый Структура("Партнер, Стартован, Завершен, ПометкаУдаления",Объект.Клиент, Истина, Ложь, Ложь);
	Иначе
		СтруктураОтбора = Новый Структура("Стартован, Завершен, ПометкаУдаления", Истина, Ложь, Ложь);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	Если ЗначениеЗаполнено(ЭтаФорма._БизнесПроцесс) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ЭтаФорма._БизнесПроцесс);
	КонецЕсли;
	
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСписка",ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура _БизнесПроцессОчистка(Элемент, СтандартнаяОбработка)
	
	ЭтаФорма._БизнесПроцессСтр = "";
		
	Если ЭтаФорма._ЕстьСвязьСБизнесПроцессом Тогда
		
		СвязатьСБизнесПроцессом(Истина);
		СвязатьСБизнесПроцессомБезЗадачи(Истина);
		ЭтаФорма._ЕстьСвязьСБизнесПроцессом = Ложь;
		
	КонецЕсли;
		
	ЭтаФорма._БизнесПроцесс	= ПредопределенноеЗначение("БизнесПроцесс.CRM_БизнесПроцесс.ПустаяСсылка");
	ЭтаФорма._Задача		= ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");

	ПриИзмененииЗадачи();
	УстановитьСвойстваЭлементовГруппыБизнесПроцесс(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура _БизнесПроцессОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ЭтаФорма._БизнесПроцесс) Тогда
		ПоказатьЗначение(, ЭтаФорма._БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура _БизнесПроцессОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ЭтаФорма._БизнесПроцесс Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		СтандартнаяОбработка = Ложь;
		
		ЭтаФорма._БизнесПроцессСтр = СформироватьПредставлениеБизнесПроцесса(ВыбранноеЗначение);
		ЭтаФорма._БизнесПроцесс = ВыбранноеЗначение;
		ЭтаФорма._ЕстьСвязьСБизнесПроцессом = Ложь;
		
		Если ЗначениеЗаполнено(ЭтаФорма._БизнесПроцесс) Тогда
			ЭтаФорма._Задача = ПолучитьЗадачуБизнесПроцесса();
		Иначе
			ЭтаФорма._Задача = ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
		КонецЕсли;
		
		ПриИзмененииЗадачи();
		УстановитьСвойстваЭлементовГруппыБизнесПроцесс(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура _ЗадачаПриИзменении(Элемент)
	
	ПриИзмененииЗадачи();
	УстановитьСвойстваЭлементовГруппыБизнесПроцесс(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура _ЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура("БизнесПроцесс",ЭтаФорма._БизнесПроцесс);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаВыбора",ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура _ЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура _ЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ЭтаФорма._Задача Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		ЭтаФорма._ЕстьСвязьСБизнесПроцессом = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//Обработчики команд формы
&НаКлиенте
Процедура ВывестиСписокВведенныхНаОсновании(Команда)
	
	СтруктураОтбора = Новый Структура("Предмет", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	Если ЗначениеЗаполнено(ЭтаФорма._БизнесПроцесс) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ЭтаФорма._БизнесПроцесс);
	КонецЕсли;
	
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСписка",ПараметрыФормы,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеЗадачи(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача",ЭтаФорма._Задача);
	ОткрытьФорму("ОбщаяФорма.CRM_ОписаниеЗадачи",ПараметрыФормы,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьКБизнесПроцессу(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Связать"" возможно только после записи данных.
			|Данные будут записаны.'");
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Если Результат <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СвязатьСБизнесПроцессом();
	СвязатьСБизнесПроцессомБезЗадачи();
	ЭтаФорма._ЕстьСвязьСБизнесПроцессом = Истина;
	УстановитьСвойстваЭлементовГруппыБизнесПроцесс(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьЗадачу(Команда)
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(ЭтаФорма._Задача);
	
	БизнесПроцессыИЗадачиКлиент.ПринятьЗадачиКИсполнению(МассивЗадач);
	
	Элементы.ПринятьЗадачу.Доступность = Ложь;
	
КонецПроцедуры

//Служебный процедуры и функции

&НаСервере
Процедура ЗаполнитьГруппуБизнесПроцесс()
	УПДК_БизнесПроцессыИЗадачи.ЗаполнитьГруппуБизнесПроцесс(ЭтотОбъект, Объект.ЗаказКлиента);		
КонецПроцедуры 

&НаСервере
Функция ПолучитьЗадачуБизнесПроцесса()
	Возврат УПДК_БизнесПроцессыИЗадачи.ПолучитьЗадачуБизнесПроцесса(ЭтотОбъект);	
КонецФункции 

&НаСервере
Процедура ПриИзмененииЗадачи()
	УПДК_БизнесПроцессыИЗадачи.ПриИзмененииЗадачи(ЭтотОбъект);	
КонецПроцедуры

&НаСервере
Процедура СвязатьСБизнесПроцессом(УдалитьСвязь = Ложь)
	УПДК_БизнесПроцессыИЗадачи.СвязатьСБизнесПроцессом(УдалитьСвязь, ЭтотОбъект);	
КонецПроцедуры

&НаСервере
Процедура СвязатьСБизнесПроцессомБезЗадачи(УдалитьСвязь = Ложь)
	УПДК_БизнесПроцессыИЗадачи.СвязатьСБизнесПроцессомБезЗадачи(УдалитьСвязь, ЭтотОбъект);			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовГруппыБизнесПроцесс(ЭтотОбъект)
	
	Элементы = ЭтотОбъект.Элементы;
	
	Элементы.ПривязатьКБизнесПроцессу.Доступность			= НЕ ЭтотОбъект._ЕстьСвязьСБизнесПроцессом И ЗначениеЗаполнено(ЭтотОбъект._БизнесПроцесс);
	Элементы.ПринятьЗадачу.Доступность						= ЭтотОбъект._ЗадачаДоступноПользователю И ЭтотОбъект._ЗадачаПринятьКИсполнению И ЭтотОбъект._ЗадачаВыполнить;
	Элементы.ЗадачаЗадачаИсполнителяВыполнено.Доступность	= ЭтотОбъект._ЗадачаДоступноПользователю И ЭтотОбъект._ЗадачаВыполнить;
		
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеБизнесПроцесса(ВыбранноеЗначение)
	
	Возврат "["+ Формат(ВыбранноеЗначение.Дата,"ДЛФ=D") + "]: " + ВыбранноеЗначение.Наименование;
	
КонецФункции

#КонецОбласти

#Область Анкетирование

&НаСервере
Функция ОбновитьАнкетирование()
	УПДК_Анкетирование.ОбновитьЭлементыФормы(ЭтотОбъект, "ГруппаАнкетирование");
КонецФункции 

&НаКлиенте
Процедура Подключаемый_НовоеАнкетирование(Команда) Экспорт	
	УПДК_АнкетированиеКлиент.НовоеАнкетирование(ЭтотОбъект, Команда);	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьАнкетирование(Команда) Экспорт
	УПДК_АнкетированиеКлиент.ИзменитьАнкетирование(ЭтотОбъект, Команда);	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда) Экспорт
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда) Экспорт
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств() Экспорт
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.ГруппаАгентПозвонить.Доступность = ЗначениеЗаполнено(Объект.АгентствоНедвижимости);	
	Элементы.ГруппаВступительныйВзносЖСК.Видимость = ТипДоговора = ПредопределенноеЗначение("Перечисление.УПДК_ТипыДоговоров.ЖСК");	
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровСПокупателями.Отменен") Тогда
		ДатаПодписанияЗаголовок = НСтр("ru = 'Дата отмены'");
	Иначе
		ДатаПодписанияЗаголовок = НСтр("ru = 'Дата подписания'");
	КонецЕсли;
	
	Если Не ИспользоватьСвязанныеОбъекты Тогда 
		Элементы.СтраницаСвязанныеОбъекты.Видимость = Ложь;
	Иначе
		Элементы.СтраницаСвязанныеОбъекты.Видимость = ЕстьСвязанныеОбъекты(Объект.Ссылка, Объект.ЗаказКлиента);;
	КонецЕсли;
	
	//Элементы.ДатаДоговора.Заголовок = ДатаПодписанияЗаголовок;
	СтатусОтменен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровСПокупателями.Отменен");
	СтатусПодписан = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровСПокупателями.Подписан");
	//Элементы.ДатаДоговора.АвтоОтметкаНезаполненного = СтатусОтменен ИЛИ СтатусПодписан;														 
	
	Если ЗначениеЗаполнено(Объект.ПричинаОтказа) Тогда
		
		ИспользоватьХарактеристики = УПДК_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ПричинаОтказа, "УПДК_ИспользоватьХарактеристики"); 		
		Элементы.ХарактеристикаПричиныОтказа.ОтметкаНезаполненного = ИспользоватьХарактеристики;		
		Элементы.ХарактеристикаПричиныОтказа.АвтоОтметкаНезаполненного = ИспользоватьХарактеристики;
		Элементы.ХарактеристикаПричиныОтказа.Доступность = ИспользоватьХарактеристики;
		
	Иначе
		
		Элементы.ХарактеристикаПричиныОтказа.ОтметкаНезаполненного = Ложь;		
		Элементы.ХарактеристикаПричиныОтказа.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ХарактеристикаПричиныОтказа.Доступность = Ложь;
		
	КонецЕсли;
	
	Элементы.ПричинаОтказа.Видимость = СтатусОтменен; 	
	
	Элементы.ПреобразоватьВДКП.Видимость = Объект.ВидПравовогоДокумента.ТипДоговора = ПредопределенноеЗначение("Перечисление.УПДК_ТипыДоговоров.ПДКП");
	
	УправлениеВидимостьюКомпенсационногоФонда();
	
	СледующийШаг.Очистить();
	//Если СтатусНедвижимости = ПредопределенноеЗначение("Перечисление.УПДК_СтатусыНедвижимости.Забронировано") И НЕ СвязанныйОбъект Тогда
	//    СледующийШаг.Добавить("ОформитьДоговор", "Договор");
	//КонецЕсли;
	Если СтатусНедвижимости = ПредопределенноеЗначение("Перечисление.УПДК_СтатусыНедвижимости.Свободно") И НЕ СвязанныйОбъект Тогда 
		СледующийШаг.Добавить("ОформитьЗаказКлиента", "Забронировать");
	КонецЕсли;
	Если СтатусНедвижимости = ПредопределенноеЗначение("Перечисление.УПДК_СтатусыНедвижимости.НаОформлении") И Долг = 0 И НЕ СвязанныйОбъект Тогда
	    СледующийШаг.Добавить("ОформитьДоговорПереуступки", "Оформить договор переуступки");
	КонецЕсли;	
	Если СтатусНедвижимости = ПредопределенноеЗначение("Перечисление.УПДК_СтатусыНедвижимости.НаОформлении") И Долг = 0 И КлючиГотовыКВыдаче И НЕ СвязанныйОбъект Тогда
	    СледующийШаг.Добавить("ПередаточныйАкт", "Передаточный акт");
	КонецЕсли;
	Если СтатусНедвижимости = ПредопределенноеЗначение("Перечисление.УПДК_СтатусыНедвижимости.НаОформлении") И НЕ ЕстьПереуступка И НЕ СвязанныйОбъект Тогда
	    СледующийШаг.Добавить("ОформитьРасторжение", "Расторжение договора");
	КонецЕсли;
	Если СтатусНедвижимости = ПредопределенноеЗначение("Перечисление.УПДК_СтатусыНедвижимости.Забронировано") И НЕ СвязанныйОбъект Тогда
	    СледующийШаг.Добавить("ИзменитьЗаказКлиента", "Изменить бронь");
	КонецЕсли;
	Если СтатусНедвижимости = ПредопределенноеЗначение("Перечисление.УПДК_СтатусыНедвижимости.Забронировано") И НЕ СвязанныйОбъект Тогда
		СледующийШаг.Добавить("СнятьБронь", "Снять бронь");
	    СледующийШаг.Добавить("ПродлитьБронь", "Продлить бронь");	
	КонецЕсли;	
	Если НЕ СтатусНедвижимости = ПредопределенноеЗначение("Перечисление.УПДК_СтатусыНедвижимости.НеДляПродажи") И
		 НЕ СтатусНедвижимости = ПредопределенноеЗначение("Перечисление.УПДК_СтатусыНедвижимости.Продано") И НЕ СвязанныйОбъект Тогда
	    СледующийШаг.Добавить("ПредЗаказ", "Предварительная бронь");
	КонецЕсли;
	Если (СтатусНедвижимости = ПредопределенноеЗначение("Перечисление.УПДК_СтатусыНедвижимости.НаОформлении")) И НЕ СвязанныйОбъект Тогда
	    СледующийШаг.Добавить("АккредитивВходящий", "Входящий аккредитив");
	КонецЕсли;
	Если СледующийШаг.Количество() Тогда
	    Элементы.КнопкаСледуюийШаг.Видимость = Истина;
	Иначе 	
	    Элементы.КнопкаСледуюийШаг.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюКомпенсационногоФонда()
	
	Элементы.ГрКомпенсационныйФонд.Видимость = УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ИспользованиеКомпенсационногоФонда");
	Если Элементы.ГрКомпенсационныйФонд.Видимость Тогда
		
		ДатаИспользованияКомпенсационногоФонда = УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ДатаИспользованияКомпенсационногоФонда");
		
		мДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
		
		Элементы.ГрКомпенсационныйФонд.Видимость = мДата > ДатаИспользованияКомпенсационногоФонда;
		
		Если Элементы.ГрКомпенсационныйФонд.Видимость Тогда
			
			Элементы.дСданоНаРегистрацию.Видимость = Ложь;
							
				Если ЗначениеЗаполнено(Объект.ВидПравовогоДокумента) Тогда
					
					Если Объект.ВидПравовогоДокумента.ТипДоговора = Перечисления.УПДК_ТипыДоговоров.ДДУ Тогда
						
						Если Объект.ОбъектНедвижимости.Объект.ИспользованиеКомпенсационногоФонда Тогда
							
							Элементы.дСданоНаРегистрацию.Видимость = Истина;
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
							"ВЫБРАТЬ
							|	ЕСТЬNULL(КомпенсационныйФондОстатки.СуммаОстаток, 0) КАК ОбщееСостояние,
							|	ЕСТЬNULL(КомпенсационныйФондОстатки1.СуммаОстаток, 0) КАК СданоНаРегистрацию
							|ИЗ
							|	(ВЫБРАТЬ
							|		1 КАК ПростоПоле) КАК ВложенныйЗапрос
							|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КомпенсационныйФонд.Остатки(, Застройщик = &Застройщик) КАК КомпенсационныйФондОстатки
							|		ПО (КомпенсационныйФондОстатки.ВариантУчета = &ОбщееСостояние)
							|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КомпенсационныйФонд.Остатки(, Застройщик = &Застройщик) КАК КомпенсационныйФондОстатки1
							|		ПО (КомпенсационныйФондОстатки1.ВариантУчета = &СданоНаРегистрацию)";
							
							Запрос.УстановитьПараметр("Застройщик", Объект.Организация); 							
							Запрос.УстановитьПараметр("ОбщееСостояние", Перечисления.ВариантыУчетаКомпенсационногоФонда.ОбщийОстаток);
							Запрос.УстановитьПараметр("СданоНаРегистрацию", Перечисления.ВариантыУчетаКомпенсационногоФонда.СданоНаРегистрацию);
							
							УстановитьПривилегированныйРежим(Истина);					
							РезультатЗапроса = Запрос.Выполнить();
							УстановитьПривилегированныйРежим(Ложь);
							
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							
							Если ВыборкаДетальныеЗаписи.Следующий() Тогда
								
								Элементы.дОбщееСостояние.Заголовок 	   = Формат(ВыборкаДетальныеЗаписи.ОбщееСостояние, "ЧДЦ=2; ЧН=0,00; ЧГ=3,0");
								Элементы.дСданоНаРегистрацию.Заголовок = СтрШаблон("(На регистрации: %1)",Формат(ВыборкаДетальныеЗаписи.СданоНаРегистрацию, "ЧДЦ=2; ЧН=0,00; ЧГ=3,0"));					
								
							Иначе
								
								Элементы.дОбщееСостояние.Заголовок 	   = "0,00";
								Элементы.дСданоНаРегистрацию.Заголовок = "(На регистрации: 0,00)";					
								
							КонецЕсли;
							
						Иначе							
							Элементы.дОбщееСостояние.Заголовок = "Для данного объекта строительства не используется";							
						КонецЕсли;
						
					Иначе						
						Элементы.дОбщееСостояние.Заголовок = "Для данного вида документа не используется";						
					КонецЕсли; 				
					
				Иначе					
					Элементы.дОбщееСостояние.Заголовок = "Не выбран вид документа";					
				КонецЕсли;
							
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКонтактаКлиента()
	
	Элементы.ГрКонтакт.Видимость = ЗначениеЗаполнено(Объект.Клиент) И РегистрыСведений.СтатусыКлиентов.ПолучитьСтатусКлиента(Объект.Клиент) <> ПредопределенноеЗначение("Перечисление.СтатусыКлиента.Клиент");
	Элементы.ГруппаКлиентПозвонить.Видимость = НЕ Элементы.ГрКонтакт.Видимость;
	КлиентКонтакт = Строка(Объект.Клиент);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	НовыйФорматПримененияСкидок = Константы.НовыйФорматПримененияСкидок.Получить();
	
	ДатаБрони = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказКлиента, "Дата");
	
	ИдентификаторДокумента = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.РеализацияНедвижимости");
	ПлощадьНедвижимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектНедвижимости, "ОбщаяПлощадьДляЦен");
	
	Если ЗначениеЗаполнено(Объект.ВидПравовогоДокумента) Тогда
		ТипДоговора = Объект.ВидПравовогоДокумента.ТипДоговора;
	КонецЕсли;
	
	ИспользоватьРегистрациюДокуметов = ПолучитьФункциональнуюОпцию("УПДК_ИспользоватьРегистрациюДокументов");
	
	ИспользоватьСвязанныеОбъекты = ПолучитьФункциональнуюОпцию("ИспользоватьСвязанныеОбъекты"); 
	
	Если ИспользоватьРегистрациюДокуметов Тогда
		Элементы.СостояниеРегистрации.Видимость = Истина;
		СостояниеРегистрации = УПДК_РегистрацияДокументов.ТекстСостоянияГосРегистрацииДокумента(Объект.Ссылка, Ложь);
	КонецЕсли;

	СуммаБезСкидки = Объект.СуммаБезСкидки;
	ПараметрыРасчетаЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЦены, "ПараметрыРасчетаЦен");
	Если ЗначениеЗаполнено(ПараметрыРасчетаЦен) Тогда
		ЗначенияРеквизитовЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыРасчетаЦен, "ТочностьОкругления, ОкруглятьВБольшуюСторону, ОбъектОкругления");
		Если ЗначенияРеквизитовЦен.ОбъектОкругления = Перечисления.УПДК_ОбъектыОкругления.СтоимостьНедвижимости Тогда
			СуммаБезСкидки = УПДК_ЦенообразованиеКлиентСеврер.ОкруглитьЦену(СуммаБезСкидки, ЗначенияРеквизитовЦен.ТочностьОкругления, ЗначенияРеквизитовЦен.ОкруглятьВБольшуюСторону);
		КонецЕсли;			
	КонецЕсли;	
	
	СуммаСкидкиНаценки = СуммаБезСкидки - Объект.Сумма;	
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	ГруппаЭтапа = УПДК_БизнесПроцессыИЗадачиКлиентСервер.ГруппаЭтапаБизнесПроцессаСоглавание(Объект.Ссылка);
	
	ИспользоватьНоменклатуру = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуру");
	ИспользованиеБизнесПроцессаСогласование = УПДК_БизнесПроцессыИЗадачиПовтИсп.ИспользованиеБизнесПроцессаСогласование(ГруппаЭтапа);
	ИспользованиеСогласованиеДокументов		= УПДК_БизнесПроцессыИЗадачиПовтИсп.ИспользоватьСогласованиеДляДокумента(ИдентификаторДокумента);
	ИспользоватьСтавкиНДС = CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(Объект.Организация, Объект.Дата);
	
	Элементы.ГруппаСтоимостьНоменклатуры.Видимость = ИспользоватьНоменклатуру; 
	
	//РучнаяСкидкаПроцентом = Объект.ВидСкидки = ПредопределенноеЗначение("Перечисление.УПДК_ВидыСкидок.Процентом");
	//Элементы.СимволПроцентаРучнойСкидки.Видимость = РучнаяСкидкаПроцентом; 
	//Элементы.ВалютаРучнойСкидки.Видимость = НЕ РучнаяСкидкаПроцентом; 
	
	ИспользоватьСкидкиНаценки = ПолучитьФункциональнуюОпцию("ИспользоватьСкидкиНаценки");
	//Элементы.СтраницаСкидкиИНаценки.Видимость = ИспользоватьСкидкиНаценки;
	Если ИспользоватьСкидкиНаценки Тогда
		
		ИспользоватьРучныеСкидкиНаценки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценки");
		ИспользоватьУправляемыеСкидкиНаценки = ПолучитьФункциональнуюОпцию("ИспользоватьУправляемыеСкидкиНаценки");
		
		Если ИспользоватьРучныеСкидкиНаценки Тогда			
			Элементы.ГруппаРучнаяСкидка.ТолькоПросмотр = НЕ Пользователи.РолиДоступны("УПДК_РазрешитьУстанавливатьРучныеСкидки");			
		КонецЕсли;
		
		Если ИспользоватьУправляемыеСкидкиНаценки Тогда
			ЗаполнитьСкидкиНаСервере();
			ОбновитьДоступностьСкидокНаСервере();
		КонецЕсли;
		
		УстановитьЗаголовокСкидкиНаценки(ТаблицаСкидокНаценок, ЗаголовокСкидкиНаценки);		
		
	КонецЕсли;


	Если ИспользованиеБизнесПроцессаСогласование Или ИспользованиеСогласованиеДокументов Тогда
		
		Элементы.СтатусСогласования.Видимость = Истина;
		
		ДанныеСостояния = УПДК_БизнесПроцессыИЗадачи.СостояниеСогласованияОбъекта(Объект.Ссылка);
		
		СтадияСогласования = ДанныеСостояния.СтадияСогласования;
		
		ВПроцессеСогласования = СтадияСогласования = Перечисления.УПДК_СтадииПроцессаСогласования.ВПроцессеСогласования; 
		НеПроходилСогласование = СтадияСогласования = Перечисления.УПДК_СтадииПроцессаСогласования.НеПроходилСогласование;
		
		Если Не Объект.Ссылка.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИсторияСогласования, "ПроцессСогласованияДокумент", Объект.Ссылка);
		КонецЕсли;
		
		Если Объект.Ссылка.Пустая() Или НеПроходилСогласование Тогда
			
			СтатусСогласования = "ВНИМАНИЕ! Документ не согласован";
			
			Элементы.СтраницаСогласование.Видимость = Ложь;
			Элементы.ГруСтрСогласование.Видимость = Ложь;
			Элементы.СтатусСогласования.Гиперссылка = ИспользованиеБизнесПроцессаСогласование;
			
		Иначе
			
			ПроцессСогласованияЗадача = ДанныеСостояния.ЗадачаПроцессаСогласования;
			
			ПроцессСогласованияЗадачаТочкаМаршрута = ДанныеСостояния.ТочкаМаршрута;
			
			СтатусСогласования = ДанныеСостояния.ТекстСтатусаСогласования;
			
			ДоступностьФормы = (ПроцессСогласованияЗадача.ПринятаКИсполнению 
									И ПроцессСогласованияЗадача.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь()) 
									Или РольДоступна("ПолныеПрава");
			
			Элементы.СтраницаСогласование.Видимость = Истина;
			Элементы.ГруСтрСогласование.Видимость = Истина;
			
			Элементы.ГруппаПроцессСогласованияЗадача.Видимость = ВПроцессеСогласования;
			
			Элементы.СтатусСогласования.ЦветТекста = УПДК_БизнесПроцессыИЗадачиКлиентСервер.ПолучитьЦветСтатусаСогласования(ДанныеСостояния.СтатусСогласования);
			
			Элементы.СтатусСогласования.Гиперссылка = Ложь;
			
			//ЭтотОбъект.ТолькоПросмотр = НЕ ДоступностьФормы;
			
		КонецЕсли;
				
	КонецЕсли;
	
	//Анкетирование
	УПДК_Анкетирование.ОбновитьЭлементыФормы(ЭтотОбъект, "ГруппаАнкетирование");
	//Конец Анкетирование	
	
	
	ЗаполнитьСкидкиНаценки();
	ОбновитьДанныеСтрокЭтаповОплаты();
	ОбновитьДоступностьСкидокНаСервере();
	ОбновитьЦенуНедвижимости();
	ОбновитьИтоговуюСуммуНоменклатуры();
	ОбновитьИтоговуюСуммуНДСНоменклатуры();
	УстановитьЗаголовкиСуммНДС();
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, Неопределено);
	
	//Бизнес-процессы
	ИспользоватьБизнесПроцессы	= ПолучитьФункциональнуюОпцию("CRM_ИспользоватьБизнесПроцессы");
	ЗаполнитьГруппуБизнесПроцесс();
	//Конец бизнес-процессы
	
	УстановитьВозможностьРедактированияЦенНоменклатуры();
		
	УправлениеФормой();
	
	УстановитьВидимостьКонтактаКлиента();
	
	//Если Элементы.тЗадолженность.Видимость Тогда
	//	
	//	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.УПДК_Взаиморасчеты) Тогда
	//		
	//		ЭтаФорма.Элементы.тЗадолженность.Видимость = Истина;
	//		
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	УПДК_НедвижимостьСрезПоследних.Договор КАК Договор
	//		|ИЗ
	//		|	РегистрСведений.УПДК_Недвижимость.СрезПоследних(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_НедвижимостьСрезПоследних
	//		|ГДЕ
	//		|	УПДК_НедвижимостьСрезПоследних.Договор = &Договор
	//		|	И УПДК_НедвижимостьСрезПоследних.Договор <> ЗНАЧЕНИЕ(Документ.РеализацияНедвижимости.ПустаяСсылка)";
	//		
	//		Запрос.УстановитьПараметр("Договор", Объект.Ссылка);
	//		Запрос.УстановитьПараметр("ОбъектНедвижимости", Объект.ОбъектНедвижимости);
	//		
	//		РезультатЗапроса = Запрос.Выполнить();
	//		
	//		Если РезультатЗапроса.Пустой() Тогда
	//			
	//			Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Договор не действителен'");
	//			Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	//			
	//		Иначе
	//			
	//			Долг = УПДК_ДенежныеСредства.СуммаВзаиморасчетовДоговора(Объект.Ссылка);
	//			ДолгПоГрафику = УПДК_ДенежныеСредства.СуммаВзаиморасчетовДоговораПоГрафику(Объект.Ссылка); 
	//			
	//			Если Долг = 0 Тогда
	//				
	//				Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Задолженности нет'");
	//				Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	//				
	//			ИначеЕсли Долг > 0 Тогда
	//				
	//				Если ДолгПоГрафику > 0 Тогда
	//					
	//					Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Просрочено: '") + Формат(ДолгПоГрафику, "ЧДЦ=2; ЧН=0,00") + 
	//					НСтр("ru = '. Остаток: '") + Формат(?(Долг < 0, -Долг, Долг), "ЧДЦ=2; ЧН=0,00");
	//					Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	//					
	//				Иначе
	//					
	//					Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Остаток: '") + Формат(?(Долг < 0, -Долг, Долг), "ЧДЦ=2; ЧН=0,00");
	//					Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	//				КонецЕсли;
	//				
	//			Иначе
	//				
	//				Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Переплата: '") + Формат(-Долг, "ЧДЦ=2; ЧН=0,00");
	//				Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийТекст; 					
	//				
	//			КонецЕсли;	
	//			
	//		КонецЕсли;
	//		
	//	Иначе
	//		Элементы.тЗадолженность.Видимость = Ложь;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		КлиентФизлицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Клиент, "CRM_ФизЛицо");
		ВидПартнера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Клиент, "ВидПартнера");
	Иначе 
		ВидПартнера = Неопределено;		
	КонецЕсли;
	
	Если УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("D4_ИспользоватьСебестоимость") Тогда
		
		Если Не ЗначениеЗаполнено(Объект.D4_ВознаграждениеЗастройщика) Тогда
			ПерезаполнитьВознаграждениеНаСервере();
		Иначе
			Себестоимость = Объект.СуммаДокумента - Объект.D4_ВознаграждениеЗастройщика; 		
		КонецЕсли;
		Элементы.Себестоимость.Видимость = Истина;
		
	КонецЕсли;
	
	ЗаполнитьОплаченоДолгПоЭтапам();
	
	Если Объект.Пени <> 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПениОбороты.СуммаОборот КАК СуммаОборот
		|ИЗ
		|	РегистрНакопления.Пени.Обороты(, , , Договор = &Договор) КАК ПениОбороты";
		
		Запрос.УстановитьПараметр("Договор", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Элементы.ПениОплачены.Заголовок = "Пени не оплачены";
		Иначе	
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Если ВыборкаДетальныеЗаписи.СуммаОборот <= 0 Тогда
				Элементы.ПениОплачены.Заголовок = "Пени оплачены";
			Иначе	
				Элементы.ПениОплачены.Заголовок = "Пени не оплачены";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ПениОплачены.Заголовок = "";	
	КонецЕсли;

	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПДК_НедвижимостьСрезПоследних.Договор КАК Договор,
		|	УПДК_НедвижимостьСрезПоследних.СтатусНедвижимости КАК Статус,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НедвижимостьПереуступленнаяОстатки.КоличествоОстаток, 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьПереуступка,
		|	НедвижимостьПереуступленнаяОстатки.ОбъектНедвижимости.ВидНедвижимости.СвязанныйОбъект КАК СвязанныйОбъект,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НедвижимостьКВыдачеКлючейОстатки.КоличествоОстаток, 0) = 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КлючиГотовыКВыдаче
		|ИЗ
		|	РегистрСведений.УПДК_Недвижимость.СрезПоследних(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_НедвижимостьСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПДК_НедвижимостьПереуступленная.Остатки(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК НедвижимостьПереуступленнаяОстатки
		|		ПО УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости = НедвижимостьПереуступленнаяОстатки.ОбъектНедвижимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПДК_НедвижимостьНаРасторжении.Обороты(, , Авто, ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_НедвижимостьНаРасторженииОбороты
		|		ПО УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости = УПДК_НедвижимостьНаРасторженииОбороты.ОбъектНедвижимости
		|			И УПДК_НедвижимостьСрезПоследних.Договор = УПДК_НедвижимостьНаРасторженииОбороты.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПДК_НедвижимостьКВыдачеКлючей.Остатки(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК НедвижимостьКВыдачеКлючейОстатки
		|		ПО УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости = НедвижимостьКВыдачеКлючейОстатки.ОбъектНедвижимости";
	
	Запрос.УстановитьПараметр("ОбъектНедвижимости", Объект.ОбъектНедвижимости);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ЕстьПереуступка = ВыборкаДетальныеЗаписи.ЕстьПереуступка;		
		СтатусНедвижимости = ВыборкаДетальныеЗаписи.Статус;
		СвязанныйОбъект = ВыборкаДетальныеЗаписи.СвязанныйОбъект;	
		КлючиГотовыКВыдаче = ВыборкаДетальныеЗаписи.КлючиГотовыКВыдаче;
		Долг = УПДК_ДенежныеСредства.СуммаВзаиморасчетовДоговора(ВыборкаДетальныеЗаписи.Договор);
	КонецЕсли;
	
	Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(Объект.ЗаказКлиента);
	
	Если ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
		Элементы.ГруппаПустаяБронь.Видимость = Ложь;
		Элементы.ГруппаЗаполненнаяБронь.Видимость = Истина;
	Иначе
		Элементы.ГруппаПустаяБронь.Видимость = Истина;
		Элементы.ГруппаЗаполненнаяБронь.Видимость = Ложь;		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаявкаНаОткрытиеСчетаЭскроу.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧерновикаЗаявкиНаОткрытиеСчетовЭскроу.Отозван) КАК Отозван,
		|	ЗаявкаНаОткрытиеСчетаЭскроу.СтатусБанка КАК СтатусБанка,
		|	ЗаявкаНаОткрытиеСчетаЭскроу.СтатусСчета КАК СтатусСчета
		|ИЗ
		|	Документ.ЗаявкаНаОткрытиеСчетаЭскроу КАК ЗаявкаНаОткрытиеСчетаЭскроу
		|ГДЕ
		|	ЗаявкаНаОткрытиеСчетаЭскроу.Основание = &Ссылка
		|	И НЕ ЗаявкаНаОткрытиеСчетаЭскроу.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявкаНаОткрытиеСчетаЭскроу.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();  
	
	Если РезультатЗапроса.Пустой() Тогда
	    Элементы.ГруппаСтатусыЭскроу.Видимость = Ложь;
	Иначе	
		Элементы.ГруппаСтатусыЭскроу.Видимость = Истина;  
		
	    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();   
		ВыборкаДетальныеЗаписи.Следующий();
		Если ВыборкаДетальныеЗаписи.Отозван Тогда
		    Элементы.СтатусСчетаЭскроу.Видимость = Ложь; 
			СтатусЗаявкиЭскроу = "отозвана";
		Иначе	 
			СтатусЗаявкиЭскроу = Строка(ВыборкаДетальныеЗаписи.СтатусБанка); 
			СтатусСчетаЭскроу = Строка(ВыборкаДетальныеЗаписи.СтатусСчета);
			Если ВыборкаДетальныеЗаписи.СтатусБанка = Перечисления.СтатусыБанкаЗаявкиНаОткрытиеСчетовЭскроу.ОтказаноБанком Тогда
				КрасныйЦвет = Новый Цвет (255,0,0);	   
				Элементы.СтатусЗаявкиЭскроу.ЦветТекста = КрасныйЦвет;
			КонецЕсли;
		    Элементы.СтатусСчетаЭскроу.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;                               
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОплаченоДолгПоЭтапам()

	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.УПДК_ДвиженияДенежныхСредств) И Объект.Статус = Перечисления.СтатусыДоговоровСПокупателями.Подписан Тогда
		Элементы.ЭтапыОплатыДолг.Видимость = Истина;
		Элементы.ЭтапыОплатыОплачено.Видимость = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПДК_ДвиженияДенежныхСредствОстатки.СуммаЭскроуОстаток + УПДК_ДвиженияДенежныхСредствОстатки.СуммаОстаток КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.УПДК_ДвиженияДенежныхСредств.Остатки(, ОбъектДвижения = &Договор) КАК УПДК_ДвиженияДенежныхСредствОстатки";
		
		Запрос.УстановитьПараметр("Договор", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			КРаспределению = ВыборкаДетальныеЗаписи.СуммаОплаты; 			
		Иначе
			КРаспределению = 0;
		КонецЕсли;		
		
		Сч = 1;
		Для каждого ТекСтрока Из Объект.ЭтапыОплаты Цикл
			
			ТекСтрока.Сортировка = Сч;
			Сч = Сч + 1;
			
		КонецЦикла;

		Объект.ЭтапыОплаты.Сортировать("ДатаПлатежа");
		
		Для каждого ТекСтрока Из Объект.ЭтапыОплаты Цикл
			Если КРаспределению > 0 Тогда
				КРаспределению = КРаспределению - ТекСтрока.СуммаПлатежа;
				Если КРаспределению >= 0 Тогда
					ТекСтрока.Оплачено = ТекСтрока.СуммаПлатежа;
				Иначе
					ТекСтрока.Оплачено = ТекСтрока.СуммаПлатежа + КРаспределению;
					ТекСтрока.Долг = - КРаспределению;
				КонецЕсли;
			Иначе
				ТекСтрока.Долг = ТекСтрока.СуммаПлатежа;
			КонецЕсли;
		КонецЦикла;
		
		Объект.ЭтапыОплаты.Сортировать("Сортировка");
		
		
		Элементы.ЭтапыОплатыОплачено.ТекстПодвала = Объект.ЭтапыОплаты.Итог("Оплачено");
		Элементы.ЭтапыОплатыДолг.ТекстПодвала = Объект.ЭтапыОплаты.Итог("Долг");
	Иначе
		Элементы.ЭтапыОплатыДолг.Видимость = Ложь;
		Элементы.ЭтапыОплатыОплачено.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры 


&НаСервере
Процедура СпособПриобретенияПриИзмененииНаСервере()
	
	ОбновитьДоступностьСкидокНаСервере();
	
	Если ЗначениеЗаполнено(Объект.СпособПриобретения) Тогда
		
		Объект.ГрафикОплаты = Объект.СпособПриобретения.ГрафикОплаты;
		Объект.ВозникаетОбременение = Объект.СпособПриобретения.ВозникаетОбременение;
		
	КонецЕсли;
	
КонецПроцедуры


//Процедура проверяет права на редактирование цен
&НаСервере
Процедура УстановитьВозможностьРедактированияЦенНоменклатуры()
	
	//ПраваНаРедактированиеЦен = Пользователи.РолиДоступны("CRM_РедактированиеЦенИСкидокВДокументах");
	////ЭтотОбъект.Элементы.ЗапасыЦена.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	//ЭтотОбъект.Элементы.ЗапасыСумма.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	//ЭтотОбъект.Элементы.ЗапасыВсего.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	//ЭтотОбъект.Элементы.ЗапасыСуммаНДС.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидПравовогоДокументаСервер()
	
	Если ЗначениеЗаполнено(Объект.ВидПравовогоДокумента) Тогда
		ТипДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПравовогоДокумента, "ТипДоговора");
	Иначе
		ТипДоговора = Перечисления.УПДК_ТипыДоговоров.ПустаяСсылка();
	КонецЕсли;	
	
	Если ТипДоговора = Перечисления.УПДК_ТипыДоговоров.ДДУ Тогда
		
		мБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Объект, "БанковскийСчетПоУмолчанию");
		Если ЗначениеЗаполнено(мБанковскийСчет) Тогда
			
			Для Каждого ТекПодписант из Объект.ПодписантыОрганизация Цикл  				
				ТекПодписант.БанковскийСчет = мБанковскийСчет;								
			КонецЦикла;
			
		КонецЕсли; 		
		
	Иначе
		
		Для Каждого ТекПодписант из Объект.ПодписантыОрганизация Цикл			
			ТекПодписант.БанковскийСчет = УПДК_РаботаСБанками.ПолучитьБанковскийСчетПоУмолчанию(Объект.Организация);							
		КонецЦикла;	
		
	КонецЕсли; 
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодписантовСторона1Сервер()
	
	Для Инд = 1 По НомерПродавцов Цикл
		Если СписокУдаленныхПродавцов.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УдалитьПродавцаСервер("Продавец_ЭлементУдалить" + Инд);
	КонецЦикла;	
	
	СписокУдаленныхПродавцов.Очистить();
	НомерПродавцов = 0;
	
	Подписанты = УПДК_ФизическиеЛица.ПолучитьПодписантовОрганизацииПоУмолчанию(Объект.Организация);
	
	Для Каждого ТекПодписант из Подписанты Цикл
		
		ДобавитьКарточкуПродавца(Ложь);

		ЭтаФорма["Организация" + НомерПродавцов] = Объект.Организация;
			
		Если ЗначениеЗаполнено(Объект.ВидПравовогоДокумента) И Объект.ВидПравовогоДокумента.ТипДоговора = Перечисления.УПДК_ТипыДоговоров.ДДУ Тогда		
			ЭтаФорма["БанкСчет" + НомерПродавцов] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Объект, "БанковскийСчетПоУмолчанию");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтаФорма["БанкСчет" + НомерПродавцов]) Тогда
			ЭтаФорма["БанкСчет" + НомерПродавцов] = УПДК_РаботаСБанками.ПолучитьБанковскийСчетПоУмолчанию(Объект.Организация);
		КонецЕсли;
		
		ДанныеПодписанта = УПДК_ФизическиеЛица.ПолучитьДанныеПодписантаОрганизации(Объект.Организация, ТекПодписант);
		
		ЭтаФорма["Подписант" + НомерПродавцов] = ТекПодписант;		
		//НоваяСтрокаПодписанта.Основание = ДанныеПодписанта.Основание;
		ЭтаФорма["Должность" + НомерПродавцов] = ДанныеПодписанта.Должность; 
		//НоваяСтрокаПодписанта.ТипПредставителя = ДанныеПодписанта.ТипПредставителя; 		
		ЭтаФорма["ПечатьВПреамбуле" + НомерПродавцов] = Истина;
		ЭтаФорма["ПечатьВПодписях" + НомерПродавцов] = Истина;
		
	КонецЦикла;
	
	Если НЕ НомерПродавцов Тогда
		
		ДобавитьКарточкуПродавца(Ложь);
		
		ЭтаФорма["Организация" + НомерПродавцов] = Объект.Организация; 
		
		Если ЗначениеЗаполнено(Объект.ВидПравовогоДокумента) И Объект.ВидПравовогоДокумента.ТипДоговора = Перечисления.УПДК_ТипыДоговоров.ДДУ Тогда		
			ЭтаФорма["БанкСчет" + НомерПродавцов] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Объект, "БанковскийСчетПоУмолчанию");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтаФорма["БанкСчет" + НомерПродавцов]) Тогда
			ЭтаФорма["БанкСчет" + НомерПродавцов] = УПДК_РаботаСБанками.ПолучитьБанковскийСчетПоУмолчанию(Объект.Организация);
		КонецЕсли;
		
		ЭтаФорма["ПечатьВПреамбуле" + НомерПродавцов] = Истина;
		ЭтаФорма["ПечатьВПодписях" + НомерПродавцов] = Истина;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодписантовСторона2Сервер()
	
	Для Инд = 1 По НомерПокупателей Цикл
		Если СписокУдаленныхПокупателей.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ВидПартнера = ПредопределенноеЗначение("Перечисление.ВидПартнера.Компания") Тогда
			УдалитьПокупателяКомпанияСервер("Покупатель_ЭлементУдалить" + Инд);
		Иначе	
			УдалитьПокупателяСервер("Покупатель_ЭлементУдалить" + Инд);
		КонецЕсли;	
	КонецЦикла;	
	
	СписокУдаленныхПокупателей.Очистить();
	НомерПокупателей = 0;
	
	Подписанты = УПДК_ФизическиеЛица.ПолучитьПодписантовПартнера(Объект.Клиент);
	
	
	Если ВидПартнера = Перечисления.ВидПартнера.Компания Тогда
		
		Для Каждого Подписант Из Подписанты Цикл
			
			ДобавитьКарточкуПокупателя(, Ложь);		
			
			//ЭтаФорма["Имя" + НомерПокупателей] = Подписант;
			ЭтаФорма["Контрагент" + НомерПокупателей] = Справочники.Контрагенты.КонтрагентаПартнераПоКонтактномуЛицу(Объект.Клиент, Подписант);
			Если ЗначениеЗаполнено(ЭтаФорма["Контрагент" + НомерПокупателей]) Тогда
				ЭтаФорма["ПокупБанкСчет" + НомерПокупателей] = УПДК_РаботаСБанкамиВызовСервера.ПолучитьБанковскийСчетПоУмолчанию(ЭтаФорма["Контрагент" + НомерПокупателей]);
			КонецЕсли;
			
			ДанныеПодписанта = УПДК_ФизическиеЛица.ПолучитьДанныеПодписантаПартнера(Объект.Клиент, Подписант);
			
			ЭтаФорма["ПокупДолжность" + НомерПокупателей] = ДанныеПодписанта.Должность;
			//ЭтаФорма["ДоверенноеЛицо" + НомерПокупателей] = ДанныеПодписанта.ДоверенноеЛицо;
			ЭтаФорма["ПокупОснование" + НомерПокупателей] = ДанныеПодписанта.Основание;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Подписант Из Подписанты Цикл
			
			ДобавитьКарточкуПокупателя(, Ложь);		
			
			ЭтаФорма["Имя" + НомерПокупателей] = Подписант;
			
			ДанныеПодписанта = УПДК_ФизическиеЛица.ПолучитьДанныеПодписантаПартнера(Объект.Клиент, Подписант);
			
			ЭтаФорма["Должность_" + НомерПокупателей] = ДанныеПодписанта.Должность;
			ЭтаФорма["ДоверенноеЛицо" + НомерПокупателей] = ДанныеПодписанта.ДоверенноеЛицо;
			ЭтаФорма["Основание_" + НомерПокупателей] = ДанныеПодписанта.Основание;
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура накладывает ограничение на тип собственности: если подписантов клиента больше 1, доступны только
// "Долевая" и "Совместная". Если подписант один, то тип собственности - "Единоличная"
&НаКлиенте
Процедура ОграничениеТипаСобственностиПоКоличествуПодписантов()

	ВсегоПокупателей = 0;
	Для Инд = 1 По НомерПокупателей Цикл
		
		Если СписокУдаленныхПокупателей.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВсегоПокупателей = ВсегоПокупателей + 1;
		
	КонецЦикла;

	Если ВсегоПокупателей > 1 
		И Объект.ТипСобственности = ПредопределенноеЗначение("Перечисление.УПДК_ТипыСобственности.Единоличная") Тогда
		//
		Объект.ТипСобственности = ПредопределенноеЗначение("Перечисление.УПДК_ТипыСобственности.Совместная");
		
		ТекстСообщения = НСтр("ru = 'Установленный тип собственности ""Единоличная"" недоступен, поскольку количество "
			+ "подписантов на стороне ""Покупателя"" больше одного. Выберите между ""Совместной"", ""Долевой"" и ""Совместно-долевой"".'"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ТипСобственности");
		
	ИначеЕсли ВсегоПокупателей = 1 
		И Не Объект.ТипСобственности = ПредопределенноеЗначение("Перечисление.УПДК_ТипыСобственности.Единоличная") Тогда
		//
				
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Установленный тип собственности ""%1"" недоступен, поскольку " 
			+ "на стороне ""Покупателя"" всего один подписант. Тип собственности изменён на ""Единоличная"".'")
			, Объект.ТипСобственности); 
		Объект.ТипСобственности = ПредопределенноеЗначение("Перечисление.УПДК_ТипыСобственности.Единоличная");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ТипСобственности")
	КонецЕсли;		

	Для Инд = 1 По НомерПокупателей Цикл
		Если СписокУдаленныхПокупателей.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Объект.ТипСобственности = ПредопределенноеЗначение("Перечисление.УПДК_ТипыСобственности.Единоличная") Или 
			Объект.ТипСобственности = ПредопределенноеЗначение("Перечисление.УПДК_ТипыСобственности.Совместная") Тогда
		    Элементы["ГруппаБлокПокупателя_Доля" + Инд].Видимость = Ложь;
		Иначе	
		    Элементы["ГруппаБлокПокупателя_Доля" + Инд].Видимость = Истина;
			Если Не Объект.ТипСобственности = ПредопределенноеЗначение("Перечисление.УПДК_ТипыСобственности.СовместноДолевая") Тогда
				Элементы["ГруппаБлокПокупателя_Доля" + Инд].ПодчиненныеЭлементы["Покупатель_СовместноДолевая" + Инд].Видимость = Ложь;
			Иначе
				Элементы["ГруппаБлокПокупателя_Доля" + Инд].ПодчиненныеЭлементы["Покупатель_СовместноДолевая" + Инд].Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПриИзмененииКоличестваПодписантов()

&НаКлиенте
Процедура СозданиеКонтактногоЛицаКлиентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИДСтроки = ДополнительныеПараметры.ИДСТроки;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ЭтаФорма[ДополнительныеПараметры.ИмяПоля + ИДСтроки] = Результат;	
					
	КонецЕсли;			

КонецПроцедуры

&НаСервере
Процедура ЗапуститьБизнесПроцессСогласование()
	
	Если Модифицированность Или Не Объект.Проведен Тогда 
		
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УПДК_БизнесПроцессыИЗадачи.ЗапуститьБизнесПроцессСогласование(РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоГрафикуОплатыСервер()
	
	УПДК_Продажи.ЗаполнитьЭтапыГрафикаОплаты(Объект, Объект.СуммаДокумента);
	ОбновитьДанныеСтрокЭтаповОплаты();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипДанныхОплатыБанковскийСчет(ФормаОплаты)
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ФормаОплаты) Тогда
		Возврат ФормаОплаты.ТипЗначения.СодержитТип(Тип("СправочникСсылка.БанковскиеСчета"));
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеСтрокЭтаповОплаты(ИдентификаторыСтрок = Неопределено) 
	
	МассивСтрок = Новый Массив;
	МассивФормОплат = Новый Массив;
	
	Если ИдентификаторыСтрок = Неопределено Тогда
		
		Для Каждого СтрокаОплаты Из Объект.ЭтапыОплаты Цикл
			
			МассивСтрок.Добавить(СтрокаОплаты);
			МассивФормОплат.Добавить(СтрокаОплаты.ФормаОплаты);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
			
			СтрокаОплаты = Объект.ЭтапыОплаты.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если СтрокаОплаты = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСтрок.Добавить(СтрокаОплаты);
			МассивФормОплат.Добавить(СтрокаОплаты.ФормаОплаты);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивФормОплат = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивФормОплат);	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивФормОплат, "ОбъязательноеЗаполнение");
	
	Для Каждого СтрокаОплаты Из МассивСтрок Цикл
		ОбъязательноеЗаполнение = Реквизиты.Получить(СтрокаОплаты.ФормаОплаты);
		Если ОбъязательноеЗаполнение = Неопределено Тогда
			ОбъязательноеЗаполнение = Ложь;
		КонецЕсли;
		СтрокаОплаты.ПроверятьЗаполнение = ОбъязательноеЗаполнение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКлиентНаСервере()
	
	//Бизнес-процессы
	ЗаполнитьГруппуБизнесПроцесс();
	УстановитьСвойстваЭлементовГруппыБизнесПроцесс(ЭтотОбъект);
	//Конец бизнес-процессы

	//Анкетирование
	УПДК_Анкетирование.ОбновитьЭлементыФормы(ЭтотОбъект, "ГруппаАнкетирование");	
	//Конец Анкетирование
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		КлиентФизлицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Клиент, "CRM_ФизЛицо");
		ВидПартнера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Клиент, "ВидПартнера");
	Иначе 
		ВидПартнера = Неопределено;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкидкиНаценкиНаСервере()
	
	Объект.СкидкиНаценки.Очистить();
	СкидкиНаценкиЗаказа = Объект.ЗаказКлиента.СкидкиНаценки; 
	Для Каждого Стр из СкидкиНаценкиЗаказа Цикл
		ЗаполнитьЗначенияСвойств(Объект.СкидкиНаценки.Добавить(),Стр);	
	КонецЦикла;
	
	ОбновитьДоступностьСкидокНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьСкидокНаСервере()
		
	МассивСкидокСДублями = ТаблицаСкидокНаценок.Выгрузить(,"СкидкаНаценка").ВыгрузитьКолонку("СкидкаНаценка");
	МассивСкидок = Новый Массив;
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивСкидок, МассивСкидокСДублями);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценкиУсловияПоСовместномуПрименению.Ссылка,
	|	СкидкиНаценкиУсловияПоСовместномуПрименению.СкидкаНаценка
	|ИЗ
	|	Справочник.УПДК_СкидкиНаценки.УсловияПоСовместномуПрименению КАК СкидкиНаценкиУсловияПоСовместномуПрименению
	|ГДЕ
	|	СкидкиНаценкиУсловияПоСовместномуПрименению.Ссылка.ПравилоДляСовместногоПрименения = &Правило
	|	И СкидкиНаценкиУсловияПоСовместномуПрименению.Ссылка В(&МассивСкидок)";
	
	Запрос.УстановитьПараметр("Правило", Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.РазрешеныТолькоУказанные);
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	
	ТЗРазрешеныТолькоУказанные = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценкиУсловияПоСовместномуПрименению.Ссылка,
	|	СкидкиНаценкиУсловияПоСовместномуПрименению.СкидкаНаценка
	|ИЗ
	|	Справочник.УПДК_СкидкиНаценки.УсловияПоСовместномуПрименению КАК СкидкиНаценкиУсловияПоСовместномуПрименению
	|ГДЕ
	|	СкидкиНаценкиУсловияПоСовместномуПрименению.Ссылка.ПравилоДляСовместногоПрименения = &Правило
	|	И СкидкиНаценкиУсловияПоСовместномуПрименению.Ссылка В(&МассивСкидок)";
	
	Запрос.УстановитьПараметр("Правило", Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.ЗапрещеныТолькоУказанные);
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	
	ТЗЗапрещеныТолькоУказанные = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценкиУсловияПоСпособуПриобретения.Ссылка,
	|	СкидкиНаценкиУсловияПоСпособуПриобретения.СпособПриобретения
	|ИЗ
	|	Справочник.УПДК_СкидкиНаценки.УсловияПоСпособуПриобретения КАК СкидкиНаценкиУсловияПоСпособуПриобретения
	|ГДЕ
	|	СкидкиНаценкиУсловияПоСпособуПриобретения.Ссылка.ПравилоПоСпособуПриобретения = &Правило
	|	И СкидкиНаценкиУсловияПоСпособуПриобретения.Ссылка В(&МассивСкидок)";
	
	Запрос.УстановитьПараметр("Правило", Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.РазрешеныТолькоУказанные);
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	
	ТЗРазрешеныТолькоУказанныеСпособПриобретения = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценкиУсловияПоСпособуПриобретения.Ссылка,
	|	СкидкиНаценкиУсловияПоСпособуПриобретения.СпособПриобретения
	|ИЗ
	|	Справочник.УПДК_СкидкиНаценки.УсловияПоСпособуПриобретения КАК СкидкиНаценкиУсловияПоСпособуПриобретения
	|ГДЕ
	|	СкидкиНаценкиУсловияПоСпособуПриобретения.Ссылка.ПравилоПоСпособуПриобретения = &Правило
	|	И СкидкиНаценкиУсловияПоСпособуПриобретения.Ссылка В(&МассивСкидок)";
	
	Запрос.УстановитьПараметр("Правило", Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.ЗапрещеныТолькоУказанные);
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	
	ТЗЗапрещеныТолькоУказанныеСпособПриобретения = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценкиУсловияПоАгентствамНедвижимости.Ссылка,
	|	СкидкиНаценкиУсловияПоАгентствамНедвижимости.АгентствоНедвижимости
	|ИЗ
	|	Справочник.УПДК_СкидкиНаценки.УсловияПоАгентствамНедвижимости КАК СкидкиНаценкиУсловияПоАгентствамНедвижимости
	|ГДЕ
	|	СкидкиНаценкиУсловияПоАгентствамНедвижимости.Ссылка.ПравилоПоАгентствуНедвижимости = &Правило
	|	И СкидкиНаценкиУсловияПоАгентствамНедвижимости.Ссылка В(&МассивСкидок)";
	
	Запрос.УстановитьПараметр("Правило", Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.РазрешеныТолькоУказанные);
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	
	ТЗРазрешеныТолькоУказанныеАгентствоНедвижимости = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценкиУсловияПоАгентствамНедвижимости.Ссылка,
	|	СкидкиНаценкиУсловияПоАгентствамНедвижимости.АгентствоНедвижимости
	|ИЗ
	|	Справочник.УПДК_СкидкиНаценки.УсловияПоАгентствамНедвижимости КАК СкидкиНаценкиУсловияПоАгентствамНедвижимости
	|ГДЕ
	|	СкидкиНаценкиУсловияПоАгентствамНедвижимости.Ссылка.ПравилоПоАгентствуНедвижимости = &Правило
	|	И СкидкиНаценкиУсловияПоАгентствамНедвижимости.Ссылка В(&МассивСкидок)";
	
	Запрос.УстановитьПараметр("Правило", Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.ЗапрещеныТолькоУказанные);
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	
	ТЗЗапрещеныТолькоУказанныеАгентствоНедвижимости = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ПроверяемаяСтрока из ТаблицаСкидокНаценок Цикл
		
		ПроверяемаяСтрока.Подходит = Истина;
		
		Для Каждого ПроверяющаяСтрока Из ТаблицаСкидокНаценок Цикл
						
			ПравилоПроверяющейСтроки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяющаяСтрока.СкидкаНаценка, "ПравилоДляСовместногоПрименения");
			ПравилоПроверямойСтроки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемаяСтрока.СкидкаНаценка, "ПравилоДляСовместногоПрименения");
			
			Если ПроверяемаяСтрока = ПроверяющаяСтрока Тогда
				Продолжить;
			КонецЕсли;

			//Проверяем, а не одинаковые ли скидки
			
			Если ПроверяемаяСтрока.СкидкаНаценка = ПроверяющаяСтрока.СкидкаНаценка Тогда
				
				ПроверяемаяСтрока.Подходит = Ложь;
				Прервать;
				
			КонецЕсли;			
			
			//Проверяем сначала, можно ли к проверяющей строке добавить проверяемую
			
			Если ПравилоПроверяющейСтроки = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.ЗапрещеныВсе Тогда
				
				ПроверяемаяСтрока.Подходит = Ложь;
				Прервать;
				
			ИначеЕсли ПравилоПроверяющейСтроки = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.РазрешеныТолькоУказанные Тогда
				
				НайденныеСтроки = ТЗРазрешеныТолькоУказанные.НайтиСтроки(Новый Структура("Ссылка, СкидкаНаценка", ПроверяющаяСтрока.СкидкаНаценка, ПроверяемаяСтрока.СкидкаНаценка));
				Если НЕ НайденныеСтроки.Количество() Тогда
					
					ПроверяемаяСтрока.Подходит = Ложь;
					Прервать;
					
				КонецЕсли;
				
			ИначеЕсли ПравилоПроверяющейСтроки = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.ЗапрещеныТолькоУказанные Тогда
				
				НайденныеСтроки = ТЗЗапрещеныТолькоУказанные.НайтиСтроки(Новый Структура("Ссылка, СкидкаНаценка", ПроверяющаяСтрока.СкидкаНаценка, ПроверяемаяСтрока.СкидкаНаценка));
				Если НайденныеСтроки.Количество() Тогда
					
					ПроверяемаяСтрока.Подходит = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
			//Проверяем, можно ли к проверямой строке добавить проверяющую
			
			Если ПравилоПроверямойСтроки = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.ЗапрещеныВсе Тогда
				
				ПроверяемаяСтрока.Подходит = Ложь;
				Прервать;
				
			ИначеЕсли ПравилоПроверямойСтроки = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.РазрешеныТолькоУказанные Тогда
				
				НайденныеСтроки = ТЗРазрешеныТолькоУказанные.НайтиСтроки(Новый Структура("Ссылка, СкидкаНаценка", ПроверяемаяСтрока.СкидкаНаценка, ПроверяющаяСтрока.СкидкаНаценка));
				Если НЕ НайденныеСтроки.Количество() Тогда
					
					ПроверяемаяСтрока.Подходит = Ложь;
					Прервать;
					
				КонецЕсли;
				
			ИначеЕсли ПравилоПроверямойСтроки = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.ЗапрещеныТолькоУказанные Тогда
				
				НайденныеСтроки = ТЗЗапрещеныТолькоУказанные.НайтиСтроки(Новый Структура("Ссылка, СкидкаНаценка", ПроверяемаяСтрока.СкидкаНаценка, ПроверяющаяСтрока.СкидкаНаценка));
				Если НайденныеСтроки.Количество() Тогда
					
					ПроверяемаяСтрока.Подходит = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПроверяемаяСтрока.Подходит Тогда
			Продолжить;
		КонецЕсли;
		
		//Проверяем на способ приобретения
		
		ПравилоПоСпособуПриобретения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемаяСтрока.СкидкаНаценка, "ПравилоПоСпособуПриобретения");
		
		Если ПравилоПоСпособуПриобретения = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.ЗапрещеныВсе И ЗначениеЗаполнено(Объект.СпособПриобретения) Тогда
			
			ПроверяемаяСтрока.Подходит = Ложь;
			Продолжить;
			
		ИначеЕсли ПравилоПоСпособуПриобретения = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.РазрешеныТолькоУказанные Тогда
			
			НайденныеСтроки = ТЗРазрешеныТолькоУказанныеСпособПриобретения.НайтиСтроки(Новый Структура("Ссылка, СпособПриобретения", ПроверяемаяСтрока.СкидкаНаценка, Объект.СпособПриобретения));
			Если НЕ НайденныеСтроки.Количество() Тогда
				
				ПроверяемаяСтрока.Подходит = Ложь;
				Продолжить;
				
			КонецЕсли;
			
		ИначеЕсли ПравилоПоСпособуПриобретения = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.ЗапрещеныТолькоУказанные Тогда
			
			НайденныеСтроки = ТЗЗапрещеныТолькоУказанныеСпособПриобретения.НайтиСтроки(Новый Структура("Ссылка, СпособПриобретения", ПроверяемаяСтрока.СкидкаНаценка, Объект.СпособПриобретения));
			Если НайденныеСтроки.Количество() Тогда
				
				ПроверяемаяСтрока.Подходит = Ложь;
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;			
				
		//Проверяем на агенство недвижимости
		
		ПравилоПоАгентствуНедвижимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемаяСтрока.СкидкаНаценка, "ПравилоПоАгентствуНедвижимости");
		
		Если ПравилоПоАгентствуНедвижимости = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.ЗапрещеныВсе И ЗначениеЗаполнено(Объект.АгентствоНедвижимости) Тогда
			
			ПроверяемаяСтрока.Подходит = Ложь;
			Продолжить;
			
		ИначеЕсли ПравилоПоАгентствуНедвижимости = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.РазрешеныТолькоУказанные Тогда
			
			НайденныеСтроки = ТЗРазрешеныТолькоУказанныеАгентствоНедвижимости.НайтиСтроки(Новый Структура("Ссылка, АгентствоНедвижимости", ПроверяемаяСтрока.СкидкаНаценка, Объект.АгентствоНедвижимости));
			Если НЕ НайденныеСтроки.Количество() Тогда
				
				ПроверяемаяСтрока.Подходит = Ложь;
				Продолжить;
				
			КонецЕсли;
			
		ИначеЕсли ПравилоПоАгентствуНедвижимости = Перечисления.УПДК_ВариантыСовместногоПримененияСкидок.ЗапрещеныТолькоУказанные Тогда
			
			НайденныеСтроки = ТЗЗапрещеныТолькоУказанныеАгентствоНедвижимости.НайтиСтроки(Новый Структура("Ссылка, АгентствоНедвижимости", ПроверяемаяСтрока.СкидкаНаценка, Объект.АгентствоНедвижимости));
			Если НайденныеСтроки.Количество() Тогда
				
				ПроверяемаяСтрока.Подходит = Ложь;
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ЕстьСвязанныеОбъекты(Договор,ЗаказКлиента)
		Возврат Договор.СвязанныеОбъекты.Количество() > 0 Или ЗаказКлиента.СвязанныеОбъекты.Количество() > 0;	
	КонецФункции

&НаСервере
Процедура ОбновитьИтоговуюСуммуНДСНоменклатуры()
	
	Если Не ИспользоватьНоменклатуру И Не ИспользоватьСтавкиНДС Тогда
		Возврат;
	КонецЕсли;
	
	СуммаНДСНоменклатура = 0;
	Для Каждого СтрокаНоменклатуры Из Объект.Запасы Цикл
		Если СтрокаНоменклатуры.ВходитВСуммуНедвижимости Тогда
			Продолжить;
		КонецЕсли;
		СуммаНДСНоменклатура = СуммаНДСНоменклатура + СтрокаНоменклатуры.СуммаНДС;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоговуюСуммуНоменклатуры()
	
	Если Не ИспользоватьНоменклатуру Тогда
		Возврат;
	КонецЕсли;
	
	СуммаНоменклатура = 0;
	Для Каждого СтрокаНоменклатуры Из Объект.Запасы Цикл
		Если СтрокаНоменклатуры.ВходитВСуммуНедвижимости Тогда
			Продолжить;
		КонецЕсли;
		СуммаНоменклатура = СуммаНоменклатура + СтрокаНоменклатуры.Сумма;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуОтвет(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоЗаказуНаСервере();
	ОграничениеТипаСобственностиПоКоличествуПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуНаСервере()
	
	УПДК_ОбщегоНазначения.ЗаполнитьРеквизитыПоОснованию(Объект, Объект.ЗаказКлиента, Ложь);
	Документы.РеализацияНедвижимости.ЗаполнитьПоЗаказуКлиента(Объект, Объект.ЗаказКлиента);
	
	СуммаБезСкидки = Объект.СуммаБезСкидки;
	ПараметрыРасчетаЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЦены, "ПараметрыРасчетаЦен");
	Если ЗначениеЗаполнено(ПараметрыРасчетаЦен) Тогда
		ЗначенияРеквизитовЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыРасчетаЦен, "ТочностьОкругления, ОкруглятьВБольшуюСторону, ОбъектОкругления");
		Если ЗначенияРеквизитовЦен.ОбъектОкругления = Перечисления.УПДК_ОбъектыОкругления.СтоимостьНедвижимости Тогда
			СуммаБезСкидки = УПДК_ЦенообразованиеКлиентСеврер.ОкруглитьЦену(СуммаБезСкидки, ЗначенияРеквизитовЦен.ТочностьОкругления, ЗначенияРеквизитовЦен.ОкруглятьВБольшуюСторону);
		КонецЕсли;			
	КонецЕсли;	
	
	СуммаСкидкиНаценки = СуммаБезСкидки - Объект.Сумма;		

	ОбновитьДоступностьСкидокНаСервере();
	ОбновитьСтавкиНДССуммыНДСНоменклатуры();
	ОбновитьИтоговуюСуммуНоменклатурыИДокумента();
	ОбновитьЦенуНедвижимости();
		
	ПроверитьСуществованиеПохожегоДоговора();
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		КлиентФизлицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Клиент, "CRM_ФизЛицо");
		ВидПартнераВрем = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Клиент, "ВидПартнера");
		Если ВидПартнераВрем <> ВидПартнера Тогда
			ЗаполнитьПодписантовСторона1Сервер();
			ЗаполнитьПодписантовСторона2Сервер();
		КонецЕсли;
	Иначе 
		ВидПартнера = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвязанныхОбъектов(СвязанныеОбъекты, ЗаголовокСвязанныхОбъектов)
	
	мКоличествоВыбранных = 0;
	Для Каждого СтрокаСвязанныхОбъектов Из СвязанныеОбъекты Цикл
		мКоличествоВыбранных = мКоличествоВыбранных + ?(ЗначениеЗаполнено(СтрокаСвязанныхОбъектов.СвязанныйОбъект), 1, 0);
	КонецЦикла;
	
	ЗаголовокСвязанныхОбъектов = СтрШаблон("%1/%2", мКоличествоВыбранных, СвязанныеОбъекты.Количество());	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСкидкиНаценки(ТаблицаСкидокНаценок, ЗаголовокСкидкиНаценки)
	
	мКоличествоВыбранных = 0;
	Для Каждого СтрокаСкидокНаценок Из ТаблицаСкидокНаценок Цикл
		мКоличествоВыбранных = мКоличествоВыбранных + ?(СтрокаСкидокНаценок.Выбран, 1, 0);
	КонецЦикла;
	
	ЗаголовокСкидкиНаценки = СтрШаблон("%1/%2", мКоличествоВыбранных, ТаблицаСкидокНаценок.Количество());	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоговуюСуммуНоменклатурыИДокумента()
	
	ОбновитьИтоговуюСуммуНоменклатуры();
	ОбновитьИтоговуюСуммуНДСНоменклатуры();
	
	СтруктураДействий = Новый Структура;	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС, ИспользоватьСтавкиНДС", Объект.ЦенаВключаетНДС, ИспользоватьСтавкиНДС));	
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуДокумента");
	
	УПДК_Продажи.ОбработатьФормуДокумента(ЭтотОбъект, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтавкиНДССуммыНДСНоменклатуры()

	СтавкаНДСПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "СтавкаНДСПоУмолчанию");
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура ("ИспользоватьСтавкиНДС, СтавкаНДС, СтавкаНДСПоУмолчанию", 
																		ИспользоватьСтавкиНДС, Объект.СтавкаНДС, СтавкаНДСПоУмолчанию));			
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ИспользоватьСтавкиНДС, ЦенаВключаетНДС",
																		ИспользоватьСтавкиНДС, Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ПересчитатьВсего", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));

	УПДК_Продажи.ОбработатьТЧ(Объект.Запасы, СтруктураДействий, Неопределено);
	
	ОбновитьИтоговуюСуммуНДСНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦенуНедвижимости()
	
	Если ЗначениеЗаполнено(Объект.ОбъектНедвижимости) Тогда 
		
		Площадь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектНедвижимости, "ОбщаяПлощадьДляЦен"); 
		
		Если Площадь <> 0 Тогда 
			ЦенаНедвижимости = Объект.Сумма / Площадь;
		Иначе
			ЦенаНедвижимости = Объект.Сумма;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиСуммНДС()
	
	//СтрокаВклНДС = НСтр("ru = 'в т.ч. НДС'");
	//СтрокаНеВклНДС = НСтр("ru = 'сверху НДС'");
	
	//Если Объект.ЦенаВключаетНДС Тогда
	//	Элементы.СуммаНДС.Заголовок = СтрокаВклНДС;
	//	Элементы.СуммаНДСНоменклатура.Заголовок = СтрокаВклНДС;	
	//	Элементы.ИтогНДСНоменклатура.Заголовок = СтрокаВклНДС;
	//Иначе 
	//	Элементы.СуммаНДС.Заголовок = СтрокаНеВклНДС;
	//	Элементы.СуммаНДСНоменклатура.Заголовок = СтрокаНеВклНДС;	
	//	Элементы.ИтогНДСНоменклатура.Заголовок = СтрокаНеВклНДС;
	//КонецЕсли;
	
	//Элементы.ЗапасыВсего.Видимость = Не Объект.ЦенаВключаетНДС;

	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРегистрацияЗавершение(РезультатВопроса, ПараметрыВопроса) Экспорт 

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаявки = Новый Структура;
		Если ЗначениеЗаполнено(ПараметрыВопроса.ЗаявкаНаРегистрацию) Тогда
			ПараметрыЗаявки.Вставить("Ключ", ПараметрыВопроса.ЗаявкаНаРегистрацию);
		Иначе
			ПараметрыЗаявки.Вставить("Основание", Объект.Ссылка);
		КонецЕсли;
		
		ОткрытьФорму("Документ.УПДК_ЗаявкаНаРегистрациюДокумента.ФормаОбъекта", ПараметрыЗаявки, ЭтотОбъект);
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗалогЗавершение(РезультатВопроса, ПараметрыВопроса) Экспорт 

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаявки = Новый Структура;
		Если ЗначениеЗаполнено(ПараметрыВопроса.УПДК_ЗаявкаНаВыводИзЗалога) Тогда
			ПараметрыЗаявки.Вставить("Ключ", ПараметрыВопроса.УПДК_ЗаявкаНаВыводИзЗалога);
		Иначе
			ПараметрыЗаявки.Вставить("Основание", Объект.Ссылка);
		КонецЕсли;
		
		ОткрытьФорму("Документ.УПДК_ЗаявкаНаВыводИзЗалога.ФормаОбъекта", ПараметрыЗаявки, ЭтотОбъект);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПричинаОтказаНаСервере()	
	
	//Анкетирование
	УПДК_Анкетирование.ОбновитьЭлементыФормы(ЭтотОбъект, "ГруппаАнкетирование");	
	//Конец Анкетирование 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПодписантовКлиента(Клиент)
	
	МассивПодписантов = УПДК_ФизическиеЛица.ПолучитьПодписантовПартнера(Клиент);
	
	СписокПодписантов = Новый СписокЗначений;
	СписокПодписантов.ЗагрузитьЗначения(МассивПодписантов);
	
	Возврат СписокПодписантов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтактныеЛицаКлиента(Клиент)
	
	МассивКЛ = УПДК_ФизическиеЛица.ПолучитьКонтактныеЛицаПартнера(Клиент);
	
	СписокПодписантов = Новый СписокЗначений;
	СписокПодписантов.ЗагрузитьЗначения(МассивКЛ);
	
	Возврат СписокПодписантов;
	
КонецФункции

&НаКлиенте
Процедура ПозвонитьОтправитьСМСКлиентуАгенту(СписокКоманд, Абонент, Элемент)
		
	Если СписокКоманд = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Абонент", Абонент);
	Оповещение = Новый ОписаниеОповещения("ПозвонитьОтправитьСМСКлиентуАгентуЗавершение", ЭтотОбъект, 
		ПараметрыОповещения);
	ПоказатьВыборИзМеню(Оповещение, СписокКоманд, Элемент);

	
КонецПроцедуры // ПозвонитьКлиентуАгентц()

&НаКлиенте
Процедура ПозвонитьОтправитьСМСКлиентуАгентуЗавершение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Телефон = ВыбранныйЭлемент.Значение;
		
	Если СтрНайти(ВыбранныйЭлемент.Представление, "Позвонить") <> 0 Тогда
		сфпСофтФонПроКлиент.сфпПозвонить(Телефон, ДопПараметры.Абонент);	
	ИначеЕсли СтрНайти(ВыбранныйЭлемент.Представление, "Отправить СМС") <> 0
		И CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		//		
				
		Если ПустаяСтрока(Телефон) Тогда
			Возврат; 
		КонецЕсли;
		
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", ДопПараметры.Абонент);
		Структура.Вставить("Телефон", смсОтправкаSMSЧерезSMS4B.смсУбратьЛишниеСимволыТелефона(Телефон));
		ПараметрыФормы = Новый Структура("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
				
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьСуществованиеПохожегоДоговора()

	ПохожийДоговор = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияНедвижимости.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияНедвижимости КАК РеализацияНедвижимости
		|ГДЕ
		|	РеализацияНедвижимости.Проведен
		|	И РеализацияНедвижимости.ЗаказКлиента = &ЗаказКлиента";
		
		Запрос.УстановитьПараметр("ЗаказКлиента", Объект.ЗаказКлиента);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
			ПохожийДоговор = ВыборкаДетальныеЗаписи.Ссылка;			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПохожийДоговорЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФорму("Документ.РеализацияНедвижимости.Форма.ФормаДокумента", Новый Структура("Ключ", ПохожийДоговор), ЭтотОбъект.ВладелецФормы);
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидыПравовыхДокументов(ОбъектНедвижимости, Текст, Дата, Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПДК_ДокументыПравНаНедвижимостьСрезПоследних.ТипПрава КАК ТипПрава
		|ИЗ
		|	РегистрСведений.УПДК_ДокументыПравНаНедвижимость.СрезПоследних(
		|			&Период,
		|			ОбъектНедвижимости = &ОбъектНедвижимости
		|				И Регистратор <> &Регистратор) КАК УПДК_ДокументыПравНаНедвижимостьСрезПоследних
		|ГДЕ
		|	УПДК_ДокументыПравНаНедвижимостьСрезПоследних.ТипПрава = &ТипПрава";
	
	Запрос.УстановитьПараметр("ОбъектНедвижимости", ОбъектНедвижимости);
	Запрос.УстановитьПараметр("Период", КонецДня(Дата));
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ТипПрава", Перечисления.УПДК_ТипыПрава.ДоговорДолевогоУчастия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		РазрешенДДУ = Истина;
	Иначе
		РазрешенДДУ = Ложь;
	КонецЕсли;
	
	Адресация = УПДК_Недвижимость.ПолучитьАдресациюОбъектаНедвижимости(ОбъектНедвижимости);
	
	МассивРайонов = Новый Массив;
	МассивОбъектов = Новый Массив;
	МассивСекций = Новый Массив;
	
	МассивРайонов.Добавить(Адресация.Район);
	
	МассивОбъектов.Добавить(ПредопределенноеЗначение("Справочник.УПДК_ОбъектыСтроительства.ПустаяСсылка"));
	МассивОбъектов.Добавить(Адресация.Объект);
	
	МассивСекций.Добавить(ПредопределенноеЗначение("Справочник.УПДК_СекцииОбъектов.ПустаяСсылка"));
	МассивСекций.Добавить(Адресация.Секция);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_ЭтапыСтроительстваОбъектовСрезПоследних.ЭтапСтроительства КАК ЭтапСтроительства,
	|	УПДК_ВидыЭтаповСтроительстваТипыДоговоров.ТипДоговора КАК ТипДоговора
	|ПОМЕСТИТЬ ВТДоступныеТипыДоговоров
	|ИЗ
	|	РегистрСведений.УПДК_ЭтапыСтроительстваОбъектов.СрезПоследних(&Период, Объект = &Объект) КАК УПДК_ЭтапыСтроительстваОбъектовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПДК_ВидыЭтаповСтроительства.ТипыДоговоров КАК УПДК_ВидыЭтаповСтроительстваТипыДоговоров
	|		ПО УПДК_ЭтапыСтроительстваОбъектовСрезПоследних.ЭтапСтроительства = УПДК_ВидыЭтаповСтроительстваТипыДоговоров.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 7
	|	СправочникВидыПравовыхДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УПДК_ВидыПравовыхДокументов КАК СправочникВидыПравовыхДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПДК_ВидыПравовыхДокументов.ПринадлежностьНедвижимости КАК ВидыПравовыхДокументовПринадлежностьНедвижимости
	|		ПО (ВидыПравовыхДокументовПринадлежностьНедвижимости.Ссылка = СправочникВидыПравовыхДокументов.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДоступныеТипыДоговоров КАК ВТДоступныеТипыДоговоров
	|		ПО СправочникВидыПравовыхДокументов.ТипДоговора = ВТДоступныеТипыДоговоров.ТипДоговора
	|ГДЕ
	|	(СправочникВидыПравовыхДокументов.ВариантПринадлежности = ЗНАЧЕНИЕ(Перечисление.УПДК_ВариантыПринадлежностиНедвижимости.Типовое)
	|			ИЛИ СправочникВидыПравовыхДокументов.ВариантПринадлежности = ЗНАЧЕНИЕ(Перечисление.УПДК_ВариантыПринадлежностиНедвижимости.СогласноОтбору)
	|				И ВидыПравовыхДокументовПринадлежностьНедвижимости.Район В (&Районы)
	|				И ВидыПравовыхДокументовПринадлежностьНедвижимости.Объект В (&Объекты)
	|				И ВидыПравовыхДокументовПринадлежностьНедвижимости.Секция В (&Секции))
	|	И СправочникВидыПравовыхДокументов.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных
	|	И СправочникВидыПравовыхДокументов.Наименование ПОДОБНО &Наименование
	|	И НЕ ВТДоступныеТипыДоговоров.ТипДоговора ЕСТЬ NULL
	|	И ВЫБОР
	|			КОГДА СправочникВидыПравовыхДокументов.ТипДоговора = &ТипДоговора
	|				ТОГДА &РазрешенДДУ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СправочникВидыПравовыхДокументов.ТипДоговора = &ТипДоговораУступка
	|				ТОГДА НЕ &РазрешенДДУ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Районы", МассивРайонов);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документы.РеализацияНедвижимости.ПустаяСсылка().Метаданные()));
	Запрос.УстановитьПараметр("Объект", Адресация.Объект);	
	Запрос.УстановитьПараметр("Период", Дата);	
	Запрос.УстановитьПараметр("ТипДоговора", Перечисления.УПДК_ТипыДоговоров.ДДУ);
	Запрос.УстановитьПараметр("ТипДоговораУступка", Перечисления.УПДК_ТипыДоговоров.ДУПДУ);
	
	Запрос.УстановитьПараметр("РазрешенДДУ", РазрешенДДУ);
	
	Запрос.УстановитьПараметр("Объекты", МассивОбъектов);
	Запрос.УстановитьПараметр("Секции", МассивСекций);
	Запрос.УстановитьПараметр("Наименование", "%" + Текст + "%");
	
	СписокСписок = Новый СписокЗначений;
	СписокСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокСписок;
	
КонецФункции

&НаКлиенте
Процедура РазбитьПлатежЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
		
	ТекДанные = Элементы.ЭтапыОплаты.ТекущиеДанные;
	Сумма = ТекДанные.СуммаПлатежа;
	ФормаОплаты = ТекДанные.ФормаОплаты;
	ДанныеОплаты = ТекДанные.ДанныеОплаты;
	ПроцентОплаты = ТекДанные.ПроцентОплаты;
	
	ПериодичностьПлатежа = Результат.ПериодичностьПлатежа;	
	КоличествоПлатежей = Результат.КоличествоПлатежей;
	Календарные = Результат.Календарные;
	ЕжемесячныйПлатеж = Результат.ЕжемесячныйПлатеж;
	
	ЕжемесячныйПроцент = Цел(100*ПроцентОплаты * ЕжемесячныйПлатеж / Сумма)/100;
	//ЕжемесячныйПроцент =  Цел(100 * ПроцентОплаты / КоличествоПлатежей)/100;
	
	
	ТекДанные.СуммаПлатежа = ЕжемесячныйПлатеж;
	ТекДанные.ПроцентОплаты = ЕжемесячныйПроцент;
	
	
	ДатаТекПлатежа = Результат.ДатаПервогоПлатежа;

	ТекДанные.ДатаПлатежа = ДатаТекПлатежа;
	
	ДатаТекПлатежа = ДобавитьМесяц(ДатаТекПлатежа, ПериодичностьПлатежа);	
	
	ПроцентОплаты = ПроцентОплаты - ЕжемесячныйПроцент;
	Сумма = Сумма - ЕжемесячныйПлатеж;
	
	Если НЕ Результат.Календарные Тогда
		
		РазбитьПлатежЗавершениеНаСервере(КоличествоПлатежей, ПериодичностьПлатежа, ФормаОплаты, ДанныеОплаты, ЕжемесячныйПлатеж, ДатаТекПлатежа, ЕжемесячныйПроцент, Сумма, ПроцентОплаты);
		Возврат;
	КонецЕсли;  
	
	Для Счетчик = 1 По КоличествоПлатежей - 2 Цикл
		
		
		НовСтр = Объект.ЭтапыОплаты.Добавить();
		НовСтр.ФормаОплаты = ФормаОплаты;
		НовСтр.ДанныеОплаты = ДанныеОплаты;
		НовСтр.СуммаПлатежа = ЕжемесячныйПлатеж;
		НовСтр.ДатаПлатежа = ДатаТекПлатежа;
		НовСтр.ПроцентОплаты = ЕжемесячныйПроцент;
		
		ДатаТекПлатежа = ДобавитьМесяц(ДатаТекПлатежа, ПериодичностьПлатежа);		
		Сумма = Сумма - ЕжемесячныйПлатеж;
		ПроцентОплаты = ПроцентОплаты - ЕжемесячныйПроцент;
		
		
	КонецЦикла;
	
	НовСтр = Объект.ЭтапыОплаты.Добавить();
	НовСтр.ФормаОплаты = ФормаОплаты;
	НовСтр.ДанныеОплаты = ДанныеОплаты;
	НовСтр.СуммаПлатежа = Сумма; 	
	НовСтр.ДатаПлатежа = ДатаТекПлатежа;
	НовСтр.ПроцентОплаты = ПроцентОплаты;
		
КонецПроцедуры

&НаСервере
Процедура РазбитьПлатежЗавершениеНаСервере(КоличествоПлатежей, ПериодичностьПлатежа, ФормаОплаты, ДанныеОплаты, ЕжемесячныйПлатеж, ДатаТекПлатежа, ЕжемесячныйПроцент, Сумма, ПроцентОплаты) 
	
	
	Для Счетчик = 1 По КоличествоПлатежей - 2 Цикл
		
		
		НовСтр = Объект.ЭтапыОплаты.Добавить();
		НовСтр.ФормаОплаты = ФормаОплаты;
		НовСтр.ДанныеОплаты = ДанныеОплаты;
		НовСтр.СуммаПлатежа = ЕжемесячныйПлатеж;
		НовСтр.ДатаПлатежа = ДатаТекПлатежа;
		НовСтр.ПроцентОплаты = ЕжемесячныйПроцент;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата >= &Дата
		|	И ДанныеПроизводственногоКалендаря.ВидДня = &ВидДня
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеПроизводственногоКалендаря.Дата";
		
		Запрос.УстановитьПараметр("ВидДня", Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
		Запрос.УстановитьПараметр("Дата", НовСтр.ДатаПлатежа);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда		
			НовСтр.ДатаПлатежа = ВыборкаДетальныеЗаписи.Дата;
		Иначе		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон("Платеж на дату %1 заполнен по каледарным дням, так как на эту дату не заполнен производственный календарь",
			Формат(ДатаТекПлатежа,"ДФ=dd.MM.yyyy")));		
		КонецЕсли;
				

		ДатаТекПлатежа = ДобавитьМесяц(ДатаТекПлатежа, ПериодичностьПлатежа);		
		Сумма = Сумма - ЕжемесячныйПлатеж;
		ПроцентОплаты = ПроцентОплаты - ЕжемесячныйПроцент;
		
		
	КонецЦикла;
	
	НовСтр = Объект.ЭтапыОплаты.Добавить();
	НовСтр.ФормаОплаты = ФормаОплаты;
	НовСтр.ДанныеОплаты = ДанныеОплаты;
	НовСтр.СуммаПлатежа = Сумма; 	
	НовСтр.ДатаПлатежа = ДатаТекПлатежа;
	НовСтр.ПроцентОплаты = ПроцентОплаты;
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоговораПриИзмененииЗавершениеБронь(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.Дата = Объект.ДатаПодписания + 1;
		ИзменитьДатуБрониНаСервере(Объект.ЗаказКлиента, Объект.ДатаПодписания);
		Оповестить("ПеречитатьБронь", Объект.ЗаказКлиента, ЭтотОбъект);
		ДатаБрони = Объект.ДатаПодписания;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоговораПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Дата = Объект.ДатаПодписания + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьДатуБрониНаСервере(Бронь, Дата)

	УстановитьПривилегированныйРежим(Истина);
	
	ДокОбъект = Бронь.ПолучитьОбъект();
	ДокОбъект.Дата = Дата;
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);	

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанкИзКредитногоДоговора(КредитныйДоговор) 
	Возврат КредитныйДоговор.Кредитор.Банк;		
КонецФункции  

&НаКлиенте
Процедура ПреобразоватьВДКП(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПреобразоватьВДКППродолжение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОбъектНедвижимости", Объект.ОбъектНедвижимости);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторОбъектаМетаданных", ИдентификаторДокумента);
	Отбор.Вставить("ТипДоговора", ПредопределенноеЗначение("Перечисление.УПДК_ТипыДоговоров.ДКП")); 
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.УПДК_ВидыПравовыхДокументов.Форма.ФормаВыбораДоговор",ПараметрыФормы,ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВДКППродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НомерПДКП = Объект.Номер;
	Объект.ДатаПодписанияПДКП = Объект.ДатаПодписания;
	Объект.ДатаОформленияПДКП = Объект.Дата;
	Объект.ОтветственныйПДКП = Объект.Ответственный; 	
	
	Объект.Номер = Неопределено;
	Объект.ДатаПодписания = Неопределено;
	Объект.Дата = ТекущаяДата();  
	
	Объект.ВидПравовогоДокумента = Результат;	
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаЗавышенияПриИзменении(Элемент)
	
	ОбновитьИтоговуюСуммуНоменклатурыИДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСубсидированиеПриИзменении(Элемент)
	
	ОбновитьИтоговуюСуммуНоменклатурыИДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПравовогоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ИдентификаторОбъектаМетаданных", ИдентификаторДокумента);
	
	МассивПараметровВыбора = Новый Массив(Элементы.ВидПравовогоДокумента.ПараметрыВыбора);
	МассивПараметровВыбора.Добавить(НовыйПараметр);
	НовыйПараметр = Новый ПараметрВыбора("Дата", Объект.Дата);
	МассивПараметровВыбора.Добавить(НовыйПараметр);
	НовыйПараметр = Новый ПараметрВыбора("Ссылка", Объект.Ссылка);
	МассивПараметровВыбора.Добавить(НовыйПараметр);
	
	Элементы.ВидПравовогоДокумента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЦенуСкидкуСумму()
	
	ПересчитатьСкидку();
	ОбновитьИтоговуюСуммуНоменклатурыИДокумента();	
	ОбновитьЦенуНедвижимости();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСкидку()
	
	Объект.Сумма = УПДК_Ценообразование.РасчетСкидокНаценокНаОбъектНедвижимости(Объект.ВидЦены, Объект.ОбъектНедвижимости, ТаблицаСкидокНаценок, Объект.СуммаБезСкидки, НовыйФорматПримененияСкидок, Объект.Скидка, Объект.ВидСкидки, СкидкаНаценка,, Истина, РучныеСкидки);	
	Для каждого ТекСтр Из ТаблицаСкидокНаценок Цикл
		ТекСтр.Размер = Строка(ТекСтр.Сумма) + " руб.";
	КонецЦикла;
	ОбновитьИтоговуюСуммуСкидокНаценок();
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьИтоговуюСуммуСкидокНаценок()
		
	СуммаБезСкидки = Объект.СуммаБезСкидки;
	СуммаСкидкиНаценки = СуммаБезСкидки - Объект.Сумма;		
		
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьВознаграждениеНаСервере()
	
	Объект.D4_ВознаграждениеЗастройщика = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_ФиксированныеЦеныНедвижимостиСрезПоследних.Цена КАК Цена,
	|	УПДК_ФиксированныеЦеныНедвижимостиСрезПоследних.ВидОперации КАК ВидОперации
	|ИЗ
	|	РегистрСведений.УПДК_ФиксированныеЦеныНедвижимости.СрезПоследних(
	|			&Период,
	|			ВидЦены = &ВидЦены
	|				И ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_ФиксированныеЦеныНедвижимостиСрезПоследних";
	
	Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.Учетная);
	Запрос.УстановитьПараметр("ОбъектНедвижимости", Объект.ОбъектНедвижимости);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Если ВыборкаДетальныеЗаписи.ВидОперации = Перечисления.УПДК_ВидыОперацийУстановкиФиксированныхЦен.ЦенаЗаКВМ Тогда
			Объект.D4_ВознаграждениеЗастройщика = Окр(Объект.СуммаДокумента - Объект.ОбъектНедвижимости.ОбщаяПлощадьПроектная * ВыборкаДетальныеЗаписи.Цена,-1);
		ИначеЕсли ВыборкаДетальныеЗаписи.ВидОперации = Перечисления.УПДК_ВидыОперацийУстановкиФиксированныхЦен.ЦенаЗаНедвижимость Тогда
			Объект.D4_ВознаграждениеЗастройщика = Объект.СуммаДокумента - ВыборкаДетальныеЗаписи.Цена;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.D4_ДоляЗастройщика = ?(Объект.СуммаДокумента = 0, 0, Объект.D4_ВознаграждениеЗастройщика / Объект.СуммаДокумента);
	
	Себестоимость = Объект.СуммаДокумента -  Объект.D4_ВознаграждениеЗастройщика;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкидкиНаценки()
	
	РучныеСкидки.Очистить();
	
	Для Каждого ТекСтр из Объект.СкидкиНаценки Цикл
		
		Если ТекСтр.РучнаяСкидка Тогда 
			
			НовСтр = РучныеСкидки.Добавить();
			НовСтр.СкидкаНаценка = ТекСтр.СкидкаНаценка;
			НовСтр.Сумма = ТекСтр.Сумма;
			
		Иначе
		КонецЕсли; 		
		
	КонецЦикла;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура РучныеСкидкиПриИзменении(Элемент)
	РассчитатьЦенуСкидкуСумму();
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьФормуПриСогласовании()
		
	Если Пользователи.РолиДоступны("ПолныеПрава") ИЛИ Пользователи.РолиДоступны("РазрешитьИзменятьСогласованныйДоговор") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Объект.Статус = Перечисления.СтатусыДоговоровСПокупателями.НаПодписании И Пользователи.РолиДоступны("РазрешитьИзменятьДоговорНаСтадииСогласования") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_НастройкиСогласованияДокументов.КартаМаршрута КАК КартаМаршрута,
	|	УПДК_НастройкиСогласованияДокументов.ВариантЗавершенияУспешно КАК ВариантЗавершенияУспешно,
	|	УПДК_НастройкиСогласованияДокументов.РазрешитьИзменятьСтатус КАК РазрешитьИзменятьСтатус,
	|	УПДК_НастройкиСогласованияДокументов.БлокироватьФормуДокумента КАК БлокироватьФормуДокумента
	|ИЗ
	|	РегистрСведений.УПДК_НастройкиСогласованияДокументов КАК УПДК_НастройкиСогласованияДокументов
	|ГДЕ
	|	УПДК_НастройкиСогласованияДокументов.ТипДокумента = &ТипДокумента
	|	И УПДК_НастройкиСогласованияДокументов.БлокироватьФормуДокумента";
	
	Запрос.УстановитьПараметр("ТипДокумента", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.РеализацияНедвижимости")));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НастройкиСогласования = РезультатЗапроса.Выбрать();
	
	Если НастройкиСогласования.Следующий() Тогда
		
		//Ищем запущенный БП
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|ГДЕ
		|	CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута
		|	И CRM_БизнесПроцесс.Предмет = &Предмет
		|	И CRM_БизнесПроцесс.Стартован
		|	И НЕ CRM_БизнесПроцесс.Завершен
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_БизнесПроцесс.ДатаСтарта УБЫВ";
		
		Запрос.УстановитьПараметр("КартаМаршрута", НастройкиСогласования.КартаМаршрута);
		Запрос.УстановитьПараметр("Предмет", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		АктивныйБП = РезультатЗапроса.Выбрать();
		
		Если АктивныйБП.Следующий() Тогда
			
			//ИщемИсполнителяАктивнойзадачи 	
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
			|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			|	И НЕ ЗадачаИсполнителя.Выполнена
			|	И ЗадачаИсполнителя.ПринятаКИсполнению
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗадачаИсполнителя.Дата УБЫВ";
			
			Запрос.УстановитьПараметр("БизнесПроцесс", АктивныйБП.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			АктивнаяЗадача = РезультатЗапроса.Выбрать();
			
			Если АктивнаяЗадача.Следующий() Тогда
				
				Если ПользователиКлиентСервер.ТекущийПользователь() <> АктивнаяЗадача.Исполнитель Тогда						
					
					
					Для Каждого ТекЭлемент из Элементы Цикл
						
						Попытка
							ТекЭлемент.ТолькоПросмотр = Истина;
						Исключение
						КонецПопытки;
						
					КонецЦикла;
					Элементы.ПодписантыОрганизацияЗаполнитьПодписантовСторона1.Доступность = Ложь;
					Элементы.ПодписантыКлиентЗаполнитьПодписантовСторона2.Доступность = Ложь;					
					Элементы.ПодписантыКлиентЗаполнитьДолиВРавныхДолях.Доступность = Ложь;
					Элементы.ЭтапыОплатыЗаполнитьПоГрафикуОплаты.Доступность = Ложь;
					Элементы.ПеренаправитьСделку.Доступность = Ложь;
					Элементы.ЗаполнитьПоЗаказу.Доступность = Ложь;   				
					Элементы.ЭтапыОплатыРазбитьПлатеж.Доступность = Ложь;
					
				КонецЕсли;	
				
			Иначе					
				
				Для Каждого ТекЭлемент из Элементы Цикл
					
					Попытка
						ТекЭлемент.ТолькоПросмотр = Истина;
					Исключение
					КонецПопытки;
					
				КонецЦикла;
				
				Элементы.ПодписантыОрганизацияЗаполнитьПодписантовСторона1.Доступность = Ложь;
				Элементы.ПодписантыКлиентЗаполнитьПодписантовСторона2.Доступность = Ложь;					
				Элементы.ПодписантыКлиентЗаполнитьДолиВРавныхДолях.Доступность = Ложь;
				Элементы.ЭтапыОплатыЗаполнитьПоГрафикуОплаты.Доступность = Ложь;
				Элементы.ПеренаправитьСделку.Доступность = Ложь;
				Элементы.ЗаполнитьПоЗаказу.Доступность = Ложь;
				Элементы.ЭтапыОплатыРазбитьПлатеж.Доступность = Ложь;
				
			КонецЕсли; 				
			
		Иначе
			
			//Ищем завершенный БП
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
			|ИЗ
			|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
			|ГДЕ
			|	CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута
			|	И CRM_БизнесПроцесс.Предмет = &Предмет
			|	И CRM_БизнесПроцесс.ВариантЗавершения = &ВариантЗавершения
			|	И CRM_БизнесПроцесс.Завершен
			|
			|УПОРЯДОЧИТЬ ПО
			|	CRM_БизнесПроцесс.ДатаЗавершения УБЫВ";
			
			Запрос.УстановитьПараметр("ВариантЗавершения", НастройкиСогласования.ВариантЗавершенияУспешно);
			Запрос.УстановитьПараметр("КартаМаршрута", НастройкиСогласования.КартаМаршрута);
			Запрос.УстановитьПараметр("Предмет", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ЗавершенныйБП = РезультатЗапроса.Выбрать();
			
			Если ЗавершенныйБП.Следующий() Тогда
				
				Для Каждого ТекЭлемент из Элементы Цикл
					
					Попытка
						ТекЭлемент.ТолькоПросмотр = Истина;
					Исключение
					КонецПопытки;
					
				КонецЦикла;
				
				
				//Блокируем всё кроме статуса
				//Элементы.ГруппаЗаказКлиента.ТолькоПросмотр = Истина;
				//Элементы.ГруппаНедвижимость.ТолькоПросмотр = Истина; 					
				Элементы.Статус.ТолькоПросмотр = Ложь;
				//Элементы.ПричинаОтказа.ТолькоПросмотр = Ложь;
				Элементы.ДатаДоговора.ТолькоПросмотр = Ложь;
				//Элементы.ГруппаДатаПодписанияСтатус.ТолькоПросмотр = Ложь;
				
				Элементы.ПодписантыОрганизацияЗаполнитьПодписантовСторона1.Доступность = Ложь;
				Элементы.ПодписантыКлиентЗаполнитьПодписантовСторона2.Доступность = Ложь;					
				Элементы.ПодписантыКлиентЗаполнитьДолиВРавныхДолях.Доступность = Ложь;
				Элементы.ЭтапыОплатыЗаполнитьПоГрафикуОплаты.Доступность = Ложь;
				Элементы.ПеренаправитьСделку.Доступность = Ложь;
				Элементы.ЗаполнитьПоЗаказу.Доступность = Ложь;
				Элементы.ЭтапыОплатыРазбитьПлатеж.Доступность = Ложь;
				
			Иначе
				
				Для Каждого ТекЭлемент из Элементы Цикл
					
					Попытка
						ТекЭлемент.ТолькоПросмотр = Ложь;
					Исключение
					КонецПопытки;
					
				КонецЦикла;
				
				Элементы.ПодписантыОрганизацияЗаполнитьПодписантовСторона1.Доступность = Истина;
				Элементы.ПодписантыКлиентЗаполнитьПодписантовСторона2.Доступность = Истина;					
				Элементы.ПодписантыКлиентЗаполнитьДолиВРавныхДолях.Доступность = Истина;
				Элементы.ЭтапыОплатыЗаполнитьПоГрафикуОплаты.Доступность = Истина;
				Элементы.ПеренаправитьСделку.Доступность = Истина;
				Элементы.ЗаполнитьПоЗаказу.Доступность = Истина;
				Элементы.ЭтапыОплатыРазбитьПлатеж.Доступность = Истина; 					
				
			КонецЕсли;	
			
			
		КонецЕсли;			
		
		Элементы.Комментарий.Доступность = Истина;
		
	КонецЕсли;   	
	
	Если Пользователи.РолиДоступны("РазрешитьИзменятьОтветственного") Тогда
	    Элементы.ПеренаправитьСделку.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрВкладки(Элемент)
	// Вставить содержимое обработчика.
		ПриВыбореСтрВкладкиНаСервере(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура ПриВыбореСтрВкладкиНаСервере(ОсновнойЭлемент)
	
	Для каждого ТекЭлемент из Элементы.СтраницыНью.ПодчиненныеЭлементы Цикл
		ИмяЭлемента = Прав(ТекЭлемент.Имя,СтрДлина(СокрЛП(СтрЗаменить((ТекЭлемент.Имя),"Гру",""))));
		
		//Если ИмяЭлемента <> "СтрЦвет_ОстаточнаяЛиния" тогда
			ИмяЭлементаЦвет = СтрЗаменить(ИмяЭлемента,"Стр","СтрЦвет_");
			ИмяЭлементаСтраница = СтрЗаменить(ИмяЭлемента,"Стр","Страница");
		//Иначе
		    //ИмяЭлементаЦвет = ИмяЭлемента;
			//ИмяЭлементаСтраница = Неопределено;
		//КонецЕсли; 
		
		ВыбранныйЭлемент = Элементы.Найти(ИмяЭлемента);
		ВыбранныйЭлементЦвет = Элементы.Найти(ИмяЭлементаЦвет);
		ВыбранныйЭлементСтраница = Элементы.Найти(ИмяЭлементаСтраница);
		
		Если ИмяЭлемента = ОсновнойЭлемент Тогда
			Элементы.Страницы.ТекущаяСтраница = ВыбранныйЭлементСтраница;
			ВыбранныйЭлемент.Шрифт = Новый Шрифт(,,Истина);
			ВыбранныйЭлементЦвет.ЦветФона = ЦветаСтиля.АкцентныйЦветИЦветИнтерактивныхЭлементов;		
		Иначе
			ВыбранныйЭлемент.Шрифт = Новый Шрифт(,,Ложь);
			ВыбранныйЭлемент.ЦветФона = Новый Цвет(255,255,255);
			ВыбранныйЭлементЦвет.ЦветФона = Новый Цвет(255,255,255);
		КонецЕсли;
	Конеццикла;

	//	Если ОсновнойЭлемент = "СтрДоговор" Тогда
	//	 Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоговор;
	//	 Элементы.СтрЦвет_Договор.ЦветФона = ЦветаСтиля.АкцентныйЦветИЦветИнтерактивныхЭлементов;
	//	 Элементы.СтрДоговор.Шрифт = Новый Шрифт(,,Истина);
	//     Элементы.СтрСкидкиИНаценки.Шрифт = Новый Шрифт(,,Ложь);
	//	 Элементы.СтрЦвет_СкидкиИНаценки.ЦветФона = Новый Цвет(255,255,255);
	//	 Элементы.СтрЦвет_ТоварыИУслуги.ЦветФона = Новый Цвет(255,255,255)
	//ИначеЕсли ОсновнойЭлемент = "СтрСкидкиИНаценки" Тогда
	//	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСкидкиНаценки;
	//	Элементы.СтрСкидкиИНаценки.Шрифт = Новый Шрифт(,,Истина);
	//	Элементы.СтрЦвет_СкидкиИНаценки.ЦветФона = ЦветаСтиля.АкцентныйЦветИЦветИнтерактивныхЭлементов;
	//	
	//	Элементы.СтрДоговор.Шрифт = Новый Шрифт(,,Ложь);
	//	Элементы.СтрЦвет_Договор.ЦветФона = Новый Цвет(255,255,255);
	//	Элементы.СтрЦвет_ТоварыИУслуги.ЦветФона = Новый Цвет(255,255,255);
	//ИначеЕсли ОсновнойЭлемент = "СтрТоварыИУслуги" Тогда
	//	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
	//	Элементы.СтрЦвет_ТоварыИУслуги.ЦветФона = ЦветаСтиля.АкцентныйЦветИЦветИнтерактивныхЭлементов;
	//	
	//	Элементы.СтрЦвет_Договор.ЦветФона = Новый Цвет(255,255,255);
	//	Элементы.СтрЦвет_СкидкиИНаценки.ЦветФона = Новый Цвет(255,255,255);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьСкрипт(Скрипт)
	
	ДИВ = Элементы.ПолеИстории.Документ.getElementById("runscript");
	НашлиАтрибут = ДИВ.getAttributeNode("onclick");
	Если НашлиАтрибут <> null Тогда
		ДИВ.removeAttribute("onclick");
	КонецЕсли;
	Атрибут  = Элементы.ПолеИстории.Документ.createAttribute("onclick"); //создаем атрибут
	Атрибут.value = Скрипт; // прописываем скрипт который будем выполнять
	ДИВ.attributes.setNamedItem(Атрибут); // привязываем атрибут
	ДИВ.click(); //кликаем

КонецФункции

&НаСервере
Процедура УПДК_ПоказатьЕщеНаСервере(); 
	
	УПДК_ОтображаемыхЗаписей = УПДК_ОтображаемыхЗаписей + УПДК_СчетчикЗаписей;
	ИсторияСобытия = УПДК_События.СформироватьИсториюСобытияНовый(УПДК_ВсегоЗаписей, ЭтотОбъект, Объект.Клиент, УПДК_ОтображаемыхЗаписей);	

КонецПроцедуры // УПДК_дПоказатьЕщёНажатиеНаСервере()

&НаСервере
Процедура УПДК_ПоказатьВсеНаСервере(); 
	
	ИсторияСобытия = УПДК_События.СформироватьИсториюСобытияНовый(УПДК_ВсегоЗаписей, ЭтотОбъект, Объект.Клиент, УПДК_ВсегоЗаписей);	

КонецПроцедуры // УПДК_дПоказатьЕщёНажатиеНаСервере()

&НаСервере
Процедура УПДК_ОбнулитьСчетчикиЗаписейИстории()

	//УПДК_ВсегоЗаписей = УПДК_События.ПолучитьОбщееКоличествоСобытий(Объект.Ссылка, Объект.Клиент);
	УПДК_СчетчикЗаписей = 25;
	УПДК_ОтображаемыхЗаписей = 25;

КонецПроцедуры // УПДК_ОбнулитьСчетчикиЗаписейИстории()

&НаКлиенте
Процедура ПослеВыбораСледШага(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат.Значение)  Тогда
	    Возврат;
	ИначеЕсли Результат.Значение = "ОформитьЗаказКлиента" Тогда	
		ОформитьЗаказКлиента(Неопределено);
	ИначеЕсли Результат.Значение = "ОформитьДоговорПереуступки" Тогда
		ОформитьДоговорПереуступки(Неопределено);
	ИначеЕсли Результат.Значение = "ПередаточныйАкт" Тогда
		ПередаточныйАкт(Неопределено);
	ИначеЕсли Результат.Значение = "ОформитьРасторжение" Тогда  
		ОформитьРасторжение(Неопределено);
	ИначеЕсли Результат.Значение = "ИзменитьЗаказКлиента" Тогда
		ИзменитьЗаказКлиента(Неопределено);
	ИначеЕсли Результат.Значение = "СнятьБронь" Тогда
		СнятьБронь(Неопределено);
	ИначеЕсли Результат.Значение = "ПродлитьБронь" Тогда
		ПродлитьБронь(Неопределено);
	ИначеЕсли Результат.Значение = "ПредЗаказ" Тогда
		ПредЗаказ(Неопределено);
	ИначеЕсли Результат.Значение = "АккредитивВходящий" Тогда
		АккредитивВходящий(Неопределено);
	КонецЕсли;

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьСделку(Событие)
	
 	Возврат Документы.Сделка.ПолучитьСделкуПоДокументу(Событие);

КонецФункции

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
		
	ИсторияСобытия = УПДК_События.СформироватьИсториюСобытияНовый(УПДК_ВсегоЗаписей, ЭтотОбъект, Объект.Клиент,, Сделка, УникальныйИдентификатор);
	
	Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(Объект.Ссылка);
	
	ПолеПайпЛаин  = УПДК_События.СформироватьПайпЛаин(Сделка,ЭтаФорма.УникальныйИдентификатор);
	
	////Анкетирование
	//УПДК_Анкетирование.ОбновитьЭлементыФормы(ЭтотОбъект, "ГруппаАнкетирование");
	////Конец Анкетирование
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерТелефонаПартнера(Партнер)
	
	КонтактноеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "ОсновноеКонтактноеЛицо");
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
	    Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица);
	Иначе	
	    Возврат "";
	КонецЕсли;
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ЗаполнитьЗначениеЗаполнения(ОбъектНедвижимости, ЗначениеЗаполнения)
	
	ЗначениеЗаполнения.Вставить("Район", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНедвижимости, "Район"));
	ЗначениеЗаполнения.Вставить("Объект", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНедвижимости, "Объект"));
	ЗначениеЗаполнения.Вставить("Секция", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНедвижимости, "Секция"));
	ЗначениеЗаполнения.Вставить("Этаж", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНедвижимости, "Этаж"));
	ЗначениеЗаполнения.Вставить("НомерНаЭтаже", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНедвижимости, "НомерНаЭтаже"));

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСкидкиНаСервере()
	
	ТаблицаСкидокНаценок.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УПДК_Ценообразование.ЗаполнитьСкидкиНаценкиОбъектаНедвижимости(Объект.Дата, Объект.ОбъектНедвижимости, ТаблицаСкидокНаценок, РучныеСкидки, Объект.СкидкиНаценки, Объект.СуммаБезСкидки, НовыйФорматПримененияСкидок);			
	Объект.Сумма = УПДК_Ценообразование.РасчетСкидокНаценокНаОбъектНедвижимости(Объект.ВидЦены, Объект.ОбъектНедвижимости, ТаблицаСкидокНаценок, Объект.СуммаБезСкидки, НовыйФорматПримененияСкидок, Объект.Скидка, Объект.ВидСкидки, СкидкаНаценка,,, РучныеСкидки);	
	
	Для каждого ТекСтр Из ТаблицаСкидокНаценок Цикл
		ТекСтр.Размер = Строка(ТекСтр.Сумма) + " руб.";
	КонецЦикла;
	
	УстановитьЗаголовокСкидкиНаценки(ТаблицаСкидокНаценок, ЗаголовокСкидкиНаценки);		
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШахматку() Экспорт
	
	Если УПДК_НедвижимостьВызовСервера.ОткрытьНовуюШахматку() Тогда
		ВыбраннаяФорма = "Обработка.ШахматкаНедвижимости.Форма.ШахматкаНовая";		
	Иначе		
		ВыбраннаяФорма = "Обработка.ШахматкаНедвижимости.Форма.Шахматка";
	КонецЕсли;	
	ОткрытьФорму(ВыбраннаяФорма, Новый Структура("РежимВыбора, ВыбиратьОбъектНедвижимости", Истина, Истина), Элементы.ОбъектНедвижимости,,,, Новый ОписаниеОповещения("ПриВыбореОбъектаНедвижимости", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборНедвижимостиЗавершение(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если УПДК_НедвижимостьВызовСервера.ОткрытьНовуюШахматку() Тогда
			ВыбраннаяФорма = "Обработка.ШахматкаНедвижимости.Форма.ШахматкаНовая";		
		Иначе		
			ВыбраннаяФорма = "Обработка.ШахматкаНедвижимости.Форма.Шахматка";
		КонецЕсли;	
		ОткрытьФорму(ВыбраннаяФорма, Новый Структура("РежимВыбора, ВыбиратьОбъектНедвижимости", Истина, Истина), Элементы.ОбъектНедвижимости,,,, Новый ОписаниеОповещения("ПриВыбореОбъектаНедвижимости", ЭтотОбъект));
	КонецЕсли; 	
		
КонецПроцедуры

Процедура ПриВыбореОбъектаНедвижимости(Результат, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
	    Объект.ОбъектНедвижимости = Результат;
		ПриИзмененииОбъектаНедвижимости();
		ЗаполнитьПодписантовСторона1Сервер();
		ЗаполнитьПодписантовСторона2Сервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОбъектаНедвижимости()
		
	ПлощадьНедвижимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектНедвижимости, "ОбщаяПлощадьДляЦен");
	
	мОрганизация = УПДК_Недвижимость.СобственникНедвижимостиНаДату(Объект.ОбъектНедвижимости, Объект.Дата);
	Если ТипЗнч(мОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		Объект.Организация = мОрганизация;
	Иначе
		Объект.Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	ПриИзмененииОрганизации();
	
	ЗаполнитьСкидкиНаСервере();
	РассчитатьЦенуСкидкуСумму();	
	
	ОбновитьДоступностьСкидокНаСервере();
	
	Если ИспользоватьНоменклатуру Тогда
		
		Объект.Запасы.Очистить();
		
		Номенклатура = Объект.ОбъектНедвижимости.Отделка.Номенклатура;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			НовСтрЗапасы = Объект.Запасы.Добавить();
			НовСтрЗапасы.Номенклатура = Номенклатура;
			ТекущаяСтрока = НовСтрЗапасы;
			СтавкаНДСПоУмолчанию = УПДК_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Организация, "СтавкаНДСПоУмолчанию");
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("СтавкаНДСПоУмолчанию", СтавкаНДСПоУмолчанию));
			СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмерения");
			СтруктураДействий.Вставить("ПересчитатьЦену", Новый Структура("Дата, ВидЦены, ОбъектНедвижимости", Объект.Дата, Объект.ВидЦены, Объект.ОбъектНедвижимости));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьВсего", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС, ИспользоватьСтавкиНДС", Объект.ЦенаВключаетНДС, ИспользоватьСтавкиНДС));	
			
			УПДК_Продажи.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
				
		КонецЕсли;
		
		ОбновитьИтоговуюСуммуНоменклатурыИДокумента();
		
	КонецЕсли;
	
	//Анкетирование
	УПДК_Анкетирование.ОбновитьЭлементыФормы(ЭтотОбъект, "ГруппаАнкетирование");	
	//Конец Анкетирование

	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Период, Организация", Объект.Дата, Объект.Организация));
	ИспользоватьСтавкиНДС = CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(Объект.Организация, Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтавкаНДСПоУмолчанию = УПДК_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Организация, "СтавкаНДСПоУмолчанию");
	Иначе
		СтавкаНДСПоУмолчанию = Неопределено;
	КонецЕсли;	
	
	ОбновитьСтавкиНДССуммыНДСНоменклатуры();
	РассчитатьЦенуСкидкуСумму();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура ("ИспользоватьСтавкиНДС, СтавкаНДСПоУмолчанию", ИспользоватьСтавкиНДС, СтавкаНДСПоУмолчанию));	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС, ИспользоватьСтавкиНДС", Объект.ЦенаВключаетНДС, ИспользоватьСтавкиНДС));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуДокумента");
		
	УПДК_Продажи.ОбработатьФормуДокумента(ЭтотОбъект, СтруктураДействий, Неопределено); 
	
КонецПроцедуры

//Создание блоков товаров и услуг для вкладки Товары и Услуги
&НаСервере
Процедура СозданиеГруппТоваровИУслуг()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияНедвижимостиЗапасы.Номенклатура КАК Номенклатура,
		|	СУММА(РеализацияНедвижимостиЗапасы.Всего) КАК Всего
		|ПОМЕСТИТЬ Запасы
		|ИЗ
		|	Документ.РеализацияНедвижимости.Запасы КАК РеализацияНедвижимостиЗапасы
		|ГДЕ
		|	РеализацияНедвижимостиЗапасы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияНедвижимостиЗапасы.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураТаб.Наименование КАК Наименование,
		|	НоменклатураТаб.Описание КАК Описание,
		|	НоменклатураТаб.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(Запасы.Всего, 0) КАК Всего
		|ИЗ
		|	Справочник.Номенклатура КАК НоменклатураТаб
		|		ЛЕВОЕ СОЕДИНЕНИЕ Запасы КАК Запасы
		|		ПО НоменклатураТаб.Ссылка = Запасы.Номенклатура
		|ГДЕ
		|	НЕ НоменклатураТаб.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	//ТаблицаТоваров = Элементы.Запасы.ТекущиеДанные;
	ОсновнаяГруппа = Элементы.ОсновнаяГруппаТоваровИУслуг.ПодчиненныеЭлементы;
	
	// Массив для новых реквизитов
    ДобавляемыеРеквизиты	= Новый Массив;
		
	НомерТовара = 0;
	РядТоваров = 0;
	НомераНоменклатуры = Новый Структура;
	
	Пока РезультатЗапроса.Следующий() Цикл
		ЦелНомерТовара = НомерТовара/3;
		Если ЦелНомерТовара = Цел(ЦелНомерТовара) тогда
			//ПодГруппа Горизонтальная
			РядТоваров = РядТоваров + 1;
			ИмяГоризГруппы = "ГруппаРядТоваров" + РядТоваров;
			ИмяГоризГруппы = Элементы.Добавить(ИмяГоризГруппы, Тип("ГруппаФормы"),Элементы.ОсновнаяГруппаТоваровИУслуг);
			ИмяГоризГруппы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ИмяГоризГруппы.Заголовок = "Основные реквизиты";
			ИмяГоризГруппы.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			ИмяГоризГруппы.ОтображатьЗаголовок = Ложь; 
			ИмяГоризГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ИмяГоризГруппы.РастягиватьПоГоризонтали = Истина;
			ИмяГоризГруппы.РастягиватьПоВертикали = ложь;
			ИмяГоризГруппы.Высота = 16;	
		КонецЕсли;	
		//Для каждого ПодГруппа из ОсновнаяГруппа Цикл		
		Попытка
		
			НомерТовара = НомерТовара + 1;
			НомераНоменклатуры.Вставить("Ном" + Строка(НомерТовара), Новый Структура("Номенклатура, ЕдиницаИзмерения", РезультатЗапроса.Ссылка, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РезультатЗапроса.Ссылка, "ЕдиницаИзмерения")));
			// Опишем ревизиты формы
			Реквизит_Цена = Новый РеквизитФормы("Цена" + НомерТовара,	Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)), , "Цена");
			Реквизит_Скидка = Новый РеквизитФормы("Количество" + НомерТовара,	Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15)), , "Количество");
			
			// Заполним массив
			ДобавляемыеРеквизиты.Добавить(Реквизит_Цена);
			ДобавляемыеРеквизиты.Добавить(Реквизит_Скидка);
			// Добавим новые реквизиты в форму
			ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			ДобавляемыеРеквизиты.Очистить();

			//Если ПодГруппа.НаименованиеТовара.Заголовок <> РезультатЗапроса.Наименование тогда											
			//ПодГруппа Блока
			
			ИмяГруппы = "ГруппаБлокТовара" + НомерТовара;
			ИмяГруппы = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"),ИмяГоризГруппы);
			ИмяГруппы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ИмяГруппы.Заголовок = "Основные реквизиты";
			ИмяГруппы.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			ИмяГруппы.ОтображатьЗаголовок = Ложь; 
			ИмяГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ИмяГруппы.РастягиватьПоГоризонтали = ложь;
			ИмяГруппы.РастягиватьПоВертикали = ложь;
			ИмяГруппы.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
			ИмяГруппы.Ширина = 25;
			ИмяГруппы.Высота = 16;
			
			////Отступ
			ОтступНаименованиеПередГруппой = "ОтступНаименованиеПередГруппой" + НомерТовара;
			ОтступНаименованиеПередГруппой = Элементы.Добавить(ОтступНаименованиеПередГруппой, Тип("ДекорацияФормы"), ИмяГруппы);
			ОтступНаименованиеПередГруппой.Вид = ВидДекорацииФормы.Надпись;
			ОтступНаименованиеПередГруппой.Заголовок = "";
			ОтступНаименованиеПередГруппой.Ширина = 1;
			ОтступНаименованиеПередГруппой.Высота = 0;
			ОтступНаименованиеПередГруппой.РастягиватьПоВертикали = Ложь;
			
			//Подгруппа НоменклатураОписание
			ГруппаНоменклатураОписание = "ГруппаНоменклатураОписание" + НомерТовара;
			ГруппаНоменклатураОписание = Элементы.Добавить(ГруппаНоменклатураОписание, Тип("ГруппаФормы"),ИмяГруппы);
			ГруппаНоменклатураОписание.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаНоменклатураОписание.Заголовок = "Группа Наименование";
			ГруппаНоменклатураОписание.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			ГруппаНоменклатураОписание.ОтображатьЗаголовок = Ложь; 
			ГруппаНоменклатураОписание.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаНоменклатураОписание.РастягиватьПоГоризонтали = Истина;
			//ГруппаНоменклатураОписание.РастягиватьПоВертикали = Истина;
			ГруппаНоменклатураОписание.Ширина = 26;
			//ГруппаНоменклатураОписание.Высота = 3;
			
			//Подгруппа Номенклатуры
			ГруппаНаимнованияТовара = "ГруппаНаимнованияТовара" + НомерТовара;
			ГруппаНаимнованияТовара = Элементы.Добавить(ГруппаНаимнованияТовара, Тип("ГруппаФормы"),ГруппаНоменклатураОписание);
			ГруппаНаимнованияТовара.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаНаимнованияТовара.Заголовок = "Группа Наименование";
			ГруппаНаимнованияТовара.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			ГруппаНаимнованияТовара.ОтображатьЗаголовок = Ложь; 
			ГруппаНаимнованияТовара.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаНаимнованияТовара.РастягиватьПоГоризонтали = Истина;
			ГруппаНаимнованияТовара.РастягиватьПоВертикали = Ложь;
			ГруппаНаимнованияТовара.Ширина = 26;
			
			////Отступ
			//ОтступНаименование = "ОтступНаименование" + НомерТовара;
			//ОтступНаименование = Элементы.Добавить(ОтступНаименование, Тип("ДекорацияФормы"), ГруппаНаимнованияТовара);
			//ОтступНаименование.Вид = ВидДекорацииФормы.Надпись;
			//ОтступНаименование.Заголовок = " ";
			//ОтступНаименование.Ширина = 1;
			//ОтступНаименование.Высота = 0;
			
			//Наименование
			НаименованиеТовара = "Наименование" + НомерТовара;
			НаименованиеТовара = Элементы.Добавить(НаименованиеТовара, Тип("ДекорацияФормы"), ГруппаНаимнованияТовара);
			НаименованиеТовара.Вид = ВидДекорацииФормы.Надпись;
			НаименованиеТовара.Заголовок = РезультатЗапроса.Наименование;
			НаименованиеТовара.Шрифт = Новый Шрифт(,10,Истина);
			НаименованиеТовара.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			
			//Подгруппа Описание
			ГруппаОписанияТовара = "ГруппаОписанияТовара" + НомерТовара;
			ГруппаОписанияТовара = Элементы.Добавить(ГруппаОписанияТовара, Тип("ГруппаФормы"),ГруппаНоменклатураОписание);
			ГруппаОписанияТовара.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОписанияТовара.Заголовок = "Группа Наименование";
			ГруппаОписанияТовара.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			ГруппаОписанияТовара.ОтображатьЗаголовок = Ложь; 
			ГруппаОписанияТовара.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаОписанияТовара.РастягиватьПоГоризонтали = Истина;
			ГруппаОписанияТовара.РастягиватьПоВертикали = Ложь;
			ГруппаОписанияТовара.Ширина = 26;
			ГруппаОписанияТовара.Высота = 4;
			
			////Отступ
			//ОтступСодержание = "ОтступСодержание" + НомерТовара;
			//ОтступСодержание = Элементы.Добавить(ОтступСодержание, Тип("ДекорацияФормы"), ГруппаОписанияТовара);
			//ОтступСодержание.Вид = ВидДекорацииФормы.Надпись;
			//ОтступСодержание.Заголовок = " ";
			//ОтступСодержание.Ширина = 1;
			//ОтступСодержание.Высота = 0;
			
			//Описание
			СодержаниеТовара = "Содержание" + НомерТовара;
			СодержаниеТовара = Элементы.Добавить(СодержаниеТовара, Тип("ДекорацияФормы"), ГруппаОписанияТовара);
			СодержаниеТовара.Вид = ВидДекорацииФормы.Надпись;
			СодержаниеТовара.Заголовок = РезультатЗапроса.Описание;
			СодержаниеТовара.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			
			//Подгруппа Цен
			ИмяПодГруппыЦен = "ГруппаЦенТовара" + НомерТовара;
			ИмяПодГруппыЦен = Элементы.Добавить(ИмяПодГруппыЦен, Тип("ГруппаФормы"),ИмяГруппы);
			ИмяПодГруппыЦен.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ИмяПодГруппыЦен.Заголовок = "Группа цен";
			ИмяПодГруппыЦен.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			ИмяПодГруппыЦен.ОтображатьЗаголовок = Ложь; 
			ИмяПодГруппыЦен.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ИмяПодГруппыЦен.РастягиватьПоГоризонтали = Истина;
			ИмяПодГруппыЦен.РастягиватьПоВертикали = ложь;
			ИмяПодГруппыЦен.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
			ИмяПодГруппыЦен.Ширина = 26;
			
			//Цена
			ЦенаТовара = "Цена" + НомерТовара;
			ЦенаТовара = Элементы.Добавить(ЦенаТовара, Тип("ПолеФормы"), ИмяПодГруппыЦен);
			ЦенаТовара.Вид = ВидПоляФормы.ПолеВвода;
			ЦенаТовара.Заголовок = "Цена";
			ЦенаТовара.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			ЦенаТовара.ПутьКДанным = "Цена" + НомерТовара;
			ЦенаТовара.Ширина = 10;
			ЦенаТовара.РастягиватьПоГоризонтали = ложь;
			ЦенаТовара.ШрифтЗаголовка = Новый Шрифт (,,Истина);
			
			//Отступ
			Отступ = "Отступ" + НомерТовара;
			Отступ = Элементы.Добавить(Отступ, Тип("ДекорацияФормы"), ИмяПодГруппыЦен);
			Отступ.Вид = ВидДекорацииФормы.Надпись;
			Отступ.Заголовок = " ";
			Отступ.Ширина = 1;
			Отступ.Высота = 0;
			
			//Количество
			КоличествоТовара = "Количество" + НомерТовара;
			КоличествоТовара = Элементы.Добавить(КоличествоТовара, Тип("ПолеФормы"), ИмяПодГруппыЦен);
			КоличествоТовара.Вид = ВидПоляФормы.ПолеВвода;
			КоличествоТовара.Заголовок = "Количество";
			КоличествоТовара.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			КоличествоТовара.ПутьКДанным = "Количество" + НомерТовара;
			КоличествоТовара.Ширина = 10;
			КоличествоТовара.РастягиватьПоГоризонтали = ложь;
			КоличествоТовара.ШрифтЗаголовка = Новый Шрифт (,,Истина);
			КоличествоТовара.КнопкаРегулирования = Истина;
			
			//Подгруппа Подвал
			ИмяПодГруппыПодвал = "ИмяПодГруппыПодвал" + НомерТовара;
			ИмяПодГруппыПодвал = Элементы.Добавить(ИмяПодГруппыПодвал, Тип("ГруппаФормы"),ИмяГруппы);
			ИмяПодГруппыПодвал.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ИмяПодГруппыПодвал.Заголовок = "Группа цен";
			ИмяПодГруппыПодвал.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			ИмяПодГруппыПодвал.ОтображатьЗаголовок = Ложь; 
			ИмяПодГруппыПодвал.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ИмяПодГруппыПодвал.РастягиватьПоГоризонтали = Истина;
			ИмяПодГруппыПодвал.РастягиватьПоВертикали = Истина;
			ИмяПодГруппыПодвал.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Право;
			ИмяПодГруппыПодвал.Ширина = 26;
			ИмяПодГруппыПодвал.Высота = 2;
			
			//Отступ
			ОтступПодвалЦена = "ОтступПодвалЦена" + НомерТовара;
			ОтступПодвалЦена = Элементы.Добавить(ОтступПодвалЦена, Тип("ДекорацияФормы"), ИмяПодГруппыПодвал);
			ОтступПодвалЦена.Вид = ВидДекорацииФормы.Надпись;
			ОтступПодвалЦена.Заголовок = " ";
			ОтступПодвалЦена.Ширина = 1;
			ОтступПодвалЦена.Высота = 0;
			
			Добавлено = ЗначениеЗаполнено(РезультатЗапроса.Всего);
			
			//Итоговая Цена
			ИтогЦенаТовара = "ИтогЦена" + НомерТовара;
			ИтогЦенаТовара = Элементы.Добавить(ИтогЦенаТовара, Тип("ДекорацияФормы"), ИмяПодГруппыПодвал);
			ИтогЦенаТовара.Вид = ВидДекорацииФормы.Надпись;
			ИтогЦенаТовара.Заголовок = ?(Добавлено, Формат(РезультатЗапроса.Всего, "ЧДЦ=2"), "");
			ИтогЦенаТовара.Шрифт = Новый Шрифт(,12,Истина);
			
			//Отступ
			ОтступПодвал = "ОтступПодвал" + НомерТовара;
			ОтступПодвал = Элементы.Добавить(ОтступПодвал, Тип("ДекорацияФормы"), ИмяПодГруппыПодвал);
			ОтступПодвал.Вид = ВидДекорацииФормы.Надпись;
			ОтступПодвал.Заголовок = " ";
			ОтступПодвал.РастягиватьПоГоризонтали = Истина;
			ОтступПодвал.Высота = 0;
			
			//Кнопка Добавить
			КнопкаДобавить = "КнопкаДобавить" + НомерТовара;
			КнопкаДобавить = Элементы.Добавить(КнопкаДобавить, Тип("ДекорацияФормы"), ИмяПодГруппыПодвал);
			КнопкаДобавить.Вид = ВидДекорацииФормы.Картинка;
			КнопкаДобавить.Картинка = БиблиотекаКартинок.КнопкаДобавить;
			КнопкаДобавить.РазмерКартинки = РазмерКартинки.Растянуть;
			КнопкаДобавить.Гиперссылка = Истина;
			КнопкаДобавить.УстановитьДействие("Нажатие", "ДобавитьСуммуНоменклатурыНажатие");
			КнопкаДобавить.Видимость = Не Добавлено;
			КнопкаДобавить.Доступность = Не ЗначениеЗаполнено(БлокирующееДопСоглашение);
			
			//Подгруппа добавлено
			ГруппаДобавлено = "ГруппаДобавлено" + НомерТовара;
			ГруппаДобавлено = Элементы.Добавить(ГруппаДобавлено, Тип("ГруппаФормы"), ИмяПодГруппыПодвал);
			ГруппаДобавлено.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаДобавлено.Заголовок = "Группа добавлено";
			ГруппаДобавлено.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			ГруппаДобавлено.ОтображатьЗаголовок = Ложь; 
			ГруппаДобавлено.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаДобавлено.Видимость = Добавлено;
			ГруппаДобавлено.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			//Надпись добавлено
			Добавлено = "Добавлено" + НомерТовара;
			Добавлено = Элементы.Добавить(Добавлено, Тип("ДекорацияФормы"), ГруппаДобавлено);
			Добавлено.Вид = ВидДекорацииФормы.Надпись;
			Добавлено.Заголовок = "Добавлено";
			Добавлено.Шрифт = Новый Шрифт(,10,Истина);
						
			//Кнопка Убрать
			КнопкаДобавить = "КнопкаУбрать" + НомерТовара;
			КнопкаДобавить = Элементы.Добавить(КнопкаДобавить, Тип("ДекорацияФормы"), ГруппаДобавлено);
			КнопкаДобавить.Заголовок = "Убрать";
			КнопкаДобавить.Вид = ВидДекорацииФормы.Надпись;
			КнопкаДобавить.Гиперссылка = Истина;
			КнопкаДобавить.УстановитьДействие("Нажатие", "УбратьСуммуНоменклатурыНажатие");
			КнопкаДобавить.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;

			//Отступ
			ОтступПодвалКонец = "ОтступПодвалКонец" + НомерТовара;
			ОтступПодвалКонец = Элементы.Добавить(ОтступПодвалКонец, Тип("ДекорацияФормы"), ИмяПодГруппыПодвал);
			ОтступПодвалКонец.Вид = ВидДекорацииФормы.Надпись;
			ОтступПодвалКонец.Заголовок = " ";
			ОтступПодвалКонец.Ширина = 1;
			ОтступПодвалКонец.Высота = 0;
			
			//Отступ
			//ОтступГрупп = "ОтступГрупп" + НомерТовара;
			//ОтступГрупп = Элементы.Добавить(Отступ, Тип("ДекорацияФормы"), ИмяГруппы);
			//ОтступГрупп.Вид = ВидДекорацииФормы.Надпись;
			//ОтступГрупп.Заголовок = " ";
			//ОтступГрупп.Ширина = 4;
			//ОтступГрупп.Высота = 0;
			//ОтступГрупп.РастягиватьПоГоризонтали = Ложь;
			//ОтступГрупп.РастягиватьПоГоризонтали = Ложь;
		Исключение
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПользователиРолиДоступны(ИмяРоли)
	
	Возврат Пользователи.РолиДоступны(ИмяРоли);

КонецФункции 

&НаСервере
Процедура ДобавитьКарточкуПродавца(ФормаМодифицирована = Истина)
	
	Модифицированность = ФормаМодифицирована;
	
	НомерПродавцов = НомерПродавцов + 1;
	НомерТекущего = НомерПродавцов - СписокУдаленныхПродавцов.Количество();
	
	// Массив для новых реквизитов
	ДобавляемыеРеквизиты = Новый Массив;
	
	// Опишем ревизиты формы
	Реквизит_Организация = Новый РеквизитФормы("Организация" + НомерПродавцов, Новый ОписаниеТипов("СправочникСсылка.Организации"),, "Организация");
	Реквизит_БанкСчет = Новый РеквизитФормы("БанкСчет" + НомерПродавцов,	Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"),, "Банковский счет");
	Реквизит_Подписант = Новый РеквизитФормы("Подписант" + НомерПродавцов, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"),, "Подписант");
	Реквизит_Должность = Новый РеквизитФормы("Должность" + НомерПродавцов,	Новый ОписаниеТипов("СправочникСсылка.CRM_Должности"),, "Должность");
	Реквизит_ПечатьВПреамбуле = Новый РеквизитФормы("ПечатьВПреамбуле" + НомерПродавцов,	Новый ОписаниеТипов("Булево"),, "В преамбуле");
	Реквизит_ПечатьВПодписях = Новый РеквизитФормы("ПечатьВПодписях" + НомерПродавцов,	Новый ОписаниеТипов("Булево"),, "В подписях");
	Реквизит_Основание = Новый РеквизитФормы("Основание" + НомерПродавцов,	Новый ОписаниеТипов("ДокументСсылка.УПДК_Доверенность, Строка"),, "Действует на основании");
	Реквизит_ТипПредставителя = Новый РеквизитФормы("ТипПредставителя" + НомерПродавцов,	Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПредставителейОрганизации"),, "Тип представителя");	

	// Заполним массив
	ДобавляемыеРеквизиты.Добавить(Реквизит_Организация);
	ДобавляемыеРеквизиты.Добавить(Реквизит_БанкСчет);	
	ДобавляемыеРеквизиты.Добавить(Реквизит_Подписант);
	ДобавляемыеРеквизиты.Добавить(Реквизит_Должность);
	ДобавляемыеРеквизиты.Добавить(Реквизит_ПечатьВПреамбуле);
	ДобавляемыеРеквизиты.Добавить(Реквизит_ПечатьВПодписях);
	ДобавляемыеРеквизиты.Добавить(Реквизит_Основание);
	ДобавляемыеРеквизиты.Добавить(Реквизит_ТипПредставителя);

	// Добавим новые реквизиты в форму
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ДобавляемыеРеквизиты.Очистить();
	
	ИмяГруппы = "ГруппаБлокПродавца" + НомерПродавцов;
	ИмяГруппы = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаЛево);
	ИмяГруппы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы.Заголовок = "Основные реквизиты";
	ИмяГруппы.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ИмяГруппы.ОтображатьЗаголовок = Ложь; 
	ИмяГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ИмяГруппы.РастягиватьПоГоризонтали = Истина;
	ИмяГруппы.РастягиватьПоВертикали = Ложь;
	ИмяГруппы.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
	ИмяГруппы.Ширина = 80;
	ИмяГруппы.Высота = 0;

	//ЭлементУдалить
	ЭлементУдалить = "Продавец_ЭлементУдалить" + НомерПродавцов;
	ЭлементУдалить = Элементы.Добавить(ЭлементУдалить, Тип("ДекорацияФормы"), ИмяГруппы);
	ЭлементУдалить.Вид = ВидДекорацииФормы.Картинка;
	ЭлементУдалить.Заголовок = "";
	ЭлементУдалить.Гиперссылка = Истина;
	ЭлементУдалить.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	ЭлементУдалить.РастягиватьПоВертикали = Ложь;
	ЭлементУдалить.Картинка = БиблиотекаКартинок.Иконка_Закрыть;
	ЭлементУдалить.УстановитьДействие("Нажатие", "УдалитьПродавца");

	//Организация
	ЭлементОрганизация = "Продавец_Организация" + НомерПродавцов;
	ЭлементОрганизация = Элементы.Добавить(ЭлементОрганизация, Тип("ПолеФормы"), ИмяГруппы);
	ЭлементОрганизация.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементОрганизация.Заголовок = Строка(НомерТекущего) + ". Организация";
	ЭлементОрганизация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементОрганизация.ПутьКДанным = "Организация" + НомерПродавцов;
	ЭлементОрганизация.Ширина = 80;
	ЭлементОрганизация.РастягиватьПоГоризонтали = Истина;
	ЭлементОрганизация.ШрифтЗаголовка = Новый Шрифт (,,Истина);
	ЭлементОрганизация.УстановитьДействие("ПриИзменении", "ПодписантыОрганизацияОрганизацияПриИзменении");
	
	//БанкСчет
	ЭлементБанкСчет = "Продавец_БанкСчет" + НомерПродавцов;
	ЭлементБанкСчет = Элементы.Добавить(ЭлементБанкСчет, Тип("ПолеФормы"), ИмяГруппы);
	ЭлементБанкСчет.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементБанкСчет.Заголовок = "Банковский счет";
	ЭлементБанкСчет.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементБанкСчет.ПутьКДанным = "БанкСчет" + НомерПродавцов;
	ЭлементБанкСчет.Ширина = 80;
	ЭлементБанкСчет.РастягиватьПоГоризонтали = Истина;
	ЭлементБанкСчет.ШрифтЗаголовка = Новый Шрифт (,,Истина);
	ЭлементБанкСчет.УстановитьДействие("Создание", "ПодписантыОрганизацияБанкСчетСоздание");
	////ЭлементБанкСчет.УстановитьДействие("АвтоПодбор", "ПодписантыОрганизацияПодписантАвтоПодбор");
	//ЭлементБанкСчет.УстановитьДействие("ОкончаниеВводаТекста", "ПодписантыОрганизацияПодписантОкончаниеВводаТекста");
	//ЭлементБанкСчет.УстановитьДействие("НачалоВыбора", "ПодписантыОрганизацияПодписантНачалоВыбора");
	
	//Подписант
	ЭлементПодписант = "Продавец_Подписант" + НомерПродавцов;
	ЭлементПодписант = Элементы.Добавить(ЭлементПодписант, Тип("ПолеФормы"), ИмяГруппы);
	ЭлементПодписант.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПодписант.Заголовок = "Подписант";
	ЭлементПодписант.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементПодписант.ПутьКДанным = "Подписант" + НомерПродавцов;
	ЭлементПодписант.Ширина = 80;
	ЭлементПодписант.РастягиватьПоГоризонтали = Истина;
	ЭлементПодписант.ШрифтЗаголовка = Новый Шрифт (,,Истина);
	ЭлементПодписант.УстановитьДействие("ПриИзменении", "ПодписантыОрганизацияПодписантПриИзменении");
	ЭлементПодписант.УстановитьДействие("АвтоПодбор", "ПодписантыОрганизацияПодписантАвтоПодбор");
	ЭлементПодписант.УстановитьДействие("ОкончаниеВводаТекста", "ПодписантыОрганизацияПодписантОкончаниеВводаТекста");
	ЭлементПодписант.УстановитьДействие("НачалоВыбора", "ПодписантыОрганизацияПодписантНачалоВыбора");

	//Должность
	ЭлементДолжность = "Продавец_Должность" + НомерПродавцов;
	ЭлементДолжность = Элементы.Добавить(ЭлементДолжность, Тип("ПолеФормы"), ИмяГруппы);
	ЭлементДолжность.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементДолжность.Заголовок = "Должность";
	ЭлементДолжность.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементДолжность.ПутьКДанным = "Должность" + НомерПродавцов;
	ЭлементДолжность.Ширина = 80;
	ЭлементДолжность.РастягиватьПоГоризонтали = Истина;
	ЭлементДолжность.ШрифтЗаголовка = Новый Шрифт (,,Истина);
	
	//Действует на основании
	ЭлементОснование = "Продавец_Основание" + НомерПродавцов;
	ЭлементОснование = Элементы.Добавить(ЭлементОснование, Тип("ПолеФормы"), ИмяГруппы);
	ЭлементОснование.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементОснование.Заголовок = "Действует на основании";
	ЭлементОснование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементОснование.ПутьКДанным = "Основание" + НомерПродавцов;
	ЭлементОснование.Ширина = 80;
	ЭлементОснование.РастягиватьПоГоризонтали = Истина;
	ЭлементОснование.ШрифтЗаголовка = Новый Шрифт (,,Истина);
	
	//ТипПредставителя
	ЭлементТипПредставителя = "Продавец_ТипПредставителя" + НомерПродавцов;
	ЭлементТипПредставителя = Элементы.Добавить(ЭлементТипПредставителя, Тип("ПолеФормы"), ИмяГруппы);
	ЭлементТипПредставителя.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементТипПредставителя.Заголовок = "Тип представителя";
	ЭлементТипПредставителя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементТипПредставителя.ПутьКДанным = "ТипПредставителя" + НомерПродавцов;
	ЭлементТипПредставителя.Ширина = 80;
	ЭлементТипПредставителя.РастягиватьПоГоризонтали = Истина;
	ЭлементТипПредставителя.ШрифтЗаголовка = Новый Шрифт (,,Истина);

	ИмяГруппы_Печать = "ГруппаБлокПродавца_Печать" + НомерПродавцов;
	ИмяГруппы_Печать = Элементы.Добавить(ИмяГруппы_Печать, Тип("ГруппаФормы"), ИмяГруппы);
	ИмяГруппы_Печать.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИмяГруппы_Печать.Заголовок = "Вывод на печать";
	ИмяГруппы_Печать.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ИмяГруппы_Печать.ОтображатьЗаголовок = Истина; 
	ИмяГруппы_Печать.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ИмяГруппы_Печать.РастягиватьПоГоризонтали = Истина;
	ИмяГруппы_Печать.РастягиватьПоВертикали = Ложь;
	ИмяГруппы_Печать.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
	ИмяГруппы_Печать.Ширина = 80;
	ИмяГруппы_Печать.Высота = 0;
	
	//ПечатьВПреамбуле
	ЭлементПечатьВПреамбуле = "Продавец_ПечатьВПреамбуле" + НомерПродавцов;
	ЭлементПечатьВПреамбуле = Элементы.Добавить(ЭлементПечатьВПреамбуле, Тип("ПолеФормы"), ИмяГруппы_Печать);
	ЭлементПечатьВПреамбуле.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПечатьВПреамбуле.Заголовок = "В преамбуле";
	ЭлементПечатьВПреамбуле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементПечатьВПреамбуле.ПутьКДанным = "ПечатьВПреамбуле" + НомерПродавцов;
	ЭлементПечатьВПреамбуле.ШрифтЗаголовка = Новый Шрифт (,,Истина);

	//ПечатьВПодписях
	ЭлементПечатьВПодписях = "Продавец_ПечатьВПодписях" + НомерПродавцов;
	ЭлементПечатьВПодписях = Элементы.Добавить(ЭлементПечатьВПодписях, Тип("ПолеФормы"), ИмяГруппы_Печать);
	ЭлементПечатьВПодписях.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПечатьВПодписях.Заголовок = "В подписях";
	ЭлементПечатьВПодписях.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементПечатьВПодписях.ПутьКДанным = "ПечатьВПодписях" + НомерПродавцов;
	ЭлементПечатьВПодписях.ШрифтЗаголовка = Новый Шрифт (,,Истина);

	Элементы.Переместить(Элементы.ДобавитьПродавца, Элементы.ГруппаЛево);

КонецПроцедуры

&НаСервере
Процедура ДобавитьКарточкуПокупателя(ЗаполнятьФайлы = Ложь, ФормаМодифицирована = Истина)
	
	Модифицированность = ФормаМодифицирована;
	
	НомерПокупателей = НомерПокупателей + 1;
	НомерТекущего = НомерПокупателей - СписокУдаленныхПокупателей.Количество();
	
	// Массив для новых реквизитов
	ДобавляемыеРеквизиты = Новый Массив;
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.ВидПартнера.Компания") Тогда
		
		// Опишем ревизиты формы
		Реквизит_Контрагент = Новый РеквизитФормы("Контрагент" + НомерПокупателей, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"),, "Организация");
		Реквизит_БанкСчет = Новый РеквизитФормы("ПокупБанкСчет" + НомерПокупателей,	Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"),, "Банковский счет");
		Реквизит_Подписант = Новый РеквизитФормы("ПокупПодписант" + НомерПокупателей, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"),, "Подписант");
		Реквизит_Должность = Новый РеквизитФормы("ПокупДолжность" + НомерПокупателей,	Новый ОписаниеТипов("СправочникСсылка.CRM_Должности"),, "Должность");
		Реквизит_ПечатьВПреамбуле = Новый РеквизитФормы("ПокупПечатьВПреамбуле" + НомерПокупателей,	Новый ОписаниеТипов("Булево"),, "В преамбуле");
		Реквизит_ПечатьВПодписях = Новый РеквизитФормы("ПокупПечатьВПодписях" + НомерПокупателей,	Новый ОписаниеТипов("Булево"),, "В подписях");
		Реквизит_Основание = Новый РеквизитФормы("ПокупОснование" + НомерПокупателей,	Новый ОписаниеТипов("ДокументСсылка.УПДК_Доверенность, Строка"),, "Действует на основании");
		Реквизит_ТипПредставителя = Новый РеквизитФормы("ПокупТипПредставителя" + НомерПокупателей,	Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПредставителейОрганизации"),, "Тип представителя");	
		Реквизит_Доля = Новый РеквизитФормы("Доля" + НомерПокупателей, Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)),, "Доля");
		
		// Заполним массив
		ДобавляемыеРеквизиты.Добавить(Реквизит_Контрагент);
		ДобавляемыеРеквизиты.Добавить(Реквизит_БанкСчет);	
		ДобавляемыеРеквизиты.Добавить(Реквизит_Подписант);
		ДобавляемыеРеквизиты.Добавить(Реквизит_Должность);
		ДобавляемыеРеквизиты.Добавить(Реквизит_ПечатьВПреамбуле);
		ДобавляемыеРеквизиты.Добавить(Реквизит_ПечатьВПодписях);
		ДобавляемыеРеквизиты.Добавить(Реквизит_Основание);
		ДобавляемыеРеквизиты.Добавить(Реквизит_ТипПредставителя);
		ДобавляемыеРеквизиты.Добавить(Реквизит_Доля);
		
		// Добавим новые реквизиты в форму
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		ДобавляемыеРеквизиты.Очистить();
		
		ИмяГруппы = "ГруппаБлокПокупателя" + НомерПокупателей;
		ИмяГруппы = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаПраво);
		ИмяГруппы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ИмяГруппы.Заголовок = "Основные реквизиты";
		ИмяГруппы.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ИмяГруппы.ОтображатьЗаголовок = Ложь; 
		ИмяГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ИмяГруппы.РастягиватьПоГоризонтали = Истина;
		ИмяГруппы.РастягиватьПоВертикали = Ложь;
		ИмяГруппы.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
		ИмяГруппы.Ширина = 80;
		ИмяГруппы.Высота = 0;
		
		//ЭлементУдалить
		ЭлементУдалить = "Покупатель_ЭлементУдалить" + НомерПокупателей;
		ЭлементУдалить = Элементы.Добавить(ЭлементУдалить, Тип("ДекорацияФормы"), ИмяГруппы);
		ЭлементУдалить.Вид = ВидДекорацииФормы.Картинка;
		ЭлементУдалить.Заголовок = "";
		ЭлементУдалить.Гиперссылка = Истина;
		ЭлементУдалить.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		ЭлементУдалить.РастягиватьПоВертикали = Ложь;
		ЭлементУдалить.Картинка = БиблиотекаКартинок.Иконка_Закрыть;
		ЭлементУдалить.УстановитьДействие("Нажатие", "УдалитьПокупателя");
		
		//Контрагент
		ЭлементКонтрагент = "Покупатель_Контрагент" + НомерПокупателей;
		ЭлементКонтрагент = Элементы.Добавить(ЭлементКонтрагент, Тип("ПолеФормы"), ИмяГруппы);
		ЭлементКонтрагент.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементКонтрагент.Заголовок = Строка(НомерТекущего) + ". Контрагент";
		ЭлементКонтрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементКонтрагент.ПутьКДанным = "Контрагент" + НомерПокупателей;
		ЭлементКонтрагент.Ширина = 80;
		ЭлементКонтрагент.РастягиватьПоГоризонтали = Истина;
		ЭлементКонтрагент.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		ЭлементКонтрагент.УстановитьДействие("ПриИзменении", "ПодписантыПокупательКонтрагентПриИзменении");
		
		//БанкСчет
		ЭлементБанкСчет = "Покупатель_БанкСчет" + НомерПокупателей;
		ЭлементБанкСчет = Элементы.Добавить(ЭлементБанкСчет, Тип("ПолеФормы"), ИмяГруппы);
		ЭлементБанкСчет.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементБанкСчет.Заголовок = "Банковский счет";
		ЭлементБанкСчет.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементБанкСчет.ПутьКДанным = "ПокупБанкСчет" + НомерПокупателей;
		ЭлементБанкСчет.Ширина = 80;
		ЭлементБанкСчет.РастягиватьПоГоризонтали = Истина;
		ЭлементБанкСчет.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		
		//Подписант
		ЭлементПодписант = "Покупатель_Подписант" + НомерПокупателей;
		ЭлементПодписант = Элементы.Добавить(ЭлементПодписант, Тип("ПолеФормы"), ИмяГруппы);
		ЭлементПодписант.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементПодписант.Заголовок = "Подписант";
		ЭлементПодписант.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементПодписант.ПутьКДанным = "ПокупПодписант" + НомерПокупателей;
		ЭлементПодписант.Ширина = 80;
		ЭлементПодписант.РастягиватьПоГоризонтали = Истина;
		ЭлементПодписант.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		ЭлементПодписант.УстановитьДействие("ПриИзменении", "ПодписантыКлиентПодписантПриИзменении");
		ЭлементПодписант.УстановитьДействие("НачалоВыбора", "ПодписантыКлиентПодписантНачалоВыбора");
		ЭлементПодписант.УстановитьДействие("АвтоПодбор", "ПодписантыКлиентПодписантАвтоПодбор");
		ЭлементПодписант.УстановитьДействие("ОкончаниеВводаТекста", "ПодписантыКлиентПодписантОкончаниеВводаТекста");	
		ЭлементПодписант.УстановитьДействие("Создание", "ПодписантыКлиентПодписантСоздание");
		
		//Должность
		ЭлементДолжность = "Покупатель_Должность" + НомерПокупателей;
		ЭлементДолжность = Элементы.Добавить(ЭлементДолжность, Тип("ПолеФормы"), ИмяГруппы);
		ЭлементДолжность.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементДолжность.Заголовок = "Должность";
		ЭлементДолжность.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементДолжность.ПутьКДанным = "ПокупДолжность" + НомерПокупателей;
		ЭлементДолжность.Ширина = 80;
		ЭлементДолжность.РастягиватьПоГоризонтали = Истина;
		ЭлементДолжность.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		
		//Действует на основании
		ЭлементОснование = "Покупатель_Основание" + НомерПокупателей;
		ЭлементОснование = Элементы.Добавить(ЭлементОснование, Тип("ПолеФормы"), ИмяГруппы);
		ЭлементОснование.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОснование.Заголовок = "Действует на основании";
		ЭлементОснование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементОснование.ПутьКДанным = "ПокупОснование" + НомерПокупателей;
		ЭлементОснование.Ширина = 80;
		ЭлементОснование.РастягиватьПоГоризонтали = Истина;
		ЭлементОснование.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		
		//ТипПредставителя
		ЭлементТипПредставителя = "Покупатель_ТипПредставителя" + НомерПокупателей;
		ЭлементТипПредставителя = Элементы.Добавить(ЭлементТипПредставителя, Тип("ПолеФормы"), ИмяГруппы);
		ЭлементТипПредставителя.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементТипПредставителя.Заголовок = "Тип представителя";
		ЭлементТипПредставителя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементТипПредставителя.ПутьКДанным = "ПокупТипПредставителя" + НомерПокупателей;
		ЭлементТипПредставителя.Ширина = 80;
		ЭлементТипПредставителя.РастягиватьПоГоризонтали = Истина;
		ЭлементТипПредставителя.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		
		ИмяГруппы_Доля = "ГруппаБлокПокупателя_Доля" + НомерПокупателей;
		ИмяГруппы_Доля = Элементы.Добавить(ИмяГруппы_Доля, Тип("ГруппаФормы"), ИмяГруппы);
		ИмяГруппы_Доля.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ИмяГруппы_Доля.Заголовок = "";
		ИмяГруппы_Доля.Отображение = ОтображениеОбычнойГруппы.Нет;
		ИмяГруппы_Доля.ОтображатьЗаголовок = Ложь; 
		ИмяГруппы_Доля.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ИмяГруппы_Доля.РастягиватьПоГоризонтали = Истина;
		ИмяГруппы_Доля.РастягиватьПоВертикали = Ложь;
		ИмяГруппы_Доля.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
		ИмяГруппы_Доля.Ширина = 80;
		ИмяГруппы_Доля.Высота = 0;
		
		//Доля
		ЭлементДоля = "Покупатель_Доля" + НомерПокупателей;
		ЭлементДоля = Элементы.Добавить(ЭлементДоля, Тип("ПолеФормы"), ИмяГруппы_Доля);
		ЭлементДоля.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементДоля.Заголовок = "Доля";
		ЭлементДоля.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементДоля.ПутьКДанным = "Доля" + НомерПокупателей;
		ЭлементДоля.РастягиватьПоГоризонтали = Истина;
		ЭлементДоля.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		
		//ЗаполнитьДолю
		ЭлементЗаполнитьДолю = "Покупатель_ЗаполнитьДолю" + НомерПокупателей;
		ЭлементЗаполнитьДолю = Элементы.Добавить(ЭлементЗаполнитьДолю, Тип("КнопкаФормы"), ИмяГруппы_Доля);
		ЭлементЗаполнитьДолю.Вид = ВидКнопкиФормы.Гиперссылка;
		ЭлементЗаполнитьДолю.Заголовок = "Заполнить долю";
		ЭлементЗаполнитьДолю.ИмяКоманды = "ЗаполнитьДолиВРавныхДолях";
		ЭлементЗаполнитьДолю.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;

		ИмяГруппы_Печать = "ГруппаБлокПокупателя_Печать" + НомерПокупателей;
		ИмяГруппы_Печать = Элементы.Добавить(ИмяГруппы_Печать, Тип("ГруппаФормы"), ИмяГруппы);
		ИмяГруппы_Печать.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ИмяГруппы_Печать.Заголовок = "Вывод на печать";
		ИмяГруппы_Печать.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ИмяГруппы_Печать.ОтображатьЗаголовок = Истина; 
		ИмяГруппы_Печать.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ИмяГруппы_Печать.РастягиватьПоГоризонтали = Истина;
		ИмяГруппы_Печать.РастягиватьПоВертикали = Ложь;
		ИмяГруппы_Печать.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
		ИмяГруппы_Печать.Ширина = 80;
		ИмяГруппы_Печать.Высота = 0;
		
		//ПечатьВПреамбуле
		ЭлементПечатьВПреамбуле = "Покупатель_ПечатьВПреамбуле" + НомерПокупателей;
		ЭлементПечатьВПреамбуле = Элементы.Добавить(ЭлементПечатьВПреамбуле, Тип("ПолеФормы"), ИмяГруппы_Печать);
		ЭлементПечатьВПреамбуле.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементПечатьВПреамбуле.Заголовок = "В преамбуле";
		ЭлементПечатьВПреамбуле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ЭлементПечатьВПреамбуле.ПутьКДанным = "ПокупПечатьВПреамбуле" + НомерПокупателей;
		ЭлементПечатьВПреамбуле.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		
		//ПечатьВПодписях
		ЭлементПечатьВПодписях = "Покупатель_ПечатьВПодписях" + НомерПокупателей;
		ЭлементПечатьВПодписях = Элементы.Добавить(ЭлементПечатьВПодписях, Тип("ПолеФормы"), ИмяГруппы_Печать);
		ЭлементПечатьВПодписях.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементПечатьВПодписях.Заголовок = "В подписях";
		ЭлементПечатьВПодписях.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ЭлементПечатьВПодписях.ПутьКДанным = "ПокупПечатьВПодписях" + НомерПокупателей;
		ЭлементПечатьВПодписях.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		
	Иначе	
		
		// Опишем ревизиты формы
		Реквизит_Имя = Новый РеквизитФормы("Имя" + НомерПокупателей, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"),, "Имя");
		Реквизит_Должность_ = Новый РеквизитФормы("Должность_" + НомерПокупателей, Новый ОписаниеТипов("СправочникСсылка.CRM_Должности"),, "Должность/Представление");
		Реквизит_ДоверенноеЛицо = Новый РеквизитФормы("ДоверенноеЛицо" + НомерПокупателей, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"),, "Доверенное лицо");
		Реквизит_Основание_ = Новый РеквизитФормы("Основание_" + НомерПокупателей, Новый ОписаниеТипов("ДокументСсылка.УПДК_Доверенность, Строка"),, "Основание");
		Реквизит_Доля = Новый РеквизитФормы("Доля" + НомерПокупателей, Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)),, "Доля");
		Реквизит_СовместноДолевая = Новый РеквизитФормы("СовместноДолевая" + НомерПокупателей, Новый ОписаниеТипов("Булево"),, "Совместно-долевая");
		
		// Заполним массив
		ДобавляемыеРеквизиты.Добавить(Реквизит_Имя);
		ДобавляемыеРеквизиты.Добавить(Реквизит_Должность_);
		ДобавляемыеРеквизиты.Добавить(Реквизит_ДоверенноеЛицо);
		ДобавляемыеРеквизиты.Добавить(Реквизит_Основание_);
		ДобавляемыеРеквизиты.Добавить(Реквизит_Доля);
		ДобавляемыеРеквизиты.Добавить(Реквизит_СовместноДолевая);
		
		// Добавим новые реквизиты в форму
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		ДобавляемыеРеквизиты.Очистить();
		
		ИмяГруппы = "ГруппаБлокПокупателя" + НомерПокупателей;
		ИмяГруппы = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаПраво);
		ИмяГруппы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ИмяГруппы.Заголовок = "Основные реквизиты";
		ИмяГруппы.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ИмяГруппы.ОтображатьЗаголовок = Ложь; 
		ИмяГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ИмяГруппы.РастягиватьПоГоризонтали = Истина;
		ИмяГруппы.РастягиватьПоВертикали = Ложь;
		ИмяГруппы.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
		ИмяГруппы.Ширина = 80;
		ИмяГруппы.Высота = 0;
		
		//ЭлементУдалить
		ЭлементУдалить = "Покупатель_ЭлементУдалить" + НомерПокупателей;
		ЭлементУдалить = Элементы.Добавить(ЭлементУдалить, Тип("ДекорацияФормы"), ИмяГруппы);
		ЭлементУдалить.Вид = ВидДекорацииФормы.Картинка;
		ЭлементУдалить.Заголовок = "";
		ЭлементУдалить.Гиперссылка = Истина;
		ЭлементУдалить.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		ЭлементУдалить.РастягиватьПоВертикали = Ложь;
		ЭлементУдалить.Картинка = БиблиотекаКартинок.Иконка_Закрыть;
		ЭлементУдалить.УстановитьДействие("Нажатие", "УдалитьПокупателя");
		
		//Имя
		ЭлементИмя = "Покупатель_Имя" + НомерПокупателей;
		ЭлементИмя = Элементы.Добавить(ЭлементИмя, Тип("ПолеФормы"), ИмяГруппы);
		ЭлементИмя.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементИмя.Заголовок = Строка(НомерТекущего) + ". Имя";
		ЭлементИмя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементИмя.ПутьКДанным = "Имя" + НомерПокупателей;
		ЭлементИмя.Ширина = 80;
		ЭлементИмя.РастягиватьПоГоризонтали = Истина;
		ЭлементИмя.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		ЭлементИмя.УстановитьДействие("ПриИзменении", "ПодписантыКлиентПодписантПриИзменении");
		ЭлементИмя.УстановитьДействие("НачалоВыбора", "ПодписантыКлиентПодписантНачалоВыбора");
		ЭлементИмя.УстановитьДействие("АвтоПодбор", "ПодписантыКлиентПодписантАвтоПодбор");
		ЭлементИмя.УстановитьДействие("ОкончаниеВводаТекста", "ПодписантыКлиентПодписантОкончаниеВводаТекста");	
		ЭлементИмя.УстановитьДействие("Создание", "ПодписантыКлиентПодписантСоздание");
		
		//Должность_
		ЭлементДолжность_ = "Покупатель_Должность" + НомерПокупателей;
		ЭлементДолжность_ = Элементы.Добавить(ЭлементДолжность_, Тип("ПолеФормы"), ИмяГруппы);
		ЭлементДолжность_.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементДолжность_.Заголовок = "Должность/Представление";
		ЭлементДолжность_.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементДолжность_.ПутьКДанным = "Должность_" + НомерПокупателей;
		ЭлементДолжность_.Ширина = 80;
		ЭлементДолжность_.РастягиватьПоГоризонтали = Истина;
		ЭлементДолжность_.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		
		//ДоверенноеЛицо
		ЭлементДоверенноеЛицо = "Покупатель_ДоверенноеЛицо" + НомерПокупателей;
		ЭлементДоверенноеЛицо = Элементы.Добавить(ЭлементДоверенноеЛицо, Тип("ПолеФормы"), ИмяГруппы);
		ЭлементДоверенноеЛицо.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементДоверенноеЛицо.Заголовок = "ДоверенноеЛицо";
		ЭлементДоверенноеЛицо.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементДоверенноеЛицо.ПутьКДанным = "ДоверенноеЛицо" + НомерПокупателей;
		ЭлементДоверенноеЛицо.Ширина = 80;
		ЭлементДоверенноеЛицо.РастягиватьПоГоризонтали = Истина;
		ЭлементДоверенноеЛицо.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		ЭлементДоверенноеЛицо.УстановитьДействие("НачалоВыбора", "ПодписантыКлиентДоверенноеЛицоНачалоВыбора");
		ЭлементДоверенноеЛицо.УстановитьДействие("АвтоПодбор", "ПодписантыКлиентДоверенноеЛицоАвтоПодбор");
		ЭлементДоверенноеЛицо.УстановитьДействие("ОкончаниеВводаТекста", "ПодписантыКлиентДоверенноеЛицоОкончаниеВводаТекста");	
		ЭлементДоверенноеЛицо.УстановитьДействие("Создание", "ПодписантыКлиентДоверенноеЛицоСоздание");
		
		//Основание_
		ЭлементОснование_ = "Покупатель_Основание" + НомерПокупателей;
		ЭлементОснование_ = Элементы.Добавить(ЭлементОснование_, Тип("ПолеФормы"), ИмяГруппы);
		ЭлементОснование_.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОснование_.Заголовок = "Основание";
		ЭлементОснование_.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементОснование_.ПутьКДанным = "Основание_" + НомерПокупателей;
		ЭлементОснование_.Ширина = 80;
		ЭлементОснование_.ВыбиратьТип = Истина;
		ЭлементОснование_.РастягиватьПоГоризонтали = Истина;
		ЭлементОснование_.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		
		ИмяГруппы_Доля = "ГруппаБлокПокупателя_Доля" + НомерПокупателей;
		ИмяГруппы_Доля = Элементы.Добавить(ИмяГруппы_Доля, Тип("ГруппаФормы"), ИмяГруппы);
		ИмяГруппы_Доля.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ИмяГруппы_Доля.Заголовок = "";
		ИмяГруппы_Доля.Отображение = ОтображениеОбычнойГруппы.Нет;
		ИмяГруппы_Доля.ОтображатьЗаголовок = Ложь; 
		ИмяГруппы_Доля.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ИмяГруппы_Доля.РастягиватьПоГоризонтали = Истина;
		ИмяГруппы_Доля.РастягиватьПоВертикали = Ложь;
		ИмяГруппы_Доля.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
		ИмяГруппы_Доля.Ширина = 80;
		ИмяГруппы_Доля.Высота = 0;
		
		//Доля
		ЭлементДоля = "Покупатель_Доля" + НомерПокупателей;
		ЭлементДоля = Элементы.Добавить(ЭлементДоля, Тип("ПолеФормы"), ИмяГруппы_Доля);
		ЭлементДоля.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементДоля.Заголовок = "Доля";
		ЭлементДоля.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементДоля.ПутьКДанным = "Доля" + НомерПокупателей;
		ЭлементДоля.РастягиватьПоГоризонтали = Истина;
		ЭлементДоля.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		
		//ПокупСовместноДолевая
		ЭлементСовместноДолевая = "Покупатель_СовместноДолевая" + НомерПокупателей;
		ЭлементСовместноДолевая = Элементы.Добавить(ЭлементСовместноДолевая, Тип("ПолеФормы"), ИмяГруппы_Доля);
		ЭлементСовместноДолевая.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементСовместноДолевая.ВидФлажка = ВидФлажка.Выключатель;
		ЭлементСовместноДолевая.Заголовок = "Совместно-долевая";
		ЭлементСовместноДолевая.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ЭлементСовместноДолевая.ПутьКДанным = "СовместноДолевая" + НомерПокупателей;
		ЭлементСовместноДолевая.ШрифтЗаголовка = Новый Шрифт (,,Истина);
		ЭлементСовместноДолевая.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
		
		//ЗаполнитьДолю
		ЭлементЗаполнитьДолю = "Покупатель_ЗаполнитьДолю" + НомерПокупателей;
		ЭлементЗаполнитьДолю = Элементы.Добавить(ЭлементЗаполнитьДолю, Тип("КнопкаФормы"), ИмяГруппы_Доля);
		ЭлементЗаполнитьДолю.Вид = ВидКнопкиФормы.Гиперссылка;
		ЭлементЗаполнитьДолю.Заголовок = "Заполнить долю";
		ЭлементЗаполнитьДолю.ИмяКоманды = "ЗаполнитьДолиВРавныхДолях";
		ЭлементЗаполнитьДолю.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
		
		ИмяГруппы_Файлы = "ГруппаБлокПокупателя_Файлы" + НомерПокупателей;
		ИмяГруппы_Файлы = Элементы.Добавить(ИмяГруппы_Файлы, Тип("ГруппаФормы"), ИмяГруппы);
		ИмяГруппы_Файлы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ИмяГруппы_Файлы.Заголовок = "";
		ИмяГруппы_Файлы.Отображение = ОтображениеОбычнойГруппы.Нет;
		ИмяГруппы_Файлы.ОтображатьЗаголовок = Ложь; 
		ИмяГруппы_Файлы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ИмяГруппы_Файлы.РастягиватьПоГоризонтали = Истина;
		ИмяГруппы_Файлы.РастягиватьПоВертикали = Ложь;
		ИмяГруппы_Файлы.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
		ИмяГруппы_Файлы.Ширина = 80;
		ИмяГруппы_Файлы.Высота = 0;
		ИмяГруппы_Файлы.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		//ЗагрузитьДокумент
		ЭлементЗаполнитьДолю = "Покупатель_ЗагрузитьДокумент" + НомерПокупателей;
		ЭлементЗаполнитьДолю = Элементы.Добавить(ЭлементЗаполнитьДолю, Тип("КнопкаФормы"), ИмяГруппы_Файлы);
		ЭлементЗаполнитьДолю.Картинка = БиблиотекаКартинок.ПрикрепитьДокумент;
		ЭлементЗаполнитьДолю.Отображение = ОтображениеКнопки.КартинкаИТекст;
		ЭлементЗаполнитьДолю.Вид = ВидКнопкиФормы.Гиперссылка;
		ЭлементЗаполнитьДолю.Заголовок = "Загрузить документ";
		ЭлементЗаполнитьДолю.ИмяКоманды = "ЗагрузитьДокумент";
		
		Если ЗаполнятьФайлы Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РеализацияНедвижимостиПрисоединенныеФайлы.Ссылка КАК Ссылка,
			|	РеализацияНедвижимостиПрисоединенныеФайлы.Наименование КАК Наименование,
			|	РеализацияНедвижимостиПрисоединенныеФайлы.Служебное КАК Служебное
			|ИЗ
			|	Справочник.РеализацияНедвижимостиПрисоединенныеФайлы КАК РеализацияНедвижимостиПрисоединенныеФайлы
			|ГДЕ
			|	НЕ РеализацияНедвижимостиПрисоединенныеФайлы.ПометкаУдаления
			|	И РеализацияНедвижимостиПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
			
			Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если СтрНайти(ВыборкаДетальныеЗаписи.Служебное, "Сформировано автоматически. Номер покупателя:") > 0 Тогда
					ТекНомер = Прав(ВыборкаДетальныеЗаписи.Служебное, СтрДлина(ВыборкаДетальныеЗаписи.Служебное) - СтрДлина("Сформировано автоматически. Номер покупателя:"));
					Если ТекНомер = Строка(НомерПокупателей) Тогда
						ФайлыПокупателя.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
						
						ИмяГруппы_Файл = "ГруппаБлокПокупателя_Файл" + НомерПокупателей + "_" + Строка(ФайлыПокупателя.Количество() - 1);
						ИмяГруппы_Файл = Элементы.Добавить(ИмяГруппы_Файл, Тип("ГруппаФормы"), ИмяГруппы_Файлы);
						ИмяГруппы_Файл.Вид = ВидГруппыФормы.ОбычнаяГруппа;
						ИмяГруппы_Файл.Заголовок = "";
						ИмяГруппы_Файл.Отображение = ОтображениеОбычнойГруппы.Нет;
						ИмяГруппы_Файл.ОтображатьЗаголовок = Ложь; 
						ИмяГруппы_Файл.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
						ИмяГруппы_Файл.РастягиватьПоГоризонтали = Истина;
						ИмяГруппы_Файл.РастягиватьПоВертикали = Ложь;
						ИмяГруппы_Файл.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
						ИмяГруппы_Файл.Ширина = 80;
						
						////Отступ
						ОтступНаименованиеПередГруппой = "ОтступНаименованиеПередГруппой" + НомерПокупателей + "_" + Строка(ФайлыПокупателя.Количество() - 1);
						ОтступНаименованиеПередГруппой = Элементы.Добавить(ОтступНаименованиеПередГруппой, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
						ОтступНаименованиеПередГруппой.Вид = ВидДекорацииФормы.Надпись;
						ОтступНаименованиеПередГруппой.Заголовок = "";
						ОтступНаименованиеПередГруппой.Ширина = 1;
						ОтступНаименованиеПередГруппой.Высота = 0;
						ОтступНаименованиеПередГруппой.РастягиватьПоВертикали = Ложь;
						
						//ЭлементФайл
						ЭлементФайл = "Покупатель_ЭлементФайл" + НомерПокупателей + "_" + Строка(ФайлыПокупателя.Количество() - 1);
						ЭлементФайл = Элементы.Добавить(ЭлементФайл, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
						ЭлементФайл.Вид = ВидДекорацииФормы.Надпись;
						ЭлементФайл.Заголовок = ВыборкаДетальныеЗаписи.Наименование;
						ЭлементФайл.Гиперссылка = Истина;  
						ЭлементФайл.УстановитьДействие("Нажатие", "ОткрытьФайл");
						
						//ЭлементУдалитьФайл
						ЭлементУдалитьФайл = "Покупатель_ЭлементУдалитьФайл" + НомерПокупателей + "_" + Строка(ФайлыПокупателя.Количество() - 1);
						ЭлементУдалитьФайл = Элементы.Добавить(ЭлементУдалитьФайл, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
						ЭлементУдалитьФайл.Вид = ВидДекорацииФормы.Картинка;
						ЭлементУдалитьФайл.Заголовок = "";
						ЭлементУдалитьФайл.Гиперссылка = Истина;
						ЭлементУдалитьФайл.РастягиватьПоВертикали = Ложь;
						ЭлементУдалитьФайл.Картинка = БиблиотекаКартинок.Иконка_Закрыть;
						ЭлементУдалитьФайл.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
						ЭлементУдалитьФайл.Высота = 1;
						ЭлементУдалитьФайл.УстановитьДействие("Нажатие", "УдалитьФайл");
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Переместить(Элементы.ДобавитьПокупателя, Элементы.ГруппаПраво);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПродавца(Элемент)
	
	УдалитьПродавцаСервер(Элемент.Имя);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПродавцаСервер(Знач ЭлементИмя)
	
	ТекНомер = Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрДлина("Продавец_ЭлементУдалить"));
	Элементы.Удалить(Элементы["ГруппаБлокПродавца" + ТекНомер]);
	УдаляемыеРеквизиты = Новый Массив;	
	УдаляемыеРеквизиты.Добавить("Организация" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("БанкСчет" + ТекНомер);	
	УдаляемыеРеквизиты.Добавить("Подписант" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("Должность" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("ПечатьВПреамбуле" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("ПечатьВПодписях" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("Основание" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("ТипПредставителя" + ТекНомер);
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);

	СписокУдаленныхПродавцов.Добавить(ТекНомер);
	
	НомерТекущего = 1;
	Для Инд = 1 По НомерПродавцов Цикл
		Если СписокУдаленныхПродавцов.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элементы["Продавец_Организация" + Инд].Заголовок = Строка(НомерТекущего) + ". Организация";	
		
		НомерТекущего = НомерТекущего + 1;
	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Процедура УдалитьПокупателя(Элемент)
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.ВидПартнера.Компания") Тогда
	    УдалитьПокупателяКомпанияСервер(Элемент.Имя);
	Иначе	
	    УдалитьПокупателяСервер(Элемент.Имя);
	КонецЕсли;	
	ОграничениеТипаСобственностиПоКоличествуПодписантов();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПокупателяКомпанияСервер(Знач ЭлементИмя)

	ТекНомер = Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрДлина("Покупатель_ЭлементУдалить"));
	Элементы.Удалить(Элементы["ГруппаБлокПокупателя" + ТекНомер]);
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты.Добавить("Контрагент" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("ПокупБанкСчет" + ТекНомер);	
	УдаляемыеРеквизиты.Добавить("ПокупПодписант" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("ПокупДолжность" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("ПокупПечатьВПреамбуле" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("ПокупПечатьВПодписях" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("ПокупОснование" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("ПокупТипПредставителя" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("Доля" + ТекНомер);
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);

	СписокУдаленныхПокупателей.Добавить(ТекНомер);
	
	НомерТекущего = 1;
	Для Инд = 1 По НомерПокупателей Цикл
		Если СписокУдаленныхПокупателей.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элементы["Покупатель_Контрагент" + Инд].Заголовок = Строка(НомерТекущего) + ". Контрагент";	
		
		НомерТекущего = НомерТекущего + 1;
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура УдалитьПокупателяСервер(Знач ЭлементИмя)

	ТекНомер = Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрДлина("Покупатель_ЭлементУдалить"));
	Для каждого ТекЭлемент Из Элементы["ГруппаБлокПокупателя_Файлы" + ТекНомер].ПодчиненныеЭлементы Цикл
	    Если СтрНайти(ТекЭлемент.Имя, "Покупатель_ЭлементУдалитьФайл" + ТекНомер + "_") Тогда
		    УдалитьФайлНаСервере(ТекЭлемент.Имя, Ложь);
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ГруппаФормы") Тогда			
			Для каждого ТекВложенныйЭлемент Из ТекЭлемент.ПодчиненныеЭлементы Цикл
				Если СтрНайти(ТекВложенныйЭлемент.Имя, "Покупатель_ЭлементУдалитьФайл" + ТекНомер + "_") Тогда
					УдалитьФайлНаСервере(ТекВложенныйЭлемент.Имя, Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Элементы.Удалить(Элементы["ГруппаБлокПокупателя" + ТекНомер]);
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты.Добавить("Имя" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("Должность_" + ТекНомер);	
	УдаляемыеРеквизиты.Добавить("ДоверенноеЛицо" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("Основание_" + ТекНомер);
	УдаляемыеРеквизиты.Добавить("Доля" + ТекНомер);
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);

	СписокУдаленныхПокупателей.Добавить(ТекНомер);
	
	НомерТекущего = 1;
	Для Инд = 1 По НомерПокупателей Цикл
		Если СписокУдаленныхПокупателей.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элементы["Покупатель_Имя" + Инд].Заголовок = Строка(НомерТекущего) + ". Имя";	
		
		НомерТекущего = НомерТекущего + 1;
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ЗаписатьПодписантов(Отказ)
	
	Объект.ПодписантыОрганизация.Очистить();
	НомерТекущего = 1;
	Для Инд = 1 По НомерПродавцов Цикл
		Если СписокУдаленныхПродавцов.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЭтаФорма["Организация" + Инд]) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена организация продавца " + НомерТекущего,, Элементы["Продавец_Организация" + Инд]);
			Отказ = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЭтаФорма["Подписант" + Инд]) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен подписант продавца " + НомерТекущего,, Элементы["Продавец_Подписант" + Инд]);
			Отказ = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЭтаФорма["Должность" + Инд]) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена должность продавца " + НомерТекущего,, Элементы["Продавец_Должность" + Инд]);
			Отказ = Истина;
		КонецЕсли;

		НовСтрока = Объект.ПодписантыОрганизация.Добавить();
		НовСтрока.Организация = ЭтаФорма["Организация" + Инд];
		НовСтрока.БанковскийСчет = ЭтаФорма["БанкСчет" + Инд];
		НовСтрока.Подписант = ЭтаФорма["Подписант" + Инд];
		НовСтрока.Должность = ЭтаФорма["Должность" + Инд];
		НовСтрока.ВыводитьВПреамбуле = ЭтаФорма["ПечатьВПреамбуле" + Инд];
		НовСтрока.ВыводитьВПодписях = ЭтаФорма["ПечатьВПодписях" + Инд];
		НовСтрока.Основание = ЭтаФорма["Основание" + Инд];
		НовСтрока.ТипПредставителя = ЭтаФорма["ТипПредставителя" + Инд];
		НовСтрока.ПорядокВПреамбуле = НомерТекущего;
		НовСтрока.ПорядокВПодписях = НомерТекущего;
		
		НомерТекущего = НомерТекущего + 1;
	КонецЦикла;

	Объект.ПодписантыКлиент.Очистить();
	НомерТекущего = 1;
	
	//Реквизит_Имя = Новый РеквизитФормы("Имя" + НомерПокупателей, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"),, "Имя");
	//Реквизит_Должность_ = Новый РеквизитФормы("Должность_" + НомерПокупателей, Новый ОписаниеТипов("СправочникСсылка.CRM_Должности"),, "Должность/Представление");
	//Реквизит_ДоверенноеЛицо = Новый РеквизитФормы("ДоверенноеЛицо" + НомерПокупателей, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"),, "Доверенное лицо");
	//ТипыОснование_ = Новый Массив;
	//ТипыОснование_.Добавить("ДокументСсылка.УПДК_Доверенность");
	//ТипыОснование_.Добавить("Строка");
	//Реквизит_Основание_ = Новый РеквизитФормы("Основание_" + НомерПокупателей, Новый ОписаниеТипов(ТипыОснование_),, "Основание");
	//Реквизит_Доля = Новый РеквизитФормы("Доля" + НомерПокупателей, Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)),, "Доля");

	Если ВидПартнера = Перечисления.ВидПартнера.Компания Тогда
		Для Инд = 1 По НомерПокупателей Цикл
			Если СписокУдаленныхПокупателей.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЭтаФорма["Контрагент" + Инд]) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен контрагент " + НомерТекущего,, Элементы["Покупатель_Контрагент" + Инд]);
				Отказ = Истина;
			КонецЕсли;
			//Если Не ЗначениеЗаполнено(ЭтаФорма["Доля" + Инд]) И (Объект.ТипСобственности = Перечисления.УПДК_ТипыСобственности.Долевая ИЛИ Объект.ТипСобственности = Перечисления.УПДК_ТипыСобственности.СовместноДолевая) Тогда
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена доля покупателя " + НомерТекущего,, Элементы["Покупатель_Доля" + Инд]);
			//	Отказ = Истина;
			//КонецЕсли;
			
			НовСтрока = Объект.ПодписантыКлиент.Добавить();
			НовСтрока.Контрагент = ЭтаФорма["Контрагент" + Инд];
			НовСтрока.БанковскийСчет = ЭтаФорма["ПокупБанкСчет" + Инд];
			НовСтрока.Подписант = ЭтаФорма["ПокупПодписант" + Инд];
			НовСтрока.Должность = ЭтаФорма["ПокупДолжность" + Инд];
			НовСтрока.ВыводитьВПреамбуле = ЭтаФорма["ПокупПечатьВПреамбуле" + Инд];
			НовСтрока.ВыводитьВПодписях = ЭтаФорма["ПокупПечатьВПодписях" + Инд];
			НовСтрока.Основание = ЭтаФорма["ПокупОснование" + Инд];
			НовСтрока.ТипПредставителя = ЭтаФорма["ПокупТипПредставителя" + Инд];
			НовСтрока.Доля = ЭтаФорма["Доля" + Инд];
			НовСтрока.ПорядокВПреамбуле = НомерТекущего;
			НовСтрока.ПорядокВПодписях = НомерТекущего;
			
			НомерТекущего = НомерТекущего + 1;
		КонецЦикла;
		
	Иначе	
			
		Для Инд = 1 По НомерПокупателей Цикл
			Если СписокУдаленныхПокупателей.НайтиПоЗначению(Строка(Инд)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЭтаФорма["Имя" + Инд]) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено имя покупателя " + НомерТекущего,, Элементы["Покупатель_Имя" + Инд]);
				Отказ = Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЭтаФорма["Доля" + Инд]) И (Объект.ТипСобственности = Перечисления.УПДК_ТипыСобственности.Долевая ИЛИ Объект.ТипСобственности = Перечисления.УПДК_ТипыСобственности.СовместноДолевая) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена доля покупателя " + НомерТекущего,, Элементы["Покупатель_Доля" + Инд]);
				Отказ = Истина;
			КонецЕсли;
			
			НовСтрока = Объект.ПодписантыКлиент.Добавить();
			НовСтрока.Подписант = ЭтаФорма["Имя" + Инд];
			НовСтрока.Должность = ЭтаФорма["Должность_" + Инд];
			НовСтрока.ДоверенноеЛицо = ЭтаФорма["ДоверенноеЛицо" + Инд];
			НовСтрока.Основание = ЭтаФорма["Основание_" + Инд];
			НовСтрока.Доля = ЭтаФорма["Доля" + Инд];
			НовСтрока.СовместноДолевая = ЭтаФорма["СовместноДолевая" + Инд];
			НовСтрока.ПорядокВПреамбуле = НомерТекущего;
			НовСтрока.ПорядокВПодписях = НомерТекущего;
			
			НомерТекущего = НомерТекущего + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьДокумент(Команда)
 
	ТекстПредложения = НСтр("ru = 'Для выбора файла необходимо установить расширение работы с файлами.'");
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьДокументПродолжение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	
КонецПроцедуры  

&НаКлиенте
Процедура ЗагрузитьДокументПродолжение(РасширениеПодключено, ДопПараметры) Экспорт
	
	Если Не РасширениеПодключено Тогда
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расширение не установлено");
		Возврат;	
	КонецЕсли;
	Если Не Записать() Тогда
	    Возврат;		
	КонецЕсли;
	ТекНомер = Прав(ТекущийЭлемент.Имя, СтрДлина(ТекущийЭлемент.Имя) - СтрДлина("Покупатель_ЗагрузитьДокумент"));
	
	ВыборФайла = Новый ПараметрыДиалогаПомещенияФайлов;
	ВыборФайла.МножественныйВыбор = Истина;
	ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
	ВыборФайла.Фильтр = НСтр("ru = 'Все файлы'") + " (*.*)|*.*";
	НачатьПомещениеФайловНаСервер(Новый ОписаниеОповещения("ЗагрузитьВыбранныеДокументы", ЭтотОбъект, Новый Структура("ТекНомер", ТекНомер)),,, ВыборФайла, УникальныйИдентификатор);  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыбранныеДокументы(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	ВыбранныеФайлы = Новый Массив;
	Если ПомещенныеФайлы <> Неопределено Тогда
		Для каждого ТекФайл Из ПомещенныеФайлы Цикл		
			ВыбранныеФайлы.Добавить(Новый Структура("ИмяФайла, Расширение, Адрес", 
				ТекФайл.СсылкаНаФайл.Файл.Имя, ТекФайл.СсылкаНаФайл.Файл.Расширение, ТекФайл.Адрес)); 	
		КонецЦикла;
		ЗагрузитьДокументНаСервере(ВыбранныеФайлы, ДопПараметры.ТекНомер);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДокументНаСервере(ВыбранныеФайлы, ТекНомер)

	Для каждого ТекФайл Из ВыбранныеФайлы Цикл
				
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов",              Объект.Ссылка);
		ПараметрыФайла.Вставить("Автор",                       Объект.Ответственный);
		ПараметрыФайла.Вставить("ИмяБезРасширения",            ТекФайл.ИмяФайла);
		ПараметрыФайла.Вставить("РасширениеБезТочки",          ТекФайл.Расширение);
		ПараметрыФайла.Вставить("ВремяИзменения",              "");
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", "");
		
		АдресФайлаВоВременномХранилище = ТекФайл.Адрес; 			
		
		СсылкаНаПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);	
		СформироватьОписаниеПрисоединенногоФайла(СсылкаНаПрисоединенныйФайл, ТекНомер);
		
		//{CRM4DEV-309 Козловский С.А. 07.12.2023
		Если СтрНайти(ЭтаФорма.ТекущийЭлемент.Имя, "МКЗагрузитьДокумент") > 0 Тогда
			ФайлыМК.Добавить(СсылкаНаПрисоединенныйФайл);
			
			ИмяГруппы_Файл = "ГруппаБлокМК_Файл" + "_" + Строка(ФайлыМК.Количество() - 1);
			ИмяГруппы_Файл = Элементы.Добавить(ИмяГруппы_Файл, Тип("ГруппаФормы"), Элементы.ГруппаБлокМК_Файлы);
			ИмяГруппы_Файл.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ИмяГруппы_Файл.Заголовок = "";
			ИмяГруппы_Файл.Отображение = ОтображениеОбычнойГруппы.Нет;
			ИмяГруппы_Файл.ОтображатьЗаголовок = Ложь; 
			ИмяГруппы_Файл.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ИмяГруппы_Файл.РастягиватьПоГоризонтали = Истина;
			ИмяГруппы_Файл.РастягиватьПоВертикали = Ложь;
			ИмяГруппы_Файл.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
			ИмяГруппы_Файл.Ширина = 80;
			
			////Отступ
			ОтступНаименованиеПередГруппой = "ОтступНаименованиеПередГруппойМК" + "_" + Строка(ФайлыМК.Количество() - 1);
			ОтступНаименованиеПередГруппой = Элементы.Добавить(ОтступНаименованиеПередГруппой, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
			ОтступНаименованиеПередГруппой.Вид = ВидДекорацииФормы.Надпись;
			ОтступНаименованиеПередГруппой.Заголовок = "";
			ОтступНаименованиеПередГруппой.Ширина = 1;
			ОтступНаименованиеПередГруппой.Высота = 0;
			ОтступНаименованиеПередГруппой.РастягиватьПоВертикали = Ложь;
			
			//ЭлементФайл
			ЭлементФайл = "ЭлементФайлМК" + "_" + Строка(ФайлыМК.Количество() - 1);
			ЭлементФайл = Элементы.Добавить(ЭлементФайл, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
			ЭлементФайл.Вид = ВидДекорацииФормы.Надпись;
			ЭлементФайл.Заголовок = СсылкаНаПрисоединенныйФайл.Наименование;
			ЭлементФайл.Гиперссылка = Истина;  
			ЭлементФайл.УстановитьДействие("Нажатие", "ОткрытьФайл");
			
			//ЭлементУдалитьФайл
			ЭлементУдалитьФайл = "ЭлементУдалитьФайлМК" + "_" + Строка(ФайлыМК.Количество() - 1);
			ЭлементУдалитьФайл = Элементы.Добавить(ЭлементУдалитьФайл, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
			ЭлементУдалитьФайл.Вид = ВидДекорацииФормы.Картинка;
			ЭлементУдалитьФайл.Заголовок = "";
			ЭлементУдалитьФайл.Гиперссылка = Истина;
			ЭлементУдалитьФайл.РастягиватьПоВертикали = Ложь;
			ЭлементУдалитьФайл.Картинка = БиблиотекаКартинок.Иконка_Закрыть;
			ЭлементУдалитьФайл.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			ЭлементУдалитьФайл.Высота = 1;
			ЭлементУдалитьФайл.УстановитьДействие("Нажатие", "УдалитьФайл");
		Иначе
			ФайлыПокупателя.Добавить(СсылкаНаПрисоединенныйФайл);
					
			ИмяГруппы_Файл = "ГруппаБлокПокупателя_Файл" + НомерПокупателей + "_" + Строка(ФайлыПокупателя.Количество() - 1);
			ИмяГруппы_Файл = Элементы.Добавить(ИмяГруппы_Файл, Тип("ГруппаФормы"), Элементы["ГруппаБлокПокупателя_Файлы" + ТекНомер]);
			ИмяГруппы_Файл.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ИмяГруппы_Файл.Заголовок = "";
			ИмяГруппы_Файл.Отображение = ОтображениеОбычнойГруппы.Нет;
			ИмяГруппы_Файл.ОтображатьЗаголовок = Ложь; 
			ИмяГруппы_Файл.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ИмяГруппы_Файл.РастягиватьПоГоризонтали = Истина;
			ИмяГруппы_Файл.РастягиватьПоВертикали = Ложь;
			ИмяГруппы_Файл.ЦветФона = ЦветаСтиля.ДополнительныйЦветФона;
			ИмяГруппы_Файл.Ширина = 80;
			
			////Отступ
			ОтступНаименованиеПередГруппой = "ОтступНаименованиеПередГруппой" + НомерПокупателей + "_" + Строка(ФайлыПокупателя.Количество() - 1);
			ОтступНаименованиеПередГруппой = Элементы.Добавить(ОтступНаименованиеПередГруппой, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
			ОтступНаименованиеПередГруппой.Вид = ВидДекорацииФормы.Надпись;
			ОтступНаименованиеПередГруппой.Заголовок = "";
			ОтступНаименованиеПередГруппой.Ширина = 1;
			ОтступНаименованиеПередГруппой.Высота = 0;
			ОтступНаименованиеПередГруппой.РастягиватьПоВертикали = Ложь;
			
			//ЭлементФайл
			ЭлементФайл = "Покупатель_ЭлементФайл" + НомерПокупателей + "_" + Строка(ФайлыПокупателя.Количество() - 1);
			ЭлементФайл = Элементы.Добавить(ЭлементФайл, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
			ЭлементФайл.Вид = ВидДекорацииФормы.Надпись;
			ЭлементФайл.Заголовок = ТекФайл.ИмяФайла;
			ЭлементФайл.Гиперссылка = Истина;   
			ЭлементФайл.УстановитьДействие("Нажатие", "ОткрытьФайл");
			
			//ЭлементУдалитьФайл
			ЭлементУдалитьФайл = "Покупатель_ЭлементУдалитьФайл" + НомерПокупателей + "_" + Строка(ФайлыПокупателя.Количество() - 1);
			ЭлементУдалитьФайл = Элементы.Добавить(ЭлементУдалитьФайл, Тип("ДекорацияФормы"), ИмяГруппы_Файл);
			ЭлементУдалитьФайл.Вид = ВидДекорацииФормы.Картинка;
			ЭлементУдалитьФайл.Заголовок = "";
			ЭлементУдалитьФайл.Гиперссылка = Истина;
			ЭлементУдалитьФайл.РастягиватьПоВертикали = Ложь;
			ЭлементУдалитьФайл.Картинка = БиблиотекаКартинок.Иконка_Закрыть;
			ЭлементУдалитьФайл.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			ЭлементУдалитьФайл.УстановитьДействие("Нажатие", "УдалитьФайл");
		КонецЕсли;
		//}CRM4DEV-309 Козловский С.А. 07.12.2023
		
		
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеПрисоединенногоФайла(СсылкаНаПрисоединенныйФайл, ТекНомер)
	
	ПрисоединенныйФайлОбъект = СсылкаНаПрисоединенныйФайл.ПолучитьОбъект();	
	//{CRM4DEV-309 Козловский С.А. 07.12.2023
	Если СтрНайти(ЭтаФорма.ТекущийЭлемент.Имя, "МКЗагрузитьДокумент") > 0 Тогда
		ПрисоединенныйФайлОбъект.Служебное = "Сформировано автоматически. Маткапитал";
	Иначе
		ПрисоединенныйФайлОбъект.Служебное = "Сформировано автоматически. Номер покупателя:" + ТекНомер;
	КонецЕсли;
	//}CRM4DEV-309 Козловский С.А. 07.12.2023
	ПрисоединенныйФайлОбъект.Записать();
	
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьФайл(Элемент)
	
	УдалитьФайлНаСервере(Элемент.Имя);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура УдалитьФайлНаСервере(Знач ЭлементИмя, УдалятьЭлемент = Истина)
	
	//{CRM4DEV-309 Козловский С.А. 07.12.2023
	Если СтрНайти(ЭтаФорма.ТекущийЭлемент.Имя, "ЭлементУдалитьФайлМК") > 0 Тогда
		МассивПуть = СтрРазделить(Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрДлина("ЭлементУдалитьФайлМК")), "_");
		Если МассивПуть.Количество() = 2 Тогда
		    //ТекНомер = МассивПуть[0];
			УдаляемыйФайл = ФайлыМК[Число(МассивПуть[1])];
			//ФайлыПокупателя.Удалить(УдаляемыйФайл);
			ПрисоединенныеСПометкойУдаления.Добавить(УдаляемыйФайл.Значение);	
			Если УдалятьЭлемент Тогда
			    Элементы.Удалить(Элементы[ЭлементИмя].Родитель);
			КонецЕсли;		
		КонецЕсли;
	Иначе
		МассивПуть = СтрРазделить(Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрДлина("Покупатель_ЭлементУдалитьФайл")), "_");
		Если МассивПуть.Количество() = 2 Тогда
		    ТекНомер = МассивПуть[0];
			УдаляемыйФайл = ФайлыПокупателя[Число(МассивПуть[1])];
			//ФайлыПокупателя.Удалить(УдаляемыйФайл);
			ПрисоединенныеСПометкойУдаления.Добавить(УдаляемыйФайл.Значение);	
			Если УдалятьЭлемент Тогда
			    Элементы.Удалить(Элементы[ЭлементИмя].Родитель);
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	//}CRM4DEV-309 Козловский С.А. 07.12.2023
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Элемент)
	
	//{CRM4DEV-309 Козловский С.А. 07.12.2023
	Если СтрНайти(ЭтаФорма.ТекущийЭлемент.Имя, "ЭлементФайлМК") > 0 Тогда
		МассивПуть = СтрРазделить(Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("ЭлементФайлМК")), "_");
		Если МассивПуть.Количество() = 2 Тогда
		    //ТекНомер = МассивПуть[0];
			ТекСтруктура = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлыМК[Число(МассивПуть[1])].Значение); 		
			#Если ВебКлиент Тогда
				ПолучитьФайл(ТекСтруктура.СсылкаНаДвоичныеДанныеФайла, ТекСтруктура.ИмяФайла, Истина); 
			#Иначе 
				ТекИмя = ПолучитьИмяВременногоФайла(ТекСтруктура.Расширение);
				ПолучитьИзВременногоХранилища(ТекСтруктура.СсылкаНаДвоичныеДанныеФайла).Записать(ТекИмя);  
				ЗапуститьПриложение(ТекИмя);
			#КонецЕсли 
		КонецЕсли;
	Иначе
		МассивПуть = СтрРазделить(Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Покупатель_ЭлементФайл")), "_");
		Если МассивПуть.Количество() = 2 Тогда
		    ТекНомер = МассивПуть[0];
			ТекСтруктура = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлыПокупателя[Число(МассивПуть[1])].Значение); 		
			#Если ВебКлиент Тогда
				ПолучитьФайл(ТекСтруктура.СсылкаНаДвоичныеДанныеФайла, ТекСтруктура.ИмяФайла, Истина); 
			#Иначе 
				ТекИмя = ПолучитьИмяВременногоФайла(ТекСтруктура.Расширение);
				ПолучитьИзВременногоХранилища(ТекСтруктура.СсылкаНаДвоичныеДанныеФайла).Записать(ТекИмя);  
				ЗапуститьПриложение(ТекИмя);
			#КонецЕсли 
		КонецЕсли;      
	КонецЕсли;
	//}CRM4DEV-309 Козловский С.А. 07.12.2023
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеПрисоединенныеФайлы()
	
	Для каждого ТекЗначение Из ПрисоединенныеСПометкойУдаления Цикл
		ПрисоединенныйФайлОбъект = ТекЗначение.Значение.ПолучитьОбъект();	
		ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;	
		ПрисоединенныйФайлОбъект.Записать();		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореБрони(Результат, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
	    Объект.ЗаказКлиента = Результат;
		ЗаказКлиентаПриИзменении(Неопределено);
		Элементы.ГруппаПустаяБронь.Видимость = Ложь;
		Элементы.ГруппаЗаполненнаяБронь.Видимость = Истина;
		ЗаполнитьПодписантовСторона1Сервер();
		ЗаполнитьПодписантовСторона2Сервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНачальныйДвиж(Команда)
	
	Если ЗначениеЗаполнено(Объект.СделкаПоИпотеке) Тогда  
		ЕстьОшибки = Ложь;
		Для каждого ТекСтр Из Объект.ФайлыСделкиПоИпотеке Цикл
		    Если ТекСтр.Тип = "Первоначальный договор" И Не ЗначениеЗаполнено(ТекСтр.ПрисоединенныйФайл) Тогда
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен присоединенный файл в строке " + ТекСтр.НомерСтроки,,,, ЕстьОшибки);				
			КонецЕсли;
		КонецЦикла;     
		Если Не ЕстьОшибки Тогда
			ТекПараметры = Новый Структура;
			ТекПараметры.Вставить("contractNumber", """" + Объект.Номер + """"); 
			ТекПараметры.Вставить("contractDate", """" + Формат(Объект.Дата, "ДФ=yyyy-MM-dd") + """");
			ИнтеграцияДвижВызовСервера.ОтправитьНачальнуюВерсиюДоговора(Объект.СделкаПоИпотеке, Объект.ФайлыСделкиПоИпотеке, ТекПараметры);
		КонецЕсли;
	Иначе	
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана сделка по ипотеке");
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСогласованныйДвиж(Команда)
	
	Если ЗначениеЗаполнено(Объект.СделкаПоИпотеке) Тогда 
		ЕстьОшибки = Ложь;
		Для каждого ТекСтр Из Объект.ФайлыСделкиПоИпотеке Цикл
		    Если ТекСтр.Тип = "Согласованный договор" И Не ЗначениеЗаполнено(ТекСтр.ПрисоединенныйФайл) Тогда
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен присоединенный файл в строке " + ТекСтр.НомерСтроки,,,, ЕстьОшибки);				
			КонецЕсли;
		КонецЦикла;     
		Если Не ЕстьОшибки Тогда
			ТекПараметры = Новый Структура;
			ТекПараметры.Вставить("contractNumber", """" + Объект.Номер + """"); 
			ТекПараметры.Вставить("contractDate", """" + Формат(Объект.Дата, "ДФ=yyyy-MM-dd") + """");
			ИнтеграцияДвижВызовСервера.ОтправитьСогласованнуюВерсиюДоговора(Объект.СделкаПоИпотеке, Объект.ФайлыСделкиПоИпотеке, ТекПараметры);    
		КонецЕсли;
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана сделка по ипотеке");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗарегистрированныйДвиж(Команда)  
	
	Если ЗначениеЗаполнено(Объект.СделкаПоИпотеке) Тогда  
		ЕстьОшибки = Ложь;
		Для каждого ТекСтр Из Объект.ФайлыСделкиПоИпотеке Цикл
			Если ТекСтр.Тип = "Зарегистрированный договор" И Не ЗначениеЗаполнено(ТекСтр.ПрисоединенныйФайл) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен присоединенный файл в строке " + ТекСтр.НомерСтроки,,,, ЕстьОшибки);				
			КонецЕсли;
		КонецЦикла;     
		Если Не ЕстьОшибки Тогда
			ТекПараметры = Новый Структура;
			ТекПараметры.Вставить("contractNumber", """" + Объект.Номер + """"); 
			ТекПараметры.Вставить("contractDate", """" + Формат(Объект.Дата, "ДФ=yyyy-MM-dd") + """");
			ИнтеграцияДвижВызовСервера.ОтправитьЗарегистрированнуюВерсиюДоговора(Объект.СделкаПоИпотеке, Объект.ФайлыСделкиПоИпотеке, ТекПараметры);  
		КонецЕсли;
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана сделка по ипотеке");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвалидироватьНачальныйДвиж(Команда)
	
	Если ЗначениеЗаполнено(Объект.СделкаПоИпотеке) Тогда  
		ЕстьОшибки = Ложь;
		Для каждого ТекСтр Из Объект.ФайлыСделкиПоИпотеке Цикл
			Если ТекСтр.Тип = "Прочее" И Не ЗначениеЗаполнено(ТекСтр.ПрисоединенныйФайл) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен присоединенный файл в строке " + ТекСтр.НомерСтроки,,,, ЕстьОшибки);				
			КонецЕсли;
		КонецЦикла;     
		Если Не ЕстьОшибки Тогда
			ТекПараметры = Новый Структура;
			ТекПараметры.Вставить("contractNumber", """" + Объект.Номер + """"); 
			ТекПараметры.Вставить("contractDate", """" + Формат(Объект.Дата, "ДФ=yyyy-MM-dd") + """");
			ИнтеграцияДвижВызовСервера.ИнвалидироватьНачальнуюВерсиюДоговора(Объект.СделкаПоИпотеке, Объект.ФайлыСделкиПоИпотеке, ТекПараметры);       
		КонецЕсли;
	Иначе	
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана сделка по ипотеке");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаПоИпотекеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Документ.ЗаявкаАнкетаДляБанков.Форма.ФормаВыбора", Новый Структура("ТолькоСделки", Истина), Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда) Экспорт
    ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПолеИсторииДокументСформирован(Элемент)
	Если СписокИдентификаторов.Количество() Тогда
		Для каждого ТекИдентификатор Из СписокИдентификаторов Цикл
			ВыполнитьСкрипт("toggleCollapsibleText('mess_" + ТекИдентификатор.Значение + "');");
		КонецЦикла;	
		СписокИдентификаторов.Очистить();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Объект.Ссылка.Пустая() Тогда
	    Оповестить("ПерезаполнитьКанбан");		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
