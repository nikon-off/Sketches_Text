ТочкаСтарта = Параметры.ТочкаСтарта;
КартаМаршрута = Параметры.КартаМаршрута;
Тема = Параметры.Тема;
КаналИсточника = Параметры.ИнструментИнтереса;
КаналИнтереса = Параметры.КаналИнтереса;
ОтветДляПроверки = Параметры.ОтветДляПроверки;

ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("VK", ТекущаяДатаСеанса(), ТелоHTTPЗапроса.ПолучитьТелоКакСтроку());

Если СтруктураЗаявки.type = "confirmation" Тогда
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(ОтветДляПроверки);
	Перейти ~КонецОбработки;
	
КонецЕсли;

Если СтруктураЗаявки.type <> "lead_forms_new" Тогда
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("ok");
	Перейти ~КонецОбработки;
	
КонецЕсли;

ДанныеЗаявки = СтруктураЗаявки.object.answers;

НомерТелефона = "";
ФорматОбщения = "";
Фамилия = "";
Имя = "";

Для Каждого ТекДанные из ДанныеЗаявки Цикл
	
	Если НРег(ТекДанные.question) = НРег("Фамилия") Тогда
		
		Фамилия = ТекДанные.answer;
		Продолжить;
		
	КонецЕсли;
	
	Если НРег(ТекДанные.question) = НРег("Имя") Тогда
		
		Имя = ТекДанные.answer;
		Продолжить;

	КонецЕсли;

	Если НРег(ТекДанные.question) = НРег("Номер телефона для связи") ИЛИ НРег(ТекДанные.question) = НРег("Номер телефона") Тогда
		
		НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ТекДанные.answer);
		Продолжить;

	КонецЕсли;

	Если НРег(ТекДанные.question) = НРег("Удобный способ связи") ИЛИ НРег(ТекДанные.question) = НРег("Удобный формат общения") ИЛИ НРег(ТекДанные.question) = НРег("Предпочитаемый формат общения") ИЛИ НРег(ТекДанные.question) = НРег("Удобный для связи мессенджер") Тогда 		
		ФорматОбщения = ТекДанные.answer;
	КонецЕсли; 

КонецЦикла;


ФИО = СокрЛП(Фамилия) + ?(ЗначениеЗаполнено(Имя), " " + СокрЛП(Имя), "");

Email = Неопределено;      

НачатьТранзакцию();
Попытка 
	
	ТекДата = ТекущаяДатаСеанса();
	
	БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	
	БизнесПроцесс.КартаМаршрута = КартаМаршрута;
	БизнесПроцесс.ДатаСтарта = ТекДата;
	БизнесПроцесс.Наименование = Тема;
	БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
	БизнесПроцесс.Дата = ТекДата;
	БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
	БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
	БизнесПроцесс.Автор = Справочники.Пользователи.Система;
	БизнесПроцесс.Телефон = Справочники.ШаблоныНомеровТелефонов.ОбработатьНомерТелефонаПоМаске(НомерТелефона);																																																
	
	ЗаполнитьЗначенияСвойств(БизнесПроцесс, УПДК_ФизическиеЛица.ПоискКлиентаПоНомеруТелефона(НомерТелефона));
	
	Если Не ЗначениеЗаполнено(БизнесПроцесс.Партнер) И ЗначениеЗаполнено(Email) Тогда
		ЗаполнитьЗначенияСвойств(БизнесПроцесс, УПДК_ФизическиеЛица.ПоискКлиентаПоEmail(Email)); 
	КонецЕсли;                       
	
	Если Не ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда                           
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФИО, " ");
		
		КоличествоСлов = МассивПодстрок.Количество();
		
		Фамилия = "";
		Имя = "";
		Отчество = "";
		
		Если КоличествоСлов > 0 Тогда		
			Фамилия = МассивПодстрок[0]; 		
		КонецЕсли;
		
		Если КоличествоСлов > 1 Тогда		
			Имя = МассивПодстрок[1]; 		
		КонецЕсли;
		
		Если КоличествоСлов > 2 Тогда
			
			Отчество = "";
			
			Для Счетчик = 2 по КоличествоСлов-1 Цикл
				Отчество = Отчество + " " + МассивПодстрок[Счетчик];
			КонецЦикла;
			
			Отчество = СокрЛП(Отчество);
			
		КонецЕсли;
		
		НовФизлицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		УправлениеКонтактнойИнформацией.ДобавитьНовыйТелефон(НовФизлицо, НомерТелефона);
		
		Если ЗначениеЗаполнено(Email) Тогда
			
			НовКИ = НовФизлицо.КонтактнаяИнформация.Добавить();
			НовКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица;
			НовКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НовКИ.Представление = Email;
			НовКИ.АдресЭП = Email;
			
		КонецЕсли;
		
		НовФизлицо.Фамилия = Фамилия;
		НовФизлицо.Имя = Имя;
		НовФизлицо.Отчество = Отчество; 	
		НовФизлицо.Наименование = ФИО;
		НовФизлицо.Записать(); 		
		
		НовКонтакт = Справочники.Партнеры.СоздатьЭлемент();
		НовКонтакт.ДатаРегистрации = ТекДата;
		НовКонтакт.Наименование = ФИО;
		НовКонтакт.CRM_ФизЛицо = Истина;
		НовКонтакт.ВидПартнера = Перечисления.ВидПартнера.ЧастноеЛицо;				
		НовКонтакт.ОсновноеКонтактноеЛицо = НовФизлицо.Ссылка;
		
		НовКЛ = НовКонтакт.КонтактныеЛица.Добавить();
		НовКл.ФизЛицо = НовФизлицо.Ссылка;
		НовКл.ПравоПодписи = Истина;
		
		НовКонтакт.Записать();
		
		РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(НовКонтакт.Ссылка, Перечисления.СтатусыКлиента.Контакт);
		
		
		БизнесПроцесс.Партнер = НовКонтакт.Ссылка;
		БизнесПроцесс.КонтактноеЛицо = НовФизлицо.Ссылка;																						 
		
	КонецЕсли; 	
	
	БизнесПроцесс.Основание = БизнесПроцесс.Партнер;            
	
	Если СтрНайти(Параметры.IDВерно, СтруктураЗаявки.object.form_id) Тогда
		БизнесПроцесс.Ф_Проект = Справочники.УПДК_Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор("0c7fccd6-fae3-11e9-90f4-d05099d2110a"));		
	ИначеЕсли СтрНайти(Параметры.IDАндерсенПарк, СтруктураЗаявки.object.form_id) Тогда
		БизнесПроцесс.Ф_Проект = Справочники.УПДК_Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор("9d4014be-f93d-11e9-90f4-d05099d2110a"));
	ИначеЕсли СтрНайти(Параметры.IDГрандКвартал, СтруктураЗаявки.object.form_id) Тогда
		БизнесПроцесс.Ф_Проект = Справочники.УПДК_Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор("332c59d8-cf3a-11eb-a9b6-4c5262439168"));
	КонецЕсли;

	БизнесПроцесс.Записать();
	БизнесПроцесс.Старт();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();  
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();                          
		
		ЗадачаОбъект.Описание = Тема + Символы.ПС + "Представление клиента: " + ФИО + Символы.ПС + "Предпочитаемый способ связи: " + ФорматОбщения;                                                                                                                                                                                                                                                                                                                                       
		
		ЗадачаОбъект.Записать();
		
	КонецЦикла; 
	
	
	UTM = СтрШаблон("VK (%1)", СтруктураЗаявки.object.form_name);
		
	СтруктураМеток = Новый Структура; 	
	СтруктураМеток.Вставить("utm_campaign", UTM);
	
	ИсточникСсылка = Справочники.ИсточникиИнтереса.НайтиСоздатьИсточник(СтруктураМеток);
	
	НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сделка.Установить(БизнесПроцесс.Ссылка);			
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ТекДата;
	Запись.КаналПервичногоИнтереса = КаналИсточника;
    Запись.КаналИнтереса = КаналИнтереса;
	Запись.ИсточникИнтереса = ИсточникСсылка;	
	Запись.Партнер = БизнесПроцесс.Партнер;
	Запись.Сделка = БизнесПроцесс.Ссылка;	
	ЗаполнитьЗначенияСвойств(Запись, СтруктураМеток);	
	
	НаборЗаписей.Записать();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, ПолучитьНавигационнуюСсылку(ИсточникСсылка), БизнесПроцесс.Ссылка);	
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
Исключение
	
	Если ТранзакцияАктивна() Тогда		
		ОтменитьТранзакцию();		
	КонецЕсли;       
	
	Ответ = Новый HTTPСервисОтвет(500);
	Ответ.УстановитьТелоИзСтроки("error");
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	
	Перейти ~КонецОбработки;
	
КонецПопытки; 

Ответ = Новый HTTPСервисОтвет(200);
Ответ.УстановитьТелоИзСтроки("ok");

~КонецОбработки:
