
Функция UISPOST1(Запрос)
	
	Если Константы.ИспользоватьИнтеграциюUIS.Получить() Тогда
		
		ТелоКакСтрока = Запрос.ПолучитьТелоКакСтроку(); 	
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8"); 
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("uis/comagic", ТекущаяДатаСеанса(), ТелоКакСтрока); 
		УстановитьПривилегированныйРежим(Истина);	
		Попытка
			ЧтениеJSON	= Новый ЧтениеJSON;	
			ЧтениеJSON.УстановитьСтроку(ТелоКакСтрока); 		
			ДанныеИзJSON = ПрочитатьJSON(ЧтениеJSON);		
			ЧтениеJSON.Закрыть();
		Исключение 
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Ответ;
		КонецПопытки;
		
		Если ДанныеИзJSON = Неопределено Тогда
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, "Не удалось прочитать JSON");
			Возврат Ответ;
		КонецЕсли;
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(ТелоКакСтрока); 		
		ДанныеИзJSON = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();
		
		СтруктураЗвонка = Новый Структура;
		СтруктураЗвонка.Вставить("ТелефонКонтакта");
		СтруктураЗвонка.ТелефонКонтакта = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ДанныеИзJSON.contact_info.contact_phone_number);
		МассивНайденных = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(СтруктураЗвонка.ТелефонКонтакта);
		Если МассивНайденных.Количество() <> 0 Тогда	
			Контакт = МассивНайденных[0];		
			АбонентКонтакт = Контакт;
			АбонентПредставление	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
			
			Если Найти(Строка(Контакт), НСтр("ru = '<Объект не найден>'")) > 0 Тогда
				Комментарий	= Строка(ТипЗнч(Контакт)) + ": "
				+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт) + НСтр("ru = ', номер: '") 
				+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(Контакт, СтруктураЗвонка.ТелефонКонтакта)
				+ Символы.ПС + НСтр("ru='К данному абоненту в доступе отказано.'")
				+ НСтр("ru=' Для разрешения работы с абонентом обратитесь к руководителю или администратору.'");
			КонецЕсли;	
		Иначе
			Контакт = Справочники.Партнеры.ПустаяСсылка();
			АбонентПредставление	= НСтр("ru='!!!Не определен!!!'");	
		КонецЕсли;
		СтруктураЗвонка.Вставить("АбонентКонтакт", АбонентКонтакт);
		СтруктураЗвонка.Вставить("АбонентПредставление", АбонентПредставление);
		
		ЭтоСотрудник = Неопределено;
		Партнер = Справочники.Партнеры.ПолучитьПартнеровПоНомеруТелефона(СтруктураЗвонка.ТелефонКонтакта);
		Если Партнер.Количество() <> 0 Тогда
			ЭтоСотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер[0], "ЭтоСотрудник");
		КонецЕсли;
		
		Если ЭтоСотрудник = Неопределено Тогда
			ЭтоСотрудник = Ложь
		КонецЕсли;
		
		Если Не ЭтоСотрудник  Тогда 
			СтруктураЗвонка.Вставить("СостояниеЗвонка", "");
			СтруктураЗвонка.Вставить("Ответственный");
			СтруктураЗвонка.Вставить("ТелефонСотрудника", "");
			СтруктураЗвонка.Вставить("НовыйЗвонок");
			СтруктураЗвонка.Вставить("Автор", Справочники.Пользователи.Система);
			СтруктураЗвонка.Вставить("ИдентификаторЗвонка");
			СтруктураЗвонка.Вставить("Дата", ТекущаяДатаСеанса());
			СтруктураЗвонка.Вставить("ДанныеИзJSON",ДанныеИзJSON);
			Если ДанныеИзJSON.Свойство("employee_info") Тогда
				ФИОпользователя = ДанныеИзJSON.employee_info.employee_full_name;
				ЛогинАбонентаВиртуальнойАТС = Формат(ДанныеИзJSON.employee_info.employee_id, "ЧГ=0");
				ВидАТС = Перечисления.ВидыАТС.UIS;
				Ответственный = РегистрыСведений.ДанныеДоступаАТС.ПолучитьПользователяПоЛогину(ВидАТС, ЛогинАбонентаВиртуальнойАТС);
				Если Ответственный = Неопределено Тогда
					РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("Логин %1 пользователя %2 не заполнен в справочнике пользователя", ЛогинАбонентаВиртуальнойАТС, ФИОпользователя));
					Возврат Ответ;
				КонецЕсли;
			Иначе 
				Ответственный = Справочники.Пользователи.API;
			КонецЕсли;  
			
			Если ДанныеИзJSON.Свойство("call_session_id") Тогда
				СтруктураЗвонка.ИдентификаторЗвонка = Формат(ДанныеИзJSON.call_session_id, "ЧГ=0");
			ИначеЕсли ДанныеИзJSON.Свойство("call_info") Тогда
				СтруктураЗвонка.ИдентификаторЗвонка = Формат(ДанныеИзJSON.call_info.call_session_id, "ЧГ=0");
			КонецЕсли;
			Если ДанныеИзJSON.Свойство("call_record_file_info") Тогда
				ИдентификаторЗаписи = ДанныеИзJSON.call_record_file_info.file_link;
				СтруктураЗвонка.Вставить("ИдентификаторЗаписи", ИдентификаторЗаписи);
			КонецЕсли;  
			
			СтруктураЗвонка.Ответственный = Ответственный;
			
			ТелефонныйЗвонок = ИнтеграцияАТССервер.RT_ИзменитьТелефонныйЗвонок(СтруктураЗвонка);
			Если ЗначениеЗаполнено(ТелефонныйЗвонок) Тогда
				
				СтруктураЗвонка.НовыйЗвонок = ТелефонныйЗвонок;	
				
			Иначе
				
				ТелЗвонок = Документы.ТелефонныйЗвонок.СоздатьДокумент();
				
				ТелЗвонок.Дата							= СтруктураЗвонка.Дата;
				ТелЗвонок.Ответственный 				= СтруктураЗвонка.Ответственный;
				ТелЗвонок.Входящий						= Истина;
				ТелЗвонок.АбонентКакСвязаться			= СтруктураЗвонка.ТелефонКонтакта; 
				ТелЗвонок.Автор							= СтруктураЗвонка.Автор;	
				ТелЗвонок.Важность						= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
				ТелЗвонок.АТСИдентификаторЗвонка		= СтруктураЗвонка.ИдентификаторЗвонка;
				ТелЗвонок.Тема							= сфпСофтФонПроСервер.сфпЗаполнитьТемуТелефонногоЗвонка(ТелЗвонок.Входящий, ТелЗвонок.Дата);	
				ТелЗвонок.Описание 						= НСтр("ru = 'Звонок загружен из СoMagic'");
				ТелЗвонок.сфпСостояниеЗвонка			= Перечисления.сфпСостоянияЗвонков.Отвеченный;
				
				ТелЗвонок.АбонентКонтакт = АбонентКонтакт;
				ТелЗвонок.АбонентПредставление	= АбонентПредставление;
				
				Попытка
					ТелЗвонок.Записать();
				Исключение
					ЗаписьЖурналаРегистрации("Обработка звонка с виртуальной АТС", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки()); 		
				КонецПопытки;
				
				СтруктураЗвонка.НовыйЗвонок = ТелЗвонок.Ссылка;
				
			КонецЕсли;
			
			ИмяМетода = Запрос.ПараметрыURL["ИмяМетода"];
			
			Если ИмяМетода = "call" Тогда 
				ИнтеграцияАТССервер.УведомитьОВходящемЗвонке(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			ИначеЕсли ИмяМетода = "waiting" Тогда
				ИнтеграцияАТССервер.УведомитьОбОжиданиеОтвета(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			ИначеЕсли ИмяМетода = "missed_call" Тогда
				ИнтеграцияАТССервер.УведомитьОПропущенномЗвонке(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			ИначеЕсли ИмяМетода = "begin_call" Тогда
				ИнтеграцияАТССервер.УведомитьОНачалаеРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			ИначеЕсли ИмяМетода = "end_call" Тогда
				ИнтеграцияАТССервер.УведомитьОбОкончанииРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			ИначеЕсли ИмяМетода = "record" Тогда
				ИнтеграцияАТССервер.УведомитьОЗаписиРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			КонецЕсли;
			
		Иначе
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("Телефон контакта %1 является номер сотрудника %2", СтруктураЗвонка.ТелефонКонтакта, СтруктураЗвонка.АбонентКонтакт)); 
			
		КонецЕсли;
		
		Ответ.УстановитьТелоИзСтроки("Success");
		
	КонецЕсли;
	
	Ответ.УстановитьТелоИзСтроки("Error");
	
	Возврат Ответ;
КонецФункции




Процедура УведомитьОВходящемЗвонке(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт
	
	ДанныеИзJSON = СтруктураЗвонка.ДанныеИзJSON; 
	Попытка
		
		utm_source   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзJSON, "utm_source", 		    Неопределено);
		Если utm_source = "{{utm_source}}" Тогда
			utm_source = Неопределено;
		КонецЕсли;
		utm_campaign = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзJSON, "utm_campaign", 		Неопределено);
		Если utm_campaign = "{{utm_campaign}}" Тогда
			utm_campaign = Неопределено;
		КонецЕсли;
		Источник 	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзJSON, "advertising_campaign", Неопределено);	
		Если Источник = "{{campaign_name}}" Тогда
			Источник = Неопределено;
		КонецЕсли;
		НачатьТранзакцию();
		
		Если utm_campaign = Неопределено И Источник <> Неопределено Тогда
			//Подразумевается что тут статичный колл трэкинг и соответвие канала берется в источнике.
			ИсточникСсылка 		  = Справочники.ИсточникиИнтереса.НайтиСоздатьИсточник(Источник);
			КаналСсылка           = Справочники.КаналыИнтереса.ПустаяСсылка();
			
		Иначе
			
			Источник = "Прямые переходы на сайт";
			Если utm_campaign <> Неопределено И utm_campaign <> "" Тогда
				Источник = utm_campaign;
			КонецЕсли;
			
			Канал    = "Прямые переходы на сайт";
			Если utm_source <> Неопределено И utm_source <> "" Тогда
				Канал = utm_source;
			КонецЕсли;	
			
			СтруктураМеток = Новый Структура; 	
			СтруктураМеток.Вставить("utm_campaign", Источник);
			СтруктураМеток.Вставить("utm_source",   Канал);
			
			КаналИсточникИнтереса = УПДК_Маркетинг.НайтиСоздатьКаналИсточникИнтереса(СтруктураМеток);
			КаналСсылка 		  = КаналИсточникИнтереса.КаналИнтереса;	
			ИсточникСсылка 		  = КаналИсточникИнтереса.ИсточникИнтереса;
			
		КонецЕсли;
		
		НомерТелефона = ДанныеИзJSON.contact_info.contact_phone_number;
		Телефон = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона),10); 		
		
		НаборЗаписей = РегистрыСведений.ДанныеИсточникаЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Телефон.Установить(Телефон);
		НаборЗаписей.Отбор.Приоритет.Установить(2);
		
		Запись = НаборЗаписей.Добавить(); 	
		Запись.Телефон 				= Телефон;
		Запись.ИнструментИнтереса 	= ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CoMagic;
		Запись.Приоритет 			= 2;   	
		Запись.ДатаЗвонка 			= ТекущаяДатаСеанса();
		Запись.КаналИнтереса 		= КаналСсылка;	
		Запись.ИсточникИнтереса 	= ИсточникСсылка;
		
		ДанныеЗвонкаСтруктура = Новый Структура;	
		
		Если УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("Roistat_ИспользоватьИнтеграцию") Тогда
			
			Попытка
				
				Для Каждого ТекСвойство из ДанныеИзJSON.visitor_properties Цикл
					
					Если ТекСвойство.name = "roistat_visit" Тогда				
						
						ДанныеЗвонкаСтруктура.Вставить("roistat_id", ТекСвойство.value); 
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		ЕстьДанныеКонтекстнойРекламы = Ложь;
		Если НЕ utm_campaign = Неопределено Тогда
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_campaign", 	  ДанныеИзJSON.utm_campaign);	 ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_content", 	  ДанныеИзJSON.utm_content); 	 ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_medium", 	  ДанныеИзJSON.utm_medium);	 	 ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_term", 		  ДанныеИзJSON.utm_term);	 	 ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_source", 	  ДанныеИзJSON.utm_source);   	 ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("Домен", 		  ДанныеИзJSON.referrer_domain); ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("Реферер", 		  ДанныеИзJSON.referrer);        ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;  	
		Иначе
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_campaign", 	  "Прямые переходы на сайт");	 ЕстьДанныеКонтекстнойРекламы = Ложь; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_content", 	  "Прямые переходы на сайт"); 	 ЕстьДанныеКонтекстнойРекламы = Ложь; Исключение КонецПопытки;
			
		КонецЕсли;
		
		ДанныеЗвонкаСтруктура.Вставить("ЕстьДанныеКонтекстнойРекламы", ЕстьДанныеКонтекстнойРекламы);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ДанныеЗвонкаСтруктура);
		Json = ЗаписьJSON.Закрыть();
		
		Запись.ДанныеЗвонкаJSON = Json;
		
		НаборЗаписей.Записать();
		
		//Перезапишем последний звонок по этому номеру, чтобы подхватить данные звонка, что пришли позже	
		ПерезаписатьПоследнийЗвонок(Телефон);
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, "Успешно");	
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УведомитьОНачалаеРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт
	
	НовыйЗвонок = СтруктураЗвонка.НовыйЗвонок;
	ТелЗвонок = НовыйЗвонок.ПолучитьОбъект();
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
	НаборЗаписей.Отбор.hCall.Установить(1); //Транк всегда первый
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.hCall = 1; 
	НоваяЗапись.Звонок 						= ТелЗвонок.Ссылка;
	НоваяЗапись.НомерТелефона				= ТелЗвонок.АбонентКакСвязаться;
	НоваяЗапись.ДатаНачала					= ТелЗвонок.Дата;		
	НоваяЗапись.ДатаОкончания  				= ТелЗвонок.Дата;
	НоваяЗапись.Входящий					= ТелЗвонок.Входящий;
	НоваяЗапись.АТСИдентификаторЗвонка		= ТелЗвонок.АТСИдентификаторЗвонка;
	НоваяЗапись.ИдентификаторЗвонка			= ТелЗвонок.АТСИдентификаторЗвонка;		
	НоваяЗапись.CallData					= ТелЗвонок.АТСИдентификаторЗвонка;		
	
	НоваяЗапись.Ответственный				= ТелЗвонок.Ответственный;
	НоваяЗапись.АбонентКонтакт				= ТелЗвонок.АбонентКонтакт;
	НоваяЗапись.Транк						= Истина;
	
	НаборЗаписей.Записать(); 		
	
	СобытиеОбъект = Документы.CRM_Событие.СоздатьДокумент();
	
	НовоеСобытие = ИнтеграцияАТССервер.ПолучитьСтруктуруДляЗаполненияСобытия();
	
	Пользователь = СтруктураЗвонка.Ответственный;
	
	Партнер = Справочники.Партнеры.ПустаяСсылка();
	КонтаткноеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	НеобработанныйКонтакт = Истина;
	
	Контакт = СтруктураЗвонка.НовыйЗвонок.АбонентКонтакт;
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			
			Партнер = Контакт;
			//Поле КЛ не заполняем, так как звонит не физическое лицо. Необходимо выбрать из списка на форме.
			
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			КонтактноеЛицо = Контакт;
			Партнер = Справочники.ФизическиеЛица.ПолучитьПартнера(КонтактноеЛицо, Истина);
			
		КонецЕсли;				
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			НеобработанныйКонтакт = РегистрыСведений.СтатусыКлиентов.ПолучитьСтатусКлиента(Партнер) = Перечисления.СтатусыКлиента.НеобработанныйКонтакт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураЗвонка.НовыйЗвонок.Входящий Тогда
		
		Если НеобработанныйКонтакт Тогда
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ПервичныйВходящий, Пользователь);
		Иначе
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ВторичныйВходящий, Пользователь);
		КонецЕсли;	
		
		НовоеСобытие["ВходящееИсходящее"]	= Перечисления["CRM_ВходящееИсходящееСобытие"].Входящее;
		
	Иначе
		
		Если НеобработанныйКонтакт Тогда
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ПервичныйИсходящий, Пользователь);			
		Иначе
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ВторичныйИсходящий, Пользователь);			
			
		КонецЕсли;
		
		НовоеСобытие["ВходящееИсходящее"]	= Перечисления["CRM_ВходящееИсходящееСобытие"].Исходящее;
		
	КонецЕсли;
	
	НовоеСобытие["Дата"]				= СтруктураЗвонка.Дата;
	НовоеСобытие["Автор"]				= СтруктураЗвонка.Автор;
	НовоеСобытие["Ответственный"]		= СтруктураЗвонка.Ответственный;
	НовоеСобытие["Важность"]			= Перечисления["ВариантыВажностиВзаимодействия"].Обычная;
	НовоеСобытие["Тема"]				= НСтр("ru='#Создан автоматически при загрузке с виртуальной АТС'");		
	НовоеСобытие["ДокументОснование"] 	= СтруктураЗвонка.НовыйЗвонок;		
	НовоеСобытие["ВидСобытия"]			= Перечисления["CRM_ВидыСобытий"].ТелефонныйЗвонок;
	НовоеСобытие["СостояниеСобытия"]	= Справочники["CRM_СостоянияСобытий"].ВРаботе; 		
	НовоеСобытие["Место"] 				= СтруктураЗвонка.ТелефонКонтакта;		
	НовоеСобытие["Партнер"] 			= Партнер;
	НовоеСобытие["КонтактноеЛицо"] 		= КонтактноеЛицо;
	
	Если ЗначениеЗаполнено(НовоеСобытие.Партнер)
		И НовоеСобытие.Партнер.CRM_ТипОтношений = Справочники.CRM_ТипыОтношений.АгентствоНедвижимости Тогда
		
		НовоеСобытие.УПДК_АгентствоНедвижимости = НовоеСобытие.Партнер;
		НовоеСобытие.УПДК_Агент = НовоеСобытие.КонтактноеЛицо;
		НовоеСобытие.Партнер = Справочники.Партнеры.ПустаяСсылка();
		НовоеСобытие.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		НовоеСобытие.УПДК_ЗвонилАгент = Истина;
		
	КонецЕсли;
	
	СобытиеОбъект = Документы.CRM_Событие.СоздатьДокумент();
	СобытиеОбъект.Заполнить(НовоеСобытие);
	НовоеСобытие = НовоеСобытие;
	
	Попытка
		СобытиеОбъект.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Событие = СобытиеОбъект.Ссылка;
	Первичный = Истина;
	Если НЕ ТелЗвонок = Неопределено Тогда
		СтруктураЗвонка.НовыйЗвонок = ТелЗвонок;   
		
		Если ЗначениеЗаполнено(Событие) Тогда	
			Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(Событие);
		Иначе
			Сделка = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сделка) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "Основание") <> Событие Тогда
			Первичный = Ложь;
		КонецЕсли; 
		
		Если ТелЗвонок.Входящий Тогда  
			Если ИспользоватьНовыйВариант() Тогда
				Если Первичный Тогда
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриПервичномВходящемЗвонке", СтруктураЗвонка.Ответственный);
				Иначе	
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВторичномВходящемЗвонке", СтруктураЗвонка.Ответственный);
				КонецЕсли;
			Иначе	
				НаименованиеДействия		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВходящемЗвонке", СтруктураЗвонка.Ответственный);
			КонецЕсли;				
		Иначе	
			НаименованиеДействия			= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриИсходящемЗвонке", СтруктураЗвонка.Ответственный);	
		КонецЕсли;
		ОткрыватьУведомлениеОЗвонке		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпОткрыватьУведомлениеОЗвонке", СтруктураЗвонка.Ответственный);
		
		Если НЕ (НаименованиеДействия = "Открыть событие" Или НаименованиеДействия = "Открыть сделку" или ОткрыватьУведомлениеОЗвонке) Тогда
			Возврат;
		КонецЕсли;  
		
		Получатель = Пользователь;
		ИнтеграцияАТССервер.ОтправитьДанныеПользователюНаКлиент(
		"НачалоРазговора",
		Получатель,
		СтруктураЗвонка.ТелефонКонтакта,
		ТелЗвонок.АбонентПредставление,
		СтруктураЗвонка.Дата,
		Событие,
		Сделка,
		СтруктураЗвонка.ИдентификаторЗвонка,
		НаименованиеДействия,
		ОткрыватьУведомлениеОЗвонке);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, Событие); 
	КонецЕсли;
	
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("Success");
	
	
КонецПроцедуры 

Процедура УведомитьОбОкончанииРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|ГДЕ
	|	ТелефонныйЗвонок.АТСИдентификаторЗвонка = &АТСИдентификаторЗвонка";
	
	Запрос.УстановитьПараметр("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("АТСИдентификаторЗвонка %1 не привязан к записи Документ.ТелефонныйЗвонок", СтруктураЗвонка.ИдентификаторЗвонка));
		Возврат;
	КонецЕсли;
	
	НайденныйЗвонок = ВыборкаДетальныеЗаписи.Ссылка;
	
	СтруктураЗвонка.Ответственный = НайденныйЗвонок.Ответственный;
	СтруктураЗвонка.ТелефонКонтакта = НайденныйЗвонок.АбонентКакСвязаться;
	
	
	//Проверяем Максимальное значение hCall чтобы добавить новую запись
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	сфпИсторияЗвонков.hCall КАК hCall
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	|ГДЕ
	|	сфпИсторияЗвонков.Звонок = &Звонок
	|
	|УПОРЯДОЧИТЬ ПО
	|	hCall УБЫВ";
	
	Запрос.УстановитьПараметр("Звонок", НайденныйЗвонок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
		hCall = ВыборкаДетальныеЗаписи.hCall + 1;
	Иначе
		hCall = 2; 			
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(НайденныйЗвонок);
	НаборЗаписей.Отбор.hCall.Установить(hCall); //Транк всегда первый
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.hCall = hCall;
	НоваяЗапись.Звонок 			= НайденныйЗвонок;
	НоваяЗапись.НомерТелефона	= НайденныйЗвонок.АбонентКакСвязаться;
	НоваяЗапись.ДатаНачала		= НайденныйЗвонок.Дата;
	НоваяЗапись.ДатаОтвета		= НайденныйЗвонок.Дата;		
	НоваяЗапись.ДатаОкончания	= СтруктураЗвонка.Дата;		
	
	НоваяЗапись.Входящий					= НайденныйЗвонок.Входящий;
	НоваяЗапись.АТСИдентификаторЗвонка		= НайденныйЗвонок.АТСИдентификаторЗвонка;
	НоваяЗапись.ИдентификаторЗаписи			= ""; //Оставляем пустым, потом заполнится
	
	НоваяЗапись.Ответственный				= НайденныйЗвонок.Ответственный;
	НоваяЗапись.АбонентКонтакт				= НайденныйЗвонок.АбонентКонтакт;
	
	НаборЗаписей.Записать(); 
	
	//Проверяем Максимальное значение hCall чтобы добавить новую запись
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	сфпИсторияЗвонков.hCall КАК hCall
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	|ГДЕ
	|	сфпИсторияЗвонков.Звонок = &Звонок
	|
	|УПОРЯДОЧИТЬ ПО
	|	hCall УБЫВ";
	
	Запрос.УстановитьПараметр("Звонок", НайденныйЗвонок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
		
		hCall = ВыборкаДетальныеЗаписи.hCall;
		
		НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Звонок.Установить(НайденныйЗвонок);
		НаборЗаписей.Отбор.hCall.Установить(hCall); //Транк всегда первый
		
		НаборЗаписей.Прочитать();
		
		Для Каждого ТекЗапись из НаборЗаписей Цикл
			
			ТекЗапись.ДатаОкончания = СтруктураЗвонка.Дата;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(); 
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	CRM_Событие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Событие КАК CRM_Событие
	|ГДЕ
	|	CRM_Событие.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", НайденныйЗвонок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("ДокументОснование %1 не привязан к событию", НайденныйЗвонок));
		Возврат;
	КонецЕсли;
	
	Событие = Выборка.Ссылка;
	
	Если ЗначениеЗаполнено(Событие) Тогда
		
		Дата = Событие.Дата;		
		
		ТипОповещения = "Завершен";	
		
		Получатель = СтруктураЗвонка.Ответственный;
		
		ИнтеграцияАТССервер.ОтправитьДанныеПользователюНаКлиент(
		ТипОповещения,
		Получатель,
		СтруктураЗвонка.ТелефонКонтакта,
		"",
		Дата,
		Событие,
		СтруктураЗвонка.ИдентификаторЗвонка);
		
	КонецЕсли;
	
	ТелЗвонок = НайденныйЗвонок.ПолучитьОбъект();
	//ТелЗвонок.сфпИдентификаторЗаписи		= СтруктураЗвонка.СсылкаНаЗапись;
	ТелЗвонок.сфпДлительностьЗвонка			= СтруктураЗвонка.Дата - ТелЗвонок.Дата;
	
	Попытка
		ТелЗвонок.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Обработка звонка с виртуальной АТС", УровеньЖурналаРегистрации.Ошибка);
		
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
	НаборЗаписей.Отбор.hCall.Установить(1); //Транк всегда первый
	
	НаборЗаписей.Прочитать();
	
	Для Каждого НоваяЗапись из НаборЗаписей Цикл		
		НоваяЗапись.ДатаОкончания				= СтруктураЗвонка.Дата;		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("ДокументОснование %1 не привязан к событию", НайденныйЗвонок)); 
	
КонецПроцедуры

Процедура УведомитьОПропущенномЗвонке(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт
	
	КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПропущенныеЗвонки;
	КаналИсточника = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CoMagic;
	ПроектСобытия = Справочники.Проекты.НайтиПоНаименованию("Пропущенный", Истина);
	
	ДанныеИзJSON = СтруктураЗвонка.ДанныеИзJSON; 
	
	СтруктураЗаявки = ДанныеИзJSON;
	
	JsonОтвет = Новый ЗаписьJSON;
	JsonОтвет.УстановитьСтроку();
	
	phone = СтруктураЗаявки.contact_info.contact_phone_number;
	name = "Неопределенный контакт";
	
	Если ПустаяСтрока(phone) Тогда
		
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-Type", " application/json");
		ЗаписатьJSON(JsonОтвет, Новый Структура("error", "phone is empty"));
		Ответ.УстановитьТелоИзСтроки(JsonОтвет.Закрыть());	
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 400, JsonОтвет);
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураЗаявки.Свойство("utm_campaign") Тогда
		utm_campaign = СтруктураЗаявки.utm_campaign;
	Иначе
		utm_campaign = "Прямые переходы на сайт";	
	КонецЕсли;
	
	НомерТелефона = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(phone), 10); 
	
	Попытка
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
		|ГДЕ
		|	CRM_ТочкиМаршрутов.Владелец = &Владелец
		|	И CRM_ТочкиМаршрутов.Вид = &Вид
		|	И НЕ CRM_ТочкиМаршрутов.НеИспользуется
		|	И НЕ CRM_ТочкиМаршрутов.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Вид", Перечисления.CRM_ВидыТочекМаршрута.Старт);
		Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТочкаСтарта = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
		
		БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
		
		БизнесПроцесс.КартаМаршрута = КартаМаршрута;
		БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
		БизнесПроцесс.Наименование = "(UIS) Потерянный звонок";
		БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация;  
		БизнесПроцесс.Дата = ТекущаяДатаСеанса();
		БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
		БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
		БизнесПроцесс.Автор = Справочники.Пользователи.Система;
		БизнесПроцесс.Телефон = Справочники.ШаблоныНомеровТелефонов.ОбработатьНомерТелефонаПоМаске(НомерТелефона);															
		
		ЗаполнитьЗначенияСвойств(БизнесПроцесс, УПДК_ФизическиеЛица.ПоискКлиентаПоНомеруТелефона(НомерТелефона));
		
		Если Не ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда                           
			
			ФИО = name;
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФИО, " ");
			
			КоличествоСлов = МассивПодстрок.Количество();
			
			Фамилия = "";
			Имя = "";
			Отчество = "";
			
			Если КоличествоСлов > 0 Тогда		
				Фамилия = МассивПодстрок[0]; 		
			КонецЕсли;
			
			Если КоличествоСлов > 1 Тогда		
				Имя = МассивПодстрок[1]; 		
			КонецЕсли;
			
			Если КоличествоСлов > 2 Тогда
				
				Отчество = "";
				
				Для Счетчик = 2 по КоличествоСлов-1 Цикл
					Отчество = Отчество + " " + МассивПодстрок[Счетчик];
				КонецЦикла;
				
				Отчество = СокрЛП(Отчество);
				
			КонецЕсли;
			
			НовФизлицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			УправлениеКонтактнойИнформацией.ДобавитьНовыйТелефон(НовФизлицо, НомерТелефона);
			
			НовФизлицо.Фамилия = Фамилия;
			НовФизлицо.Имя = Имя;
			НовФизлицо.Отчество = Отчество; 	
			НовФизлицо.Наименование = ФИО;
			НовФизлицо.Записать(); 
			
			НовКонтакт = Справочники.Партнеры.СоздатьЭлемент();
			НовКонтакт.ДатаРегистрации = ТекущаяДатаСеанса();
			НовКонтакт.Наименование = ФИО;
			НовКонтакт.CRM_ФизЛицо = Истина;
			НовКонтакт.ВидПартнера = Перечисления.ВидПартнера.ЧастноеЛицо;				
			НовКонтакт.ОсновноеКонтактноеЛицо = НовФизлицо.Ссылка;
			
			НовКЛ = НовКонтакт.КонтактныеЛица.Добавить();
			НовКл.ФизЛицо = НовФизлицо.Ссылка;
			НовКл.ПравоПодписи = Истина;
			
			НовКонтакт.Записать();
			
			РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(НовКонтакт.Ссылка, Перечисления.СтатусыКлиента.Контакт);
			
			
			БизнесПроцесс.Партнер = НовКонтакт.Ссылка;
			БизнесПроцесс.КонтактноеЛицо = НовФизлицо.Ссылка;
			
		КонецЕсли;
		
		БизнесПроцесс.Основание = БизнесПроцесс.Партнер;
		
		БизнесПроцесс.Записать();
		БизнесПроцесс.Старт();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();  
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Комментарий = "(UIS) Потерянный звонок";
			
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			ЗадачаОбъект.Описание = Комментарий;
			
			//Создаем Событие
			СвязанноеСобытие = Документы.CRM_Событие.СоздатьДокумент();
			
			ДанныеЗаполнения = Новый Структура;
			
			ДанныеЗаполнения.Вставить("Партнер", 			БизнесПроцесс.Партнер);
			ДанныеЗаполнения.Вставить("КонтактноеЛицо", 	БизнесПроцесс.КонтактноеЛицо);
			ДанныеЗаполнения.Вставить("Предмет", 			БизнесПроцесс.ОбъектНедвижимости);
			ДанныеЗаполнения.Вставить("Проект", 			ПроектСобытия);
			ДанныеЗаполнения.Вставить("Автор", 				Справочники.Пользователи.Система);
			ДанныеЗаполнения.Вставить("Ответственный", 		Справочники.Пользователи.Система);
			ДанныеЗаполнения.Вставить("Место", 				БизнесПроцесс.Телефон);
			
			СвязанноеСобытие.Заполнить(ДанныеЗаполнения);
			
			СвязанноеСобытие.СвязаннаяЗадача = ЗадачаОбъект.Ссылка; 		
			СвязанноеСобытие.Описание = ЗадачаОбъект.Описание; 		
			СвязанноеСобытие.Тема = "(UIS) Потерянный звонок"; 		
			
			СвязанноеСобытие.Записать();
			
			ИсточникСсылка = Справочники.ИсточникиИнтереса.НайтиСоздатьИсточник(utm_campaign);  						
			
			НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сделка.Установить(СвязанноеСобытие.Ссылка);			
			
			Запись = НаборЗаписей.Добавить();
			Запись.Период 				   = ТекущаяДатаСеанса();
			Запись.КаналПервичногоИнтереса = КаналИсточника;
			Запись.ИсточникИнтереса 	   = ИсточникСсылка;		
			Запись.Партнер 				   = СвязанноеСобытие.Партнер;
			Запись.Сделка  				   = СвязанноеСобытие.Ссылка;		
			
			НаборЗаписей.Записать();
			
			
			ЗадачаОбъект.СвязанноеСобытие = СвязанноеСобытие.Ссылка; 
			ЗадачаОбъект.Предмет 		= СвязанноеСобытие.Ссылка; 
			
			ЗадачаОбъект.Записать();
			
			БизнесПроцесс.Предмет 		= СвязанноеСобытие.Ссылка;
			БизнесПроцесс.Записать();
			
		КонецЦикла; 
		
		ИсточникСсылка = Справочники.ИсточникиИнтереса.НайтиСоздатьИсточник(utm_campaign);  						
		
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сделка.Установить(БизнесПроцесс.Ссылка);			
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ТекущаяДатаСеанса();
		Запись.КаналПервичногоИнтереса = КаналИсточника;
		Запись.ИсточникИнтереса = ИсточникСсылка;		
		Запись.Партнер = БизнесПроцесс.Партнер;
		Запись.Сделка = БизнесПроцесс.Ссылка;		
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();  	
		
	Исключение
		
		Ответ = Новый HTTPСервисОтвет(501);
		Ответ.Заголовки.Вставить("Content-Type", " application/json");
		ЗаписатьJSON(JsonОтвет, Новый Структура("error", ОписаниеОшибки()));
		Ответ.УстановитьТелоИзСтроки(JsonОтвет.Закрыть());	
		Ответ.Причина = ОписаниеОшибки();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 501, JsonОтвет);
		Возврат; 
		
	КонецПопытки; 
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("Success");
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, БизнесПроцесс.Ссылка); 
	
КонецПроцедуры

Процедура УведомитьОЗаписиРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|ГДЕ
	|	ТелефонныйЗвонок.АТСИдентификаторЗвонка = &АТСИдентификаторЗвонка";
	
	Запрос.УстановитьПараметр("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("АТСИдентификаторЗвонка %1 не соответвствует текущему документу звонка"));
		Возврат; 
	КонецЕсли;
	
	НайденныйЗвонок = ВыборкаДетальныеЗаписи.Ссылка;
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(НайденныйЗвонок);
	НаборЗаписей.Прочитать();
	
	Для Каждого ТекЗапись из НаборЗаписей Цикл	
		ТеКЗапись.ИдентификаторЗаписи = СтруктураЗвонка.ИдентификаторЗаписи;	
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УведомитьОбОжиданиеОтвета(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт 
	
	НовыйЗвонок = СтруктураЗвонка.НовыйЗвонок;
	ТелЗвонок = НовыйЗвонок.ПолучитьОбъект();
	
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
	НаборЗаписей.Отбор.hCall.Установить(1); //Транк всегда первый
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.hCall = 1; 
	НоваяЗапись.Звонок 						= ТелЗвонок.Ссылка;
	НоваяЗапись.НомерТелефона				= ТелЗвонок.АбонентКакСвязаться;
	НоваяЗапись.ДатаНачала					= ТелЗвонок.Дата;		
	НоваяЗапись.ДатаОкончания  				= ТелЗвонок.Дата;
	НоваяЗапись.Входящий					= ТелЗвонок.Входящий;
	НоваяЗапись.АТСИдентификаторЗвонка		= ТелЗвонок.АТСИдентификаторЗвонка;
	НоваяЗапись.ИдентификаторЗаписи			= ТелЗвонок.АТСИдентификаторЗвонка;		
	НоваяЗапись.CallData					= ТелЗвонок.АТСИдентификаторЗвонка;		
	НоваяЗапись.Ответственный				= ТелЗвонок.Ответственный;
	НоваяЗапись.АбонентКонтакт				= ТелЗвонок.АбонентКонтакт;
	НоваяЗапись.Транк						= Истина;
	НаборЗаписей.Записать();
	
	Пользователь = СтруктураЗвонка.Ответственный;
	Событие = Неопределено;
	ТелЗвонок = ТелЗвонок.Ссылка;
	Первичный = Истина;
	Если НЕ ТелЗвонок = Неопределено Тогда
		СтруктураЗвонка.НовыйЗвонок = ТелЗвонок;   
		Сделка = СоздатьПолучитьСделку(ТелЗвонок);
		
		Если ЗначениеЗаполнено(Сделка) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "Основание") <> Событие Тогда
			Первичный = Ложь;
		КонецЕсли; 
		
		Если ТелЗвонок.Входящий Тогда  
			Если ИспользоватьНовыйВариант() Тогда
				Если Первичный Тогда
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриПервичномВходящемЗвонке", СтруктураЗвонка.Ответственный);
				Иначе	
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВторичномВходящемЗвонке", СтруктураЗвонка.Ответственный);
				КонецЕсли;
			Иначе	
				НаименованиеДействия		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВходящемЗвонке", СтруктураЗвонка.Ответственный);
			КонецЕсли;				
		Иначе	
			НаименованиеДействия			= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриИсходящемЗвонке", СтруктураЗвонка.Ответственный);	
		КонецЕсли;
		ОткрыватьУведомлениеОЗвонке		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпОткрыватьУведомлениеОЗвонке", СтруктураЗвонка.Ответственный);
		
		Если НЕ (НаименованиеДействия = "Открыть событие" Или НаименованиеДействия = "Открыть сделку" или ОткрыватьУведомлениеОЗвонке) Тогда
			Возврат;
		КонецЕсли;  
		
		Получатель = Пользователь;
		ИнтеграцияАТССервер.ОтправитьДанныеПользователюНаКлиент(
		"ВходящийНачало",
		Получатель,
		СтруктураЗвонка.ТелефонКонтакта,
		ТелЗвонок.АбонентПредставление,
		СтруктураЗвонка.Дата,
		Событие,
		Сделка,
		СтруктураЗвонка.ИдентификаторЗвонка,
		НаименованиеДействия,
		ОткрыватьУведомлениеОЗвонке);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, Событие); 
		
	КонецЕсли;
	
КонецПроцедуры

