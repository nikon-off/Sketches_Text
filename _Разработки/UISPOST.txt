Функция UISPOST(Запрос)
	
	Если Константы.ИспользоватьИнтеграциюUIS.Получить() Тогда
		
		ТелоКакСтрока = Запрос.ПолучитьТелоКакСтроку(); 	
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8"); 
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("uis/comagic", ТекущаяДатаСеанса(), ТелоКакСтрока); 
		УстановитьПривилегированныйРежим(Истина);	
		Попытка
			ЧтениеJSON	= Новый ЧтениеJSON;	
			ЧтениеJSON.УстановитьСтроку(ТелоКакСтрока); 		
			ДанныеИзJSON = ПрочитатьJSON(ЧтениеJSON);		
			ЧтениеJSON.Закрыть();
		Исключение 
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Ответ;
		КонецПопытки;
		
		Если ДанныеИзJSON = Неопределено Тогда
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, "Не удалось прочитать JSON");
			Возврат Ответ;
		КонецЕсли;
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(ТелоКакСтрока); 		
		ДанныеИзJSON = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();
		
		СтруктураЗвонка = Новый Структура;
		СтруктураЗвонка.Вставить("ТелефонКонтакта");
		СтруктураЗвонка.ТелефонКонтакта = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ДанныеИзJSON.contact_info.contact_phone_number);
		МассивНайденных = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(СтруктураЗвонка.ТелефонКонтакта);
		Если МассивНайденных.Количество() <> 0 Тогда	
			Контакт = МассивНайденных[0];		
			АбонентКонтакт = Контакт;
			АбонентПредставление	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
			
			Если Найти(Строка(Контакт), НСтр("ru = '<Объект не найден>'")) > 0 Тогда
				Комментарий	= Строка(ТипЗнч(Контакт)) + ": "
				+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт) + НСтр("ru = ', номер: '") 
				+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(Контакт, СтруктураЗвонка.ТелефонКонтакта)
				+ Символы.ПС + НСтр("ru='К данному абоненту в доступе отказано.'")
				+ НСтр("ru=' Для разрешения работы с абонентом обратитесь к руководителю или администратору.'");
			КонецЕсли;	
		Иначе
			Контакт = Справочники.Партнеры.ПустаяСсылка();
			АбонентПредставление	= НСтр("ru='!!!Не определен!!!'");	
		КонецЕсли;
		СтруктураЗвонка.Вставить("АбонентКонтакт", АбонентКонтакт);
		СтруктураЗвонка.Вставить("АбонентПредставление", АбонентПредставление);
		
		ЭтоСотрудник = Неопределено;
		Партнер = Справочники.Партнеры.ПолучитьПартнеровПоНомеруТелефона(СтруктураЗвонка.ТелефонКонтакта);
		Если Партнер.Количество() <> 0 Тогда
			ЭтоСотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер[0], "ЭтоСотрудник");
		КонецЕсли;
		
		Если ЭтоСотрудник = Неопределено Тогда
			ЭтоСотрудник = Ложь
		КонецЕсли;
		
		Если Не ЭтоСотрудник  Тогда 
			СтруктураЗвонка.Вставить("СостояниеЗвонка", "");
			СтруктураЗвонка.Вставить("Ответственный");
			СтруктураЗвонка.Вставить("ТелефонСотрудника", "");
			СтруктураЗвонка.Вставить("НовыйЗвонок");
			СтруктураЗвонка.Вставить("Автор", Справочники.Пользователи.Система);
			СтруктураЗвонка.Вставить("ИдентификаторЗвонка");
			СтруктураЗвонка.Вставить("Дата", ТекущаяДатаСеанса());
			СтруктураЗвонка.Вставить("ДанныеИзJSON",ДанныеИзJSON);
			Если ДанныеИзJSON.Свойство("employee_info") Тогда
				ФИОпользователя = ДанныеИзJSON.employee_info.employee_full_name;
				ЛогинАбонентаВиртуальнойАТС = Формат(ДанныеИзJSON.employee_info.employee_id, "ЧГ=0");
				ВидАТС = Перечисления.ВидыАТС.UIS;
				Ответственный = РегистрыСведений.ДанныеДоступаАТС.ПолучитьПользователяПоЛогину(ВидАТС, ЛогинАбонентаВиртуальнойАТС);
				Если Ответственный = Неопределено Тогда
					РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("Логин %1 пользователя %2 не заполнен в справочнике пользователя", ЛогинАбонентаВиртуальнойАТС, ФИОпользователя));
					Возврат Ответ;
				КонецЕсли;
			Иначе 
				Ответственный = Справочники.Пользователи.API;
			КонецЕсли;  
			
			Если ДанныеИзJSON.Свойство("call_session_id") Тогда
				СтруктураЗвонка.ИдентификаторЗвонка = Формат(ДанныеИзJSON.call_session_id, "ЧГ=0");
			ИначеЕсли ДанныеИзJSON.Свойство("call_info") Тогда
				СтруктураЗвонка.ИдентификаторЗвонка = Формат(ДанныеИзJSON.call_info.call_session_id, "ЧГ=0");
			КонецЕсли;
			Если ДанныеИзJSON.Свойство("call_record_file_info") Тогда
				ИдентификаторЗаписи = ДанныеИзJSON.call_record_file_info.file_link;
				СтруктураЗвонка.Вставить("ИдентификаторЗаписи", ИдентификаторЗаписи);
			КонецЕсли;  
			
			СтруктураЗвонка.Ответственный = Ответственный;
			
			ТелефонныйЗвонок = ИнтеграцияАТССервер.RT_ИзменитьТелефонныйЗвонок(СтруктураЗвонка);
			Если ЗначениеЗаполнено(ТелефонныйЗвонок) Тогда
				
				СтруктураЗвонка.НовыйЗвонок = ТелефонныйЗвонок;	
				
			Иначе
				
				ТелЗвонок = Документы.ТелефонныйЗвонок.СоздатьДокумент();
				
				ТелЗвонок.Дата							= СтруктураЗвонка.Дата;
				ТелЗвонок.Ответственный 				= СтруктураЗвонка.Ответственный;
				ТелЗвонок.Входящий						= Истина;
				ТелЗвонок.АбонентКакСвязаться			= СтруктураЗвонка.ТелефонКонтакта; 
				ТелЗвонок.Автор							= СтруктураЗвонка.Автор;	
				ТелЗвонок.Важность						= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
				ТелЗвонок.АТСИдентификаторЗвонка		= СтруктураЗвонка.ИдентификаторЗвонка;
				ТелЗвонок.Тема							= сфпСофтФонПроСервер.сфпЗаполнитьТемуТелефонногоЗвонка(ТелЗвонок.Входящий, ТелЗвонок.Дата);	
				ТелЗвонок.Описание 						= НСтр("ru = 'Звонок загружен из СoMagic'");
				ТелЗвонок.сфпСостояниеЗвонка			= Перечисления.сфпСостоянияЗвонков.Отвеченный;
				
				ТелЗвонок.АбонентКонтакт = АбонентКонтакт;
				ТелЗвонок.АбонентПредставление	= АбонентПредставление;
				
				Попытка
					ТелЗвонок.Записать();
				Исключение
					ЗаписьЖурналаРегистрации("Обработка звонка с виртуальной АТС", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки()); 		
				КонецПопытки;
				
				СтруктураЗвонка.НовыйЗвонок = ТелЗвонок.Ссылка;
				
			КонецЕсли;
			
			ИмяМетода = Запрос.ПараметрыURL["ИмяМетода"];
			
			Если ИмяМетода = "call" Тогда 
				ИнтеграцияАТССервер.УведомитьОВходящемЗвонке(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			ИначеЕсли ИмяМетода = "waiting" Тогда
				ИнтеграцияАТССервер.УведомитьОбОжиданиеОтвета(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			ИначеЕсли ИмяМетода = "missed_call" Тогда
				ИнтеграцияАТССервер.УведомитьОПропущенномЗвонке(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			ИначеЕсли ИмяМетода = "begin_call" Тогда
				ИнтеграцияАТССервер.УведомитьОНачалаеРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			ИначеЕсли ИмяМетода = "end_call" Тогда
				ИнтеграцияАТССервер.УведомитьОбОкончанииРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			ИначеЕсли ИмяМетода = "record" Тогда
				ИнтеграцияАТССервер.УведомитьОЗаписиРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала);
			КонецЕсли;
			
		Иначе
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("Телефон контакта %1 является номер сотрудника %2", СтруктураЗвонка.ТелефонКонтакта, СтруктураЗвонка.АбонентКонтакт)); 
			
		КонецЕсли;
		
		Ответ.УстановитьТелоИзСтроки("Success");
		
	КонецЕсли;
	
	Ответ.УстановитьТелоИзСтроки("Error");
	
	Возврат Ответ;
КонецФункции
