Функция ПолучитьПредложения() Экспорт
	
	Результат = Новый Структура("КодСостояния,ТелоКакСтрока,Успешно", Неопределено, Неопределено, Истина);
	
	КодРегиона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Организации.ОсновнаяОрганизация, "КодРегиона");      
	Если Не ЗначениеЗаполнено(КодРегиона) Тогда
	    КодРегиона = "0";
	КонецЕсли;  
	
	ДанныеДоступа = ДанныеДоступа();
	Путь = СтрШаблон(Сервер() +"/ipoteka/application/api/v1/products");
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Путь);
	Сервер = СтруктураURI.Хост;
	ПутьНаСервере = СтруктураURI.ПутьНаСервере;	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,, ssl);
	
	Заголовки = Новый Соответствие;   
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-AGENT-PHONE", ДанныеДоступа.ТелефонАгента);  
	СтруктураТокена = ПолучитьТокен();
	Если Не ЗначениеЗаполнено(СтруктураТокена.Токен) Тогда
	    Результат.Успешно = Ложь;  
		ЗаполнитьЗначенияСвойств(Результат, СтруктураТокена);
	    Возврат Результат;
	КонецЕсли;
	Заголовки.Вставить("authorization", СтруктураТокена.Токен);
	
	HTTPЗапрос	= Новый HTTPЗапрос(ПутьНаСервере, Заголовки); 
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Домклик_Предложения", ТекущаяДатаСеанса(), Путь + Символы.ПС + УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(Заголовки));
	
	Попытка					
		Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);	
		
		ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, ТелоКакСтрока);
		Результат.КодСостояния = Ответ.КодСостояния; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		СтруктураОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(ТелоКакСтрока, Истина); 
		Результат.Успешно = СтруктураОтвета.Получить("success");
		Если Результат.КодСостояния > 199 И Результат.КодСостояния < 300 И Результат.Успешно Тогда
			Для каждого ТекПродукт Из СтруктураОтвета.Получить("data") Цикл
			    ТипИпотеки = Справочники.ТипыИпотеки.НайтиПоРеквизиту("Домклик", ТекПродукт.Получить("product")); 
				//создать кредит программы и банки аналогично движу
				Для каждого ТекСубПродукт Из ТекПродукт.Получить("subproducts") Цикл   
					Скидки = Новый Массив;  
					discounts = ТекПродукт.Получить("discounts");
					Если discounts <> Неопределено Тогда
						Для каждого ТекСкидка Из discounts Цикл 
							Скидка = Новый Структура;
							Скидка.Вставить("Наименование", ТекСкидка.Получить("title"));  
							Скидка.Вставить("Описание", ТекСкидка.Получить("description"));
							Скидка.Вставить("Процент", ТекСкидка.Получить("percent"));
							Скидка.Вставить("МинимальныйСрокКредита", ТекСкидка.Получить("termMin"));
							Скидка.Вставить("МаксимальныйСрокКредита", ТекСкидка.Получить("termMax"));   
							Скидка.Вставить("ВариантСкидки", Справочники.ВариантыСкидокИпотека.НайтиПоРеквизиту("Домклик", ТекСкидка.Получить("discount"))); 
							Категории = Новый Массив;
							Для каждого ТекКатегория Из ТекПродукт.Получить("requiredCategories") Цикл
								Категории.Добавить(Справочники.КатегорииЗаемщикаИпотека.НайтиПоРеквизиту("Домклик", ТекКатегория))
							КонецЦикла;   
							Скидка.Вставить("Категории",Категории);
							Скидки.Добавить(Скидка);
						КонецЦикла;					
					КонецЕсли;
				    КатегорияЗаемщика = Справочники.КатегорииЗаемщикаИпотека.НайтиПоРеквизиту("Домклик", ТекСубПродукт.Получить("subproduct"));
					Ограничения = ТекСубПродукт.Получить("limits");   
					salaryClient = Ограничения.Получить("salaryClient"); 
					Если salaryClient <> Неопределено Тогда
					    СоздатьКредитнуюПрограмму(ТипИпотеки, КатегорияЗаемщика, 
							ТекПродукт.Получить("title") + ": " + "" + ТекСубПродукт.Получить("title"),
							salaryClient, КодРегиона, Скидки);
					КонецЕсли;    
					vip = Ограничения.Получить("vip"); 
					Если vip <> Неопределено Тогда
					    СоздатьКредитнуюПрограмму(ТипИпотеки, КатегорияЗаемщика, 
							ТекПродукт.Получить("title") + ": " + "" + ТекСубПродукт.Получить("title"),
							vip, КодРегиона, Скидки);
					КонецЕсли;
					employee = Ограничения.Получить("employee"); 
					Если employee <> Неопределено Тогда
					    СоздатьКредитнуюПрограмму(ТипИпотеки, КатегорияЗаемщика, 
							ТекПродукт.Получить("title") + ": " + "" + ТекСубПродукт.Получить("title"),
							employee, КодРегиона, Скидки);
					КонецЕсли;
					canConfirmIncome = Ограничения.Получить("canConfirmIncome"); 
					Если canConfirmIncome <> Неопределено Тогда
					    СоздатьКредитнуюПрограмму(ТипИпотеки, КатегорияЗаемщика, 
							ТекПродукт.Получить("title") + ": " + "" + ТекСубПродукт.Получить("title"),
							canConfirmIncome, КодРегиона, Скидки);
					КонецЕсли;
                    cannotConfirmIncome = Ограничения.Получить("cannotConfirmIncome"); 
					Если cannotConfirmIncome <> Неопределено Тогда
					    СоздатьКредитнуюПрограмму(ТипИпотеки, КатегорияЗаемщика, 
							ТекПродукт.Получить("title") + ": " + "" + ТекСубПродукт.Получить("title"),
							cannotConfirmIncome, КодРегиона, Скидки);
					КонецЕсли; 
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	Исключение	
		Результат.Успешно = Ложь;   
		Результат.КодСостояния = 500; 
		Результат.ТелоКакСтрока = ПолучитьJsonПоКоду(Результат.КодСостояния);
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции
