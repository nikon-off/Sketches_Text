
#Область ПеременныеФормы

&НаКлиенте
Перем ЗакрытьФормуБезусловно;	

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Свойство("РежимВыбора") Тогда      
		_РежимВыбора = Параметры.РежимВыбора;
	Иначе
		_РежимВыбора = Ложь;
	КонецЕсли;	
			
	ТипОтношений = Справочники.CRM_ТипыОтношений.Покупатель;
	ТипКонтрагента = Перечисления.ЮрФизЛицо.ФизЛицо;
	ФизЛицоДокументВид = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		ЗначенияЗаполнения = Параметры.ЗначенияЗаполнения;
		Если ЗначенияЗаполнения.Свойство("CRM_ТипОтношений") И
			ЗначениеЗаполнено(ЗначенияЗаполнения.CRM_ТипОтношений) И
			ТипЗнч(ЗначенияЗаполнения.CRM_ТипОтношений) = Тип("СправочникСсылка.CRM_ТипыОтношений") Тогда
			ТипОтношений = ЗначенияЗаполнения.CRM_ТипОтношений;
			Элементы.ГруппаТипОтношений.Доступность = Ложь;
		КонецЕсли;
		Если ЗначенияЗаполнения.Свойство("ФИО") Тогда
		    ФИО = ЗначенияЗаполнения.ФИО;	
		КонецЕсли;
	КонецЕсли;   
	Элементы.Статус.Видимость = ТипОтношений <> Справочники.CRM_ТипыОтношений.Подрядчик;
	
	Контакт = Неопределено;
	Если Параметры.Свойство("Контакт", Контакт) Тогда
		
		КонтактФизЛицо = Контакт.ОсновноеКонтактноеЛицо;
		
		ФизЛицоФамилия = КонтактФизЛицо.Фамилия;
		ФизЛицоИмя = КонтактФизЛицо.Имя;
		ФизЛицоОтчество = КонтактФизЛицо.Отчество;
		ФИО = ФизЛицоФамилия + ?(Не ПустаяСтрока(ФизЛицоИмя), " " + ФизЛицоИмя,"") + ?(Не ПустаяСтрока(ФизЛицоОтчество)," " + ФизЛицоОтчество,"");
		
		ФизЛицоПол = КонтактФизЛицо.Пол;
		ФизЛицоДатаРождения = КонтактФизЛицо.ДатаРождения;	
		
		ЮрЛицоНаименование = КонтактФизЛицо.Наименование;
		ЮрЛицоНаименованиеСокр = КонтактФизЛицо.Наименование;
		ЮрЛицоНаименованиеПолное = КонтактФизЛицо.Наименование; 		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФизическиеЛица.СканПаспорта КАК СканПаспорта,
		|	ФизическиеЛица.СканРегистрации КАК СканРегистрации
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", КонтактФизЛицо);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			
			СканПаспорта = ВыборкаДетальныеЗаписи.СканПаспорта;
			СканРегистрации = ВыборкаДетальныеЗаписи.СканРегистрации;
			
		КонецЕсли;
		

	ИначеЕсли Параметры.Свойство("ФИО", ФИО) Тогда
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФИО, " ");
		
		КоличествоСлов = МассивПодстрок.Количество();
		
		ФизЛицоФамилия = "";
		ФизЛицоИмя = "";
		ФизЛицоОтчество = "";
		
		Если КоличествоСлов > 0 Тогда		
			ФизЛицоФамилия = МассивПодстрок[0]; 		
		КонецЕсли;
		
		Если КоличествоСлов > 1 Тогда		
			ФизЛицоИмя = МассивПодстрок[1]; 		
		КонецЕсли;
		
		Если КоличествоСлов > 2 Тогда
			
			ФизЛицоОтчество = "";
			
			Для Счетчик = 2 по КоличествоСлов-1 Цикл
				ФизЛицоОтчество = ФизЛицоОтчество + " " + МассивПодстрок[Счетчик];
			КонецЦикла;
			
			ФизЛицоОтчество = СокрЛП(ФизЛицоОтчество);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФизЛицоОтчество) И Не ЗначениеЗаполнено(ФизЛицоПол) Тогда
			
			Если Прав(ФизЛицоОтчество, 2) = "ич" Тогда
				ФизЛицоПол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
			ИначеЕсли Прав(ФизЛицоОтчество, 2) = "на" Тогда
				ФизЛицоПол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;  	
		
	ТаблицаПереходовПоСценариюФизЛицо();
	ПорядковыйНомерПерехода = 1;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Партнер, "ГруппаКонтактнаяИнформацияПартнера");
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Контрагент, "ГруппаКонтактнаяИнформацияКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = &Тип
		|	И ВидыКонтактнойИнформации.Родитель = &Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип <> &Тип
		|	И ВидыКонтактнойИнформации.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Родитель", Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
	                                                  
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ИсключаемыеВиды = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка");	
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, ФизЛицо, "ГруппаКонтактнаяИнформацияФизЛица",,ИсключаемыеВиды);	
		
	ИсключаемыеВиды = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка");	
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, ФизЛицо, "ГруппаКонтактнаяИнформацияФизЛица1",,ИсключаемыеВиды);	
	
	Если Элементы.Статус.Видимость Тогда
	    Статус = Перечисления.СтатусыКлиента.Клиент;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПорядковыйНомерПерехода(0); 
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	Если ТипЗнч(РеквизитыКПроверке) = Тип("ФиксированныйМассив") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеРеквизиты, РеквизитыКПроверке, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗакрытьФормуБезусловно = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемОповещение", ЭтаФорма);
	ТекстВопроса = НСтр("ru = 'Закрыть помощник?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемОповещение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьФормуБезусловно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		ОповеститьОЗаписиНового(Партнер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партнер) И ОткрытьПослеЗавершенияМастера Тогда 
		ПоказатьЗначение(, Партнер);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипОтношенийПриИзменении(Элемент)
	Элементы.ТипОтношенийИное.Доступность = Не ЗначениеЗаполнено(ТипОтношений);  
	Элементы.Статус.Видимость = ТипОтношений <> ПредопределенноеЗначение("Справочник.CRM_ТипыОтношений.Подрядчик"); 
	Если Не Элементы.Статус.Видимость Тогда
	    Статус = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазрешеноСозданиеАгентства()
	Возврат Пользователи.РолиДоступны("РазрешитьРедактированиеАгентствРиелторов", ПараметрыСеанса.ТекущийПользователь);
КонецФункции

&НаКлиенте
Процедура ТипОтношенийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.CRM_ТипыОтношений.АгентствоНедвижимости") Тогда
	
		ЕстьПраво = РазрешеноСозданиеАгентства();
		
		Если Не ЕстьПраво Тогда
		
			СтандартнаяОбработка = Ложь;
			Текст = НСтр("ru = 'У вашего пользователя нет права на добавление агентства недвижимости'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, Элемент.Имя)
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФИО, " ");
	
	КоличествоСлов = МассивПодстрок.Количество();
	
	ФизЛицоФамилия = "";
	ФизЛицоИмя = "";
	ФизЛицоОтчество = "";
	
	Если КоличествоСлов > 0 Тогда		
		ФизЛицоФамилия = МассивПодстрок[0]; 		
	КонецЕсли;
	
	Если КоличествоСлов > 1 Тогда		
		ФизЛицоИмя = МассивПодстрок[1]; 		
	КонецЕсли;
	
	Если КоличествоСлов > 2 Тогда
		
		ФизЛицоОтчество = "";
		
		Для Счетчик = 2 по КоличествоСлов-1 Цикл
			ФизЛицоОтчество = ФизЛицоОтчество + " " + МассивПодстрок[Счетчик];
		КонецЦикла;
		
		ФизЛицоОтчество = СокрЛП(ФизЛицоОтчество);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицоОтчество) И Не ЗначениеЗаполнено(ФизЛицоПол) Тогда
		ФизЛицоПол = ФизическиеЛицаКлиент.ОпределитьПолПоОтчеству(ФизЛицоОтчество);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеФизЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = НайденныеФизЛица.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ТекущиеДанные.ФизЛицо) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ФизЛицо);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеФизЛицаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НайденныеФизЛица.ТекущиеДанные;
	
	ПризнакУстановлен = Ложь;
	Если Не ТекущиеДанные = Неопределено Тогда
		Для Каждого СтрокаНайденныхФизЛиц Из НайденныеФизЛица Цикл
			
			Если Не СтрокаНайденныхФизЛиц.ФизЛицо = ТекущиеДанные.ФизЛицо И СтрокаНайденныхФизЛиц.Использовать Тогда
				СтрокаНайденныхФизЛиц.Использовать = Ложь;
			КонецЕсли;
			
			Если СтрокаНайденныхФизЛиц.Использовать Тогда
				ПризнакУстановлен = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Элементы.Далее.Доступность = ПризнакУстановлен;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоВидДокументаПриИзменении(Элемент)
	ОформлениеСтраницаДокументФизЛица();
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоДокументСерияПриИзменении(Элемент)
	ОформлениеСтраницаДокументФизЛица();
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоДокументНомерПриИзменении(Элемент)
	ОформлениеСтраницаДокументФизЛица();
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетНомерСчетаПриИзменении(Элемент)
	
	ПроверяемыеРеквизиты = Новый Массив;
	Если Не ПустаяСтрока(БанковскийСчетНомерСчета) Тогда
		ПроверяемыеРеквизиты.Добавить("БанковскийСчетВидСчета");
		ПроверяемыеРеквизиты.Добавить("БанковскийСчетВалюта");  
		ПроверяемыеРеквизиты.Добавить("БанковскийСчетБИКБанка");
	КонецЕсли;
	РеквизитыКПроверке = Новый ФиксированныйМассив(ПроверяемыеРеквизиты);
	ОформлениеСтраницаБанковскийСчетКонтрагента();
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля БИКБанка.
&НаКлиенте
Процедура БанковскийСчетБИКБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуВыбораБанка(Истина);	
	
КонецПроцедуры //БанковскийСчетБИКБанкаНачалоВыбора()

// Процедура - обработчик события НачалоВыбора поля БИКБанкаДляРасчетов.
&НаКлиенте
Процедура БанковскийСчетБИКБанкаДляРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуВыбораБанка(Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетБИКБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьБИК(ВыбранноеЗначение, БанковскийСчетБИКБанка);
	
	БанковскийСчетБанк = ВыбранноеЗначение;

КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетБИКБанкаДляРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьБИК(ВыбранноеЗначение, БанковскийСчетБИКБанкаДляРасчетов);
	
	БанковскийСчетБанкДляРасчетов = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяБанкДляРасчетовПриИзменении(Элемент)  
	ПроверяемыеРеквизиты = Новый Массив(РеквизитыКПроверке);
	Если ИспользуетсяБанкДляРасчетов Тогда
		ИндексНайденного = ПроверяемыеРеквизиты.Найти("БанковскийСчетБИКБанкаДляРасчетов");
		Если ИндексНайденного = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("БанковскийСчетБИКБанкаДляРасчетов");	
		КонецЕсли;
	Иначе
		ИндексНайденного = ПроверяемыеРеквизиты.Найти("БанковскийСчетБИКБанкаДляРасчетов");
		Если Не ИндексНайденного = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексНайденного);	
		КонецЕсли;
	КонецЕсли;
	РеквизитыКПроверке = Новый ФиксированныйМассив(ПроверяемыеРеквизиты);
	ОформлениеСтраницаБанковскийСчетКонтрагента();	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИзображенияОсновнойСтраницыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПолноеИмяФайла = ФайлИзображенияОсновнойСтраницыДокумента;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите изображение страницы документа'");
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.Фильтр = ПолучитьФильтрИзображений();
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлИзображенияОсновнойСтраницыДокумента = ДиалогВыбораФайла.ПолноеИмяФайла;
		СканПаспорта = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИзображенияДополнительнойСтраницыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПолноеИмяФайла = ФайлИзображенияДополнительнойСтраницыДокумента;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите изображение страницы документа'");
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.Фильтр = ПолучитьФильтрИзображений();
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлИзображенияДополнительнойСтраницыДокумента = ДиалогВыбораФайла.ПолноеИмяФайла;
		СканРегистрации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИзображенияОсновнойСтраницыДокументаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФайлИзображенияОсновнойСтраницыДокумента = "";
	СканПаспорта = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ФайлИзображенияДополнительнойСтраницыДокументаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФайлИзображенияДополнительнойСтраницыДокумента = "";
	СканРегистрации = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ФайлИзображенияОсновнойСтраницыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СканПаспорта) Тогда
	    ПоказатьЗначение(, СканПаспорта);
	ИначеЕсли Не ПустаяСтрока(ФайлИзображенияОсновнойСтраницыДокумента) Тогда
		ЗапуститьПриложение(ФайлИзображенияОсновнойСтраницыДокумента);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИзображенияДополнительнойСтраницыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СканРегистрации) Тогда
	    ПоказатьЗначение(, СканРегистрации);
	ИначеЕсли Не ПустаяСтрока(ФайлИзображенияДополнительнойСтраницыДокумента) Тогда
		ЗапуститьПриложение(ФайлИзображенияДополнительнойСтраницыДокумента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоДатаРожденияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "  .  .    " Тогда
		Возврат;
	КонецЕсли;
	
	мДата = Дата(Прав(Текст,4) + Сред(Текст,4,2) + лев(Текст,2));
	
	Если мДата < Дата("19000101") ИЛИ мДата > КонецДня(ТекущаяДата()) Тогда
		
		СтандартнаяОбработка = Ложь;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоСНИЛСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "   -   -      " Тогда
		Возврат;
	КонецЕсли;

	мТекст = СтрЗаменить(Текст, "-", "");
	мТекст = СтрЗаменить(мТекст, " ", "");
	СтандартнаяОбработка = СтрДлина(мТекст) = 11;

КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоИННПриИзменении(Элемент)
	
	Если ПустаяСтрока(ФизЛицоИНН) Тогда Возврат; КонецЕсли;
	ТекстСообщения = "";
	Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ФизЛицоИНН, Ложь, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ФизЛицоИНН");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИндПредринимательИННПриИзменении(Элемент)
	
	Если ПустаяСтрока(ЮрЛицоИНН) Тогда Возврат; КонецЕсли;
	ТекстСообщения = "";
	Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ЮрЛицоИНН, Ложь, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ЮрЛицоИНН");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЮрЛицоИННПриИзменении(Элемент)
	
	Если ПустаяСтрока(ЮрЛицоИНН) Тогда Возврат; КонецЕсли;
	ТекстСообщения = "";
	Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ЮрЛицоИНН, Истина, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ЮрЛицоИНН");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрЛицоКПППриИзменении(Элемент)
	
	Если ПустаяСтрока(ЮрЛицоКПП) Тогда Возврат; КонецЕсли;
	ТекстСообщения = "";
	Если НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(ЮрЛицоКПП, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ЮрЛицоКПП");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда = Неопределено)
	
	ОчиститьСообщения();
	//Если Элементы.ПанельМастера.ТекущаяСтраница = Элементы.СтраницаТипПартнера И Статус = ПредопределенноеЗначение("Перечисление.СтатусыКлиента.Лид") Тогда
	//    ИзменитьПорядковыйНомерПерехода(+2);
	//Иначе	
	    ИзменитьПорядковыйНомерПерехода(+1);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	ИзменитьПорядковыйНомерПерехода(-1);
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	Оповестить("ОбновлениеСпискаПользователей");

	Оповестить("Создан новый партнер", Партнер, ЭтотОбъект);		
	
	ОповеститьОбИзменении(ФизЛицо);
	ОповеститьОбИзменении(Партнер);
	
	Если ПеречитатьСобытие Тогда
		Оповестить("ПеречитатьСобытиеЗаменаСсылокКлиента", ВладелецФормы, ЭтотОбъект);
	КонецЕсли;
	
	ОповеститьОВыборе(Партнер);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	Если ЗначениеЗаполнено(СканПаспорта) Тогда
	    СтруктураПрисоединенного = ПрисоединенныеФайлы.CRM_ПолучитьДанныеФайла(СканПаспорта,, Истина);
		
		АдрВремОсновной = СтруктураПрисоединенного.СсылкаНаДвоичныеДанныеФайла;   
		РасширениеОсновной = Сред(СтруктураПрисоединенного.Расширение, 2);
	ИначеЕсли ЗначениеЗаполнено(ФайлИзображенияОсновнойСтраницыДокумента) Тогда
		АдрВремОсновной = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИзображенияОсновнойСтраницыДокумента), Новый УникальныйИдентификатор);  
		РасширениеОсновной = Сред(ФайлИзображенияОсновнойСтраницыДокумента, СтрНайти(ФайлИзображенияОсновнойСтраницыДокумента, ".") + 1);
	КонецЕсли;    
	
	Если ЗначениеЗаполнено(СканРегистрации) Тогда
	    СтруктураПрисоединенного = ПрисоединенныеФайлы.CRM_ПолучитьДанныеФайла(СканРегистрации,, Истина);
		
		АдрВремДополнительной = СтруктураПрисоединенного.СсылкаНаДвоичныеДанныеФайла;
		РасширениеДополнительной = Сред(СтруктураПрисоединенного.Расширение, 2);
	ИначеЕсли ЗначениеЗаполнено(ФайлИзображенияДополнительнойСтраницыДокумента) Тогда
		АдрВремДополнительной = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИзображенияДополнительнойСтраницыДокумента), Новый УникальныйИдентификатор);  
		РасширениеДополнительной = Сред(ФайлИзображенияДополнительнойСтраницыДокумента, СтрНайти(ФайлИзображенияДополнительнойСтраницыДокумента, ".") + 1);
	КонецЕсли;

	АдресРегистрации = РаспознатьНаСервере(АдрВремОсновной, АдрВремДополнительной, РасширениеОсновной, РасширениеДополнительной);
	Если ЗначениеЗаполнено(АдресРегистрации) Тогда
		НайденныеСтроки = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресРегистрацииФизическогоЛица"))); 
		Если НайденныеСтроки.Количество() Тогда
			Элементы[НайденныеСтроки[0].ИмяРеквизита].ВыделенныйТекст = АдресРегистрации;
			Подключаемый_КонтактнаяИнформацияПриИзменении(Элементы[НайденныеСтроки[0].ИмяРеквизита]);	
		КонецЕсли;		
	КонецЕсли;  
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПереходов

// Определяемый обработчик при открытии 
// Параметры:
// ИмяПроцедуры – Строка, имя метода, который доджен выполниться
// Отказ – Булево – флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Процедура ОбработчикПриОткрытии(ИмяМетода, Отказ, ПропуститьСтраницу, ПроверяемыеРеквизиты, ЭтоПереходДалее)
	
	ОписаниеМетода = Новый ОписаниеОповещения(ИмяМетода, ЭтотОбъект);
	ПараметрыМетода = Новый Структура("Отказ, ПропуститьСтраницу, ПроверяемыеРеквизиты, ЭтоПереходДалее", Отказ, ПропуститьСтраницу, ПроверяемыеРеквизиты, ЭтоПереходДалее);	
	ВыполнитьОбработкуОповещения(ОписаниеМетода, ПараметрыМетода);
	
	//Переопределяем переменные полученные после выполнения оповещения, кроме тех что ушли по ссылке
	Отказ = ПараметрыМетода.Отказ;
	ПропуститьСтраницу = ПараметрыМетода.ПропуститьСтраницу;
	
КонецПроцедуры

// Определяемый обработчик перехода далее (на следующую страницу) 
// Параметры:
// ИмяПроцедуры – Строка, имя метода, который доджен выполниться
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Процедура ОбработчикПриПереходеДалее(ИмяМетода, ПроверяемыеРеквизиты, Отказ)
		
	ОписаниеМетода = Новый ОписаниеОповещения(ИмяМетода, ЭтотОбъект);
	ПараметрыМетода = Новый Структура("Отказ, ПроверяемыеРеквизиты", Отказ, ПроверяемыеРеквизиты);	
	ВыполнитьОбработкуОповещения(ОписаниеМетода, ПараметрыМетода);
	
	//Переопределяем переменные полученные после выполнения оповещения, кроме тех что ушли по ссылке
	Отказ = ПараметрыМетода.Отказ;
	
КонецПроцедуры

// Определяемый обработчик перехода назад (на пред. страницу) 
// Параметры:
// ИмяПроцедуры – Строка, имя метода, который доджен выполниться
// Отказ – Булево – флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Процедура ОбработчикПриПереходеНазад(ИмяМетода, ПроверяемыеРеквизиты, Отказ)
	
	ОписаниеМетода = Новый ОписаниеОповещения(ИмяМетода, ЭтотОбъект);
	ПараметрыМетода = Новый Структура("Отказ, ПроверяемыеРеквизиты", Отказ, ПроверяемыеРеквизиты);	
	ВыполнитьОбработкуОповещения(ОписаниеМетода, ПараметрыМетода);
	
	//Переопределяем переменные полученные после выполнения оповещения, кроме тех что ушли по ссылке
	Отказ = ПараметрыМетода.Отказ;
		
КонецПроцедуры

#Область СтраницаТипПартнера

&НаКлиенте
Процедура СтраницаТипПартнераПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ТипКонтрагента");
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ТипОтношенийИное");
	
	Элементы.ТипОтношенийИное.Доступность = Не ЗначениеЗаполнено(ТипОтношений);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаТипПартнераПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ТипОтношений) Тогда
		НеПроверяемыеРеквизиты = Новый Массив;
		НеПроверяемыеРеквизиты.Добавить("ТипОтношенийИное");
		УПДК_ОбщегоНазначенияКлиентСервер.УдалитьНепроверяемыеРеквизитыИзМассива(СтруктураПараметров.ПроверяемыеРеквизиты, НеПроверяемыеРеквизиты); 
	КонецЕсли;
	
	Если ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		ТаблицаПереходовПоСценариюФизЛицо();
	ИначеЕсли ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда
		ТаблицаПереходовПоСценариюИндПредприниматель();
	ИначеЕсли ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
		ТаблицаПереходовПоСценариюЮрЛицо();
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаДанныеФизЛица

&НаКлиенте
Процедура СтраницаДанныеФизЛицаПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ФизЛицоФамилия");
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ФизЛицоПол");
		
	Если СтруктураПараметров.ЭтоПереходДалее Тогда
		
		Если ЗначениеЗаполнено(Контакт) Тогда 			
			КонтактнаяИнформацияПриЧтенииНаСервере(КонтактФизлицо, "ГруппаКонтактнаяИнформацияФизЛица");
		Иначе 			
			КонтактнаяИнформацияПриЧтенииНаСервере(Физлицо, "ГруппаКонтактнаяИнформацияФизЛица");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицоОтчество) И Не ЗначениеЗаполнено(ФизЛицоПол) Тогда
		ФизЛицоПол = ФизическиеЛицаКлиент.ОпределитьПолПоОтчеству(ФизЛицоОтчество);
	КонецЕсли;	
	
	Если СтруктураПараметров.ЭтоПереходДалее Тогда
		
		Для Каждого ТекРеквизит Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			
			Если ЗначениеЗаполнено(ТекРеквизит.Представление) Тогда
				Элементы[ТекРеквизит.ИмяРеквизита].Доступность = Ложь;
			КонецЕсли;
			
		КонецЦикла; 			
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницаДанныеФизЛицаПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	ГруппаРазмещенияРеквизитов = Элементы.ГруппаКонтактнаяИнформацияФизЛица.Имя;
	Если ЗначениеЗаполнено(Контакт) Тогда
		КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(КонтактФизлицо, СтруктураПараметров.Отказ, ГруппаРазмещенияРеквизитов);
	Иначе 			
		КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(ФизЛицо, СтруктураПараметров.Отказ, ГруппаРазмещенияРеквизитов);
	КонецЕсли; 
	
КонецПроцедуры       

&НаКлиенте
Процедура СтраницаДанныеФизЛицаПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаДанныеЮрЛица

&НаКлиенте
Процедура СтраницаДанныеЮрЛицаПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ЮрЛицоНаименование");
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ЮрЛицоНаименованиеПолное");
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ЮрЛицоНаименованиеСокр");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаДанныеЮрЛицаПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры       

&НаКлиенте
Процедура СтраницаДанныеЮрЛицаПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаДанныеИП

&НаКлиенте
Процедура СтраницаДанныеИППриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ЮрЛицоНаименование");
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ЮрЛицоНаименованиеПолное");
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ЮрЛицоНаименованиеСокр");
	
	Если СтруктураПараметров.ЭтоПереходДалее Тогда
		
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			ФизЛицоРеквизиты = УПДК_ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ФизЛицо, "Фамилия, Имя, Отчество");
			мФизЛицоФамилия	 = ФизЛицоРеквизиты.Фамилия;
			мФизЛицоИмя		 = ФизЛицоРеквизиты.Имя;
			мФизЛицоОтчество = ФизЛицоРеквизиты.Отчество;
		Иначе
			мФизЛицоФамилия	 = ФизЛицоФамилия;
			мФизЛицоИмя		 = ФизЛицоИмя;
			мФизЛицоОтчество = ФизЛицоОтчество;
		КонецЕсли;
		
		мФизЛицоИнициалы = ?(Не ПустаяСтрока(ФизЛицоИмя), " " + ВРег(Лев(ФизЛицоИмя, 1)) + ".", "") +  
								?(Не ПустаяСтрока(ФизЛицоОтчество), " " + ВРег(Лев(ФизЛицоОтчество, 1)) + ".", "");
		
		Если ПустаяСтрока(ЮрЛицоНаименование) Тогда
			ШаблонНаименования = НСтр("ru = '%1%2, ИП'");
			ЮрЛицоНаименование = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, мФизЛицоФамилия, мФизЛицоИнициалы)); 	
		КонецЕсли;
		
		Если ПустаяСтрока(ЮрЛицоНаименованиеПолное) Тогда
			ШаблонНаименования = НСтр("ru = 'Индивидуальный предприниматель %1%2%3'");
			ЮрЛицоНаименованиеПолное = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, 
											мФизЛицоФамилия, 
											?(Не ПустаяСтрока(мФизЛицоИмя), " ", "") + мФизЛицоИмя, 
											?(Не ПустаяСтрока(мФизЛицоОтчество), " ", "") + мФизЛицоОтчество)); 	
		КонецЕсли;
		
		Если ПустаяСтрока(ЮрЛицоНаименованиеСокр) Тогда
			ШаблонНаименования = НСтр("ru = 'ИП %1%2'");
			ЮрЛицоНаименованиеСокр = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, мФизЛицоФамилия,  мФизЛицоИнициалы)); 	
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницаДанныеИППриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры       

&НаКлиенте
Процедура СтраницаДанныеИППриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаНайденныеПартнеры

&НаКлиенте
Процедура СтраницаНайденныеПартнерыПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	ЗаполнитьНайденныхЮрЛиц();
	
	Если Не СтруктураПараметров.ЭтоПереходДалее И ЗначениеЗаполнено(Партнер) Тогда
		НайденныеСтроки = НайденныеПартнеры.НайтиСтроки(Новый Структура("Партнер", Партнер));
		Если НайденныеСтроки.Количество() Тогда
			
			НайденныеСтроки[0].Использовать = Истина;
			
			Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			
			ТаблицаПереходовПоСценариюЮрЛицо();
			
		Иначе
			ПропуститьСтраницу = Истина;
		КонецЕсли;
		Возврат;
	Иначе
		ПропуститьСтраницу = НайденныеПартнеры.Количество() <= 1;
		
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		
		ТаблицаПереходовПоСценариюЮрЛицо();
		
	КонецЕсли;
	
	СтруктураПараметров.ПропуститьСтраницу = ПропуститьСтраницу;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаНайденныеПартнерыПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	Отказ = Истина;
	Для Каждого СтрокаНайденныхПартнеров Из НайденныеПартнеры Цикл
		Отказ = Отказ И НЕ СтрокаНайденныхПартнеров.Использовать;	
		Если Не Отказ Тогда
			Партнер = СтрокаНайденныхПартнеров.Партнер;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если Отказ Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран ни один вариант.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"НайденныеПартнеры");
		СтруктураПараметров.Отказ = Отказ;
		
	Иначе
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			
			ТаблицаПереходовУдалитьСтрокиПослеНомера(ТаблицаПереходов, ПорядковыйНомерПерехода);
			
			СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Назад, Готово", "Отмена", "Готово");
			
			ИтераторПерехода = ПорядковыйНомерПерехода;
			ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайден", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры       

&НаКлиенте
Процедура СтраницаНайденныеПартнерыПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаНайденныеПартнерыИП

&НаКлиенте
Процедура СтраницаНайденныеПартнерыИППриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	ЗаполнитьНайденныхИП();
	
	Если Не СтруктураПараметров.ЭтоПереходДалее И ЗначениеЗаполнено(Партнер) Тогда
		НайденныеСтроки = НайденныеФизЛица.НайтиСтроки(Новый Структура("Партнер", Партнер));
		Если НайденныеСтроки.Количество() Тогда
			
			НайденныеСтроки[0].Использовать = Истина;
			
			Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			
			ТаблицаПереходовПоСценариюИндПредприниматель();
			
		Иначе
			СтруктураПараметров.ПропуститьСтраницу = Истина;
		КонецЕсли;
		Возврат;
	Иначе
		СтруктураПараметров.ПропуститьСтраницу = НайденныеФизЛица.Количество() <= 1;
		
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		
		ТаблицаПереходовПоСценариюИндПредприниматель();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницаНайденныеПартнерыИППриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	Отказ = Истина;
	Для Каждого СтрокаНайденныхПартнеров Из НайденныеПартнеры Цикл
		Отказ = Отказ И НЕ СтрокаНайденныхПартнеров.Использовать;	
		Если Не Отказ Тогда
			Партнер = СтрокаНайденныхПартнеров.Партнер;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если Отказ Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран ни один вариант.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"НайденныеПартнеры");
		
	Иначе
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			
			ТаблицаПереходовУдалитьСтрокиПослеНомера(ТаблицаПереходов, ПорядковыйНомерПерехода);
			
			СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Назад, Готово", "Отмена", "Готово");
			
			ИтераторПерехода = ПорядковыйНомерПерехода;
			ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайден", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры       

&НаКлиенте
Процедура СтраницаНайденныеПартнерыИППриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаНайденныеПартнеры_ПоискПоТелефону

&НаКлиенте
Процедура СтраницаНайденныеПартнеры_ПоискПоТелефону_ПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	ЗаполнитьНайденныхПартнеров_ПоискПоТелефону();
	
	Если Не СтруктураПараметров.ЭтоПереходДалее И ЗначениеЗаполнено(Партнер) Тогда
		НайденныеСтроки = НайденныеПартнеры.НайтиСтроки(Новый Структура("Партнер", Партнер));
		Если НайденныеСтроки.Количество() Тогда
			
			НайденныеСтроки[0].Использовать = Истина;
			
			Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			
			//ТаблицаПереходовПоСценариюИндПредприниматель();
			
		Иначе
			СтруктураПараметров.ПропуститьСтраницу = Истина;
		КонецЕсли;
		Возврат;
	Иначе
		СтруктураПараметров.ПропуститьСтраницу = НайденныеПартнеры.Количество() <= 1;
		
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		
		//ТаблицаПереходовПоСценариюИндПредприниматель();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницаНайденныеПартнеры_ПоискПоТелефону_ПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	Отказ = Истина;
	Для Каждого СтрокаНайденныхПартнеров Из НайденныеПартнеры Цикл
		Отказ = Отказ И НЕ СтрокаНайденныхПартнеров.Использовать;	
		Если Не Отказ Тогда
			Партнер = СтрокаНайденныхПартнеров.Партнер;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если Отказ Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран ни один вариант.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"НайденныеПартнеры");
		
	Иначе
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			
			ТаблицаПереходовУдалитьСтрокиПослеНомера(ТаблицаПереходов, ПорядковыйНомерПерехода);
			
			СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Назад, Готово", "Отмена", "Готово");
			
			ИтераторПерехода = ПорядковыйНомерПерехода;
			ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайден", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры       

&НаКлиенте
Процедура СтраницаНайденныеПартнеры_ПоискПоТелефону_ПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаНайденныеФизЛицаПоискПоФИО

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаПоискПоФИОПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПропуститьСтраницу = Истина;
	ЗаполнитьНайденныхФизЛицПоФИО(,ПропуститьСтраницу);
	
	Если Не СтруктураПараметров.ЭтоПереходДалее И ЗначениеЗаполнено(ФизЛицо) Тогда
		НайденныеСтроки = НайденныеФизЛица.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо));
		Если НайденныеСтроки.Количество() Тогда
			НайденныеСтроки[0].Использовать = Истина;
			ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
			Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			ТаблицаПереходовПоСценариюФизЛицо();
		Иначе
			СтруктураПараметров.ПропуститьСтраницу = Истина;
		КонецЕсли;
	Иначе
		
		СтруктураПараметров.ПропуститьСтраницу = ПропуститьСтраницу;
		
		ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		ТаблицаПереходовПоСценариюФизЛицо();
		
		Если НЕ ПропуститьСтраницу Тогда
			Элементы.Далее.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры  

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаПоискПоФИОПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
		
	Перем ИтераторПерехода;
	
	Элементы.Далее.Доступность = Истина;

	Отказ = Истина;
	Для Каждого СтрокаНайденныхФизЛиц Из НайденныеФизЛица Цикл
		Отказ = Отказ И НЕ СтрокаНайденныхФизЛиц.Использовать;	
		Если Не Отказ Тогда
			ФизЛицо = СтрокаНайденныхФизЛиц.ФизЛицо;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если Отказ Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран ни один вариант.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"НайденныеФизЛица");
		
	Иначе
		
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			
			ТаблицаПереходовУдалитьСтрокиПослеНомера(ТаблицаПереходов, ПорядковыйНомерПерехода);
			
			Если Не ЗначениеЗаполнено(Партнер) И Не ЗначениеЗаполнено(Контакт) Тогда
				Партнер = НайтиПартнераПоФизЛицу(ФизЛицо, ТипОтношений);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Партнер) Тогда
				
				СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Назад, Готово", "Отмена", "Готово");
				
				ИтераторПерехода = ПорядковыйНомерПерехода;
				ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайден", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
				
			Иначе
				
				СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигации", "Назад, Отмена",, "Далее");
				
				Если НЕ ЭтоСозданиеФизЛица(ТипКонтрагента) Тогда
				
					ИтераторПерехода = ПорядковыйНомерПерехода;
					ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаКонтактнаяИнформацияКонтрагента", СтраницаНавигации, "СтраницаКонтактнаяИнформацияКонтрагентаОписание");
				
				КонецЕсли;
				
				Если НЕ ЭтоСозданиеФизЛица(ТипКонтрагента) Тогда
					
					ИтераторПерехода = ?(ИтераторПерехода = Неопределено, ПорядковыйНомерПерехода, ИтераторПерехода + 1);
					ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаБанковскийСчетКонтрагента", СтраницаНавигации, "СтраницаБанковскийСчетКонтрагентаОписание");
					
				КонецЕсли;
				
				СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Готово", "Назад, Отмена", "Готово");
				ИтераторПерехода = ?(ИтераторПерехода = Неопределено, ПорядковыйНомерПерехода, ИтераторПерехода + 1);
				ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаУспешно", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
												
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаПоискПоФИОПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	Элементы.Далее.Доступность = Истина;

КонецПроцедуры
	
#КонецОбласти

#Область СтраницаНайденныеФизЛицаПоискПоТелефонуФамилииИмени

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаПоискПоТелефонуФамилииИмениПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПропуститьСтраницу = Истина;
	ЗаполнитьНайденныхФизЛицПоКонтактам(ПропуститьСтраницу);
	
	ЗаполнитьНайденныхФизЛицПоФИО(Ложь, ПропуститьСтраницу);
	
	Если Не СтруктураПараметров.ЭтоПереходДалее И ЗначениеЗаполнено(ФизЛицо) Тогда
		НайденныеСтроки = НайденныеФизЛица.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо));
		Если НайденныеСтроки.Количество() Тогда
			НайденныеСтроки[0].Использовать = Истина;
			ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
			Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			ТаблицаПереходовПоСценариюФизЛицо();
		Иначе
			СтруктураПараметров.ПропуститьСтраницу = Истина;
		КонецЕсли;
		Возврат;
	Иначе
		СтруктураПараметров.ПропуститьСтраницу = ПропуститьСтраницу;
		
		ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ТаблицаПереходовПоСценариюФизЛицо();
		
		Если НЕ ПропуститьСтраницу Тогда
			Элементы.Далее.Доступность = ЗначениеЗаполнено(КонтактФизлицо);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры  

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаПоискПоТелефонуФамилииИмениПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Перем ИтераторПерехода;
	
	Элементы.Далее.Доступность = Истина;

	Отказ = Истина;
	Для Каждого СтрокаНайденныхФизЛиц Из НайденныеФизЛица Цикл
		Отказ = Отказ И НЕ СтрокаНайденныхФизЛиц.Использовать;	
		Если Не Отказ Тогда
			ФизЛицо = СтрокаНайденныхФизЛиц.ФизЛицо;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если Отказ Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран ни один вариант.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"НайденныеФизЛица");
		
	Иначе
		
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			
			Если Не ЗначениеЗаполнено(Партнер)  Тогда
				Партнер = НайтиПартнераПоФизЛицу(ФизЛицо, ТипОтношений);
			КонецЕсли;
			
			Если НЕ (ЗначениеЗаполнено(Партнер) И Партнер = Контакт) Тогда //Если это квалификация в того же клиента, то идем по пути полного мастера.
				
				ТаблицаПереходовУдалитьСтрокиПослеНомера(ТаблицаПереходов, ПорядковыйНомерПерехода);
				
			КонецЕсли;
		
			Если ЗначениеЗаполнено(Партнер) Тогда
				
				НайденПартнер(Партнер, Контакт, ФизЛицо, КонтактФизлицо, ПеречитатьСобытие);
				СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Назад, Готово", "Отмена", "Готово");
				
				ИтераторПерехода = ПорядковыйНомерПерехода;
				ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайден", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");					
			
			ИначеЕсли ЗначениеЗаполнено(Контакт) Тогда
				
				Партнер = Контакт;
				
				НайденоФизлицо(Партнер, ФизЛицо, КонтактФизлицо, ПеречитатьСобытие);
				
				СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Назад, Готово", "Отмена", "Готово");
				
				ИтераторПерехода = ПорядковыйНомерПерехода;
				ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайден", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");

				
			Иначе
				
				СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигации", "Назад, Отмена",, "Далее");
				
				Если НЕ ЭтоСозданиеФизЛица(ТипКонтрагента) Тогда
				
					ИтераторПерехода = ПорядковыйНомерПерехода;
					ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаКонтактнаяИнформацияКонтрагента", СтраницаНавигации, "СтраницаКонтактнаяИнформацияКонтрагентаОписание");
				
								
					ИтераторПерехода = ?(ИтераторПерехода = Неопределено, ПорядковыйНомерПерехода, ИтераторПерехода + 1);
					ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаБанковскийСчетКонтрагента", СтраницаНавигации, "СтраницаБанковскийСчетКонтрагентаОписание");
					
				КонецЕсли;
				
				СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Готово", "Назад, Отмена", "Готово");
				ИтераторПерехода = ?(ИтераторПерехода = Неопределено, ПорядковыйНомерПерехода, ИтераторПерехода + 1);
				ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаУспешно", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
												
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаПоискПоТелефонуФамилииИмениПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	Элементы.Далее.Доступность = Истина;

КонецПроцедуры
	
#КонецОбласти

#Область СтраницаНайденныеФизЛицаИП

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаИППриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПропуститьСтраницу = Истина;
	ЗаполнитьНайденныхФизЛицПоФИО(,ПропуститьСтраницу);
	
	Если Не СтруктураПараметров.ЭтоПереходДалее И ЗначениеЗаполнено(ФизЛицо) Тогда
		НайденныеСтроки = НайденныеФизЛица.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо));
		Если НайденныеСтроки.Количество() Тогда
			НайденныеСтроки[0].Использовать = Истина;
			ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
			Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			ТаблицаПереходовПоСценариюИндПредприниматель();
		Иначе
			СтруктураПараметров.ПропуститьСтраницу = Истина;
		КонецЕсли;
		Возврат;
	Иначе
		СтруктураПараметров.ПропуститьСтраницу = ПропуститьСтраницу;
		
		ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ТаблицаПереходовПоСценариюИндПредприниматель();
	КонецЕсли;
		
КонецПроцедуры  

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаИППриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	Отказ = Истина;
	Для Каждого СтрокаНайденныхФизЛиц Из НайденныеФизЛица Цикл
		Отказ = Отказ И НЕ СтрокаНайденныхФизЛиц.Использовать;	
		Если Не Отказ Тогда
			ФизЛицо = СтрокаНайденныхФизЛиц.ФизЛицо;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если Отказ Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран ни один вариант.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"НайденныеФизЛица");
		
	Иначе
		
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			
			ТаблицаПереходовУдалитьСтрокиПослеНомера(ТаблицаПереходов, ПорядковыйНомерПерехода);
			
			СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигации", "Назад, Отмена",, "Далее");
			
			ИтераторПерехода = ПорядковыйНомерПерехода;
			ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаДанныеИП", СтраницаНавигации, "СтраницаДанныеИПОписание");
			
			ИтераторПерехода = ИтераторПерехода + 1;
			ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайденныеПартнеры", СтраницаНавигации, "СтраницаНайденныеПартнерыОписание", "СтраницаНайденныеПартнерыИППриОткрытии", "СтраницаНайденныеПартнерыИППриПереходеДалее", "СтраницаНайденныеПартнерыИППриПереходеНазад");
			
			ИтераторПерехода = ИтераторПерехода + 1;
			ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаКонтактнаяИнформацияПартнера", СтраницаНавигации, "СтраницаКонтактнаяИнформацияПартнераОписание");
			
			ИтераторПерехода = ИтераторПерехода + 1;
			ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаКонтактнаяИнформацияКонтрагента", СтраницаНавигации, "СтраницаКонтактнаяИнформацияКонтрагентаОписание");
			
			ИтераторПерехода = ИтераторПерехода + 1;
			ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаБанковскийСчетКонтрагента", СтраницаНавигации, "СтраницаБанковскийСчетКонтрагентаОписание");
			
			СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Готово", "Назад, Отмена", "Готово");	
			ИтераторПерехода = ИтераторПерехода + 1;
			ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаУспешно", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаИППриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

КонецПроцедуры
	
#КонецОбласти

#Область СтраницаДокументФизЛица

&НаКлиенте
Процедура СтраницаДокументФизЛицаПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыКлиента.Лид") Тогда
		СтруктураПараметров.ПропуститьСтраницу = Истина;
	КонецЕсли;

	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ФизЛицоДокументСерия");
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ФизЛицоДокументНомер");
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ФизЛицоДокументДатаВыдачи");
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ФайлИзображенияОсновнойСтраницыДокумента");
	СтруктураПараметров.ПроверяемыеРеквизиты.Добавить("ФизЛицоДатаРождения");
		
	Если СтруктураПараметров.ЭтоПереходДалее Тогда
		
		НайденныеСтроки = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресРегистрацииФизическогоЛица"))); 
		Если НайденныеСтроки.Количество() Тогда
			Если Не ЗначениеЗаполнено(ЭтотОбъект[НайденныеСтроки[0].ИмяРеквизита]) Тогда
				Если ЗначениеЗаполнено(Контакт) Тогда 			
					КонтактнаяИнформацияПриЧтенииНаСервере(КонтактФизлицо, "ГруппаКонтактнаяИнформацияФизЛица1", Истина);
				Иначе 			
					КонтактнаяИнформацияПриЧтенииНаСервере(Физлицо, "ГруппаКонтактнаяИнформацияФизЛица1", Истина);
				КонецЕсли;
			КонецЕсли; 	
		КонецЕсли;
			
	КонецЕсли;
	
	ОформлениеСтраницаДокументФизЛица();

	Если Не ЗначениеЗаполнено(ФайлИзображенияОсновнойСтраницыДокумента) Тогда
	    ФайлИзображенияОсновнойСтраницыДокумента = Строка(СканПаспорта);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлИзображенияДополнительнойСтраницыДокумента) Тогда
	    ФайлИзображенияДополнительнойСтраницыДокумента = Строка(СканРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаДокументФизЛицаПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЕстьДокумент = ЗначениеЗаполнено(ФизЛицоДокументВид) И (Не ПустаяСтрока(ФизЛицоДокументНомер) Или Не ПустаяСтрока(ФизЛицоДокументСерия));
		
	Если Не ЕстьДокумент И (НЕ УПДК_ОбщегоНазначенияВызовСервера.ЗначениеКонстанты("ОбязательностьПаспорта") ИЛИ ТипОтношений <> ПредопределенноеЗначение("Справочник.CRM_ТипыОтношений.Покупатель")) Тогда
		СтруктураПараметров.ПроверяемыеРеквизиты.Очистить();
		Возврат;
	КонецЕсли;
		
	НеПроверяемыеРеквизиты = Новый Массив;

	Если НЕ УПДК_ОбщегоНазначенияВызовСервера.ЗначениеКонстанты("ОбязательностьСканаПаспорта") Тогда 		
		НеПроверяемыеРеквизиты.Добавить("ФайлИзображенияОсновнойСтраницыДокумента");
	КонецЕсли;		
		
	ЭтоПаспортРФ = ФизЛицоДокументВид = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	ТипСерииДокумента = ФизическиеЛицаКлиентСервер.ТипСерииДокументаУдостоверяющегоЛичность(ФизЛицоДокументВид);
	
	Если ТипСерииДокумента = 0 Тогда
		НеПроверяемыеРеквизиты.Добавить("ФизЛицоДокументСерия");
		НеПроверяемыеРеквизиты.Добавить("ФизЛицоДокументСрокДействия");
	КонецЕсли;
	
	Если Не ЭтоПаспортРФ Тогда
		НеПроверяемыеРеквизиты.Добавить("ФизЛицоДокументКодПодразделения");
	Иначе
		НеПроверяемыеРеквизиты.Добавить("ФизЛицоДокументСрокДействия");
	КонецЕсли;
	
	УПДК_ОбщегоНазначенияКлиентСервер.УдалитьНепроверяемыеРеквизитыИзМассива(СтруктураПараметров.ПроверяемыеРеквизиты, НеПроверяемыеРеквизиты); 
	
	ГруппаРазмещенияРеквизитов = Элементы.ГруппаКонтактнаяИнформацияФизЛица1.Имя;
	Если ЗначениеЗаполнено(Контакт) Тогда 			
		КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(КонтактФизлицо, СтруктураПараметров.Отказ, ГруппаРазмещенияРеквизитов);
	Иначе 			
		КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(ФизЛицо, СтруктураПараметров.Отказ, ГруппаРазмещенияРеквизитов);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаДокументФизЛицаПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаКонтактнаяИнформацияПартнера

&НаКлиенте
Процедура СтраницаКонтактнаяИнформацияПартнераПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если СтруктураПараметров.ЭтоПереходДалее Тогда
		
		Если ЗначениеЗаполнено(Контакт) Тогда 			
			КонтактнаяИнформацияПриЧтенииНаСервере(Контакт, "ГруппаКонтактнаяИнформацияПартнера");
		Иначе 			
			КонтактнаяИнформацияПриЧтенииНаСервере(Партнер, "ГруппаКонтактнаяИнформацияПартнера");
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаКонтактнаяИнформацияПартнераПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	ГруппаРазмещенияРеквизитов = Элементы.ГруппаКонтактнаяИнформацияПартнера.Имя;
	
	Если ЗначениеЗаполнено(Контакт) Тогда 			
		КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(Контакт, СтруктураПараметров.Отказ, ГруппаРазмещенияРеквизитов);
	Иначе 			
		КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(Партнер, СтруктураПараметров.Отказ, ГруппаРазмещенияРеквизитов);
	КонецЕсли; 		
	
КонецПроцедуры  

&НаКлиенте
Процедура СтраницаКонтактнаяИнформацияПартнераПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаКонтактнаяИнформацияФизЛица

&НаКлиенте
Процедура СтраницаКонтактнаяИнформацияФизЛицаПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если СтруктураПараметров.ЭтоПереходДалее Тогда
		
		Если ЗначениеЗаполнено(Контакт) Тогда 			
			КонтактнаяИнформацияПриЧтенииНаСервере(КонтактФизлицо, "ГруппаКонтактнаяИнформацияФизЛица");
		Иначе 			
			КонтактнаяИнформацияПриЧтенииНаСервере(Физлицо, "ГруппаКонтактнаяИнформацияФизЛица");
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаКонтактнаяИнформацияФизЛицаПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

		
	
КонецПроцедуры  

&НаКлиенте
Процедура СтраницаКонтактнаяИнформацияФизЛицаПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаКонтактнаяИнформацияКонтрагента

&НаКлиенте
Процедура СтраницаКонтактнаяИнформацияКонтрагентаПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	Если СтруктураПараметров.ЭтоПереходДалее Тогда
		КонтактнаяИнформацияПриЧтенииНаСервере(Контрагент, "ГруппаКонтактнаяИнформацияКонтрагента");			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницаКонтактнаяИнформацияКонтрагентаПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	ГруппаРазмещенияРеквизитов = Элементы.ГруппаКонтактнаяИнформацияКонтрагента.Имя;
	
	КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(Контрагент, СтруктураПараметров.Отказ, ГруппаРазмещенияРеквизитов);
		
КонецПроцедуры       

&НаКлиенте
Процедура СтраницаКонтактнаяИнформацияКонтрагентаПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаБанковскийСчетКонтрагента

&НаКлиенте
Процедура СтраницаБанковскийСчетКонтрагентаПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОформлениеСтраницаБанковскийСчетКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаБанковскийСчетКонтрагентаПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры       

&НаКлиенте
Процедура СтраницаБанковскийСчетКонтрагентаПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаНайденныеФизЛицаПоискПоКонтактам

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаПоискПоКонтактамПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если СтруктураПараметров.ЭтоПереходДалее И ЗначениеЗаполнено(ФизЛицо) Тогда
		СтруктураПараметров.ПропуститьСтраницу = Истина;
		Возврат;
	КонецЕсли;
	
	ПропуститьСтраницу = Истина;
	ЗаполнитьНайденныхФизЛицПоКонтактам(ПропуститьСтраницу);
	
	Если Не СтруктураПараметров.ЭтоПереходДалее И ЗначениеЗаполнено(ФизЛицо) Тогда
		НайденныеСтроки = НайденныеФизЛица.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо));
		Если НайденныеСтроки.Количество() Тогда
			НайденныеСтроки[0].Использовать = Истина;
			ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
			Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			ТаблицаПереходовПоСценариюФизЛицо();
		Иначе
			СтруктураПараметров.ПропуститьСтраницу = Истина;
		КонецЕсли;
		Возврат;
	Иначе
		СтруктураПараметров.ПропуститьСтраницу = ПропуститьСтраницу;
		
		ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ТаблицаПереходовПоСценариюФизЛицо();
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаПоискПоКонтактамПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	Отказ = Истина;
	Для Каждого СтрокаНайденныхФизЛиц Из НайденныеФизЛица Цикл
		Отказ = Отказ И НЕ СтрокаНайденныхФизЛиц.Использовать;	
		Если Не Отказ Тогда
			ФизЛицо = СтрокаНайденныхФизЛиц.ФизЛицо;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если Отказ Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран ни один вариант.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НайденныеФизЛица");
		
	Иначе
		
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			
			ТаблицаПереходовУдалитьСтрокиПослеНомера(ТаблицаПереходов, ПорядковыйНомерПерехода);
			
			Партнер = НайтиПартнераПоФизЛицу(ФизЛицо, ТипОтношений);
			Если ЗначениеЗаполнено(Партнер) Тогда
				
				СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Назад", "Отмена", "Готово");
				ИтераторПерехода = ПорядковыйНомерПерехода;
				ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайден", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
				
			Иначе
				
				СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Готово", "Назад, Отмена", "Готово");
				ИтераторПерехода = ИтераторПерехода + 1;
				ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаУспешно", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
												
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаНайденныеФизЛицаПоискПоКонтактамПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

КонецПроцедуры
	
#КонецОбласти

#Область СтраницаУспешно

&НаКлиенте
Процедура СтраницаУспешноПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если СтруктураПараметров.ЭтоПереходДалее Тогда
		
		ИзображенияДокумента = Новый Структура("Основное, Дополнительное", 
												Новый Структура("ИмяФайла, Расширение, АдресХранилищаИзображения, ПрисоединенныйФайл", "", "", "", Неопределено), 
												Новый Структура("ИмяФайла, Расширение, АдресХранилищаИзображения, ПрисоединенныйФайл", "", "", "", Неопределено));
												
		АдресХранилищаОсновногоИзображения = "";
		АдресХранилищаДополнительногоИзображения = "";
		Ошибка = Ложь;
		
		Попытка 
			
			Если Не ПустаяСтрока(ФайлИзображенияОсновнойСтраницыДокумента) Тогда
				
				Если ЗначениеЗаполнено(СканПаспорта) Тогда
					
					ИзображенияДокумента.Основное.ПрисоединенныйФайл = СканПаспорта;
					
				Иначе						
					
					Файл = Новый Файл(ФайлИзображенияОсновнойСтраницыДокумента);
					
					ИзображенияДокумента.Основное.ИмяФайла = Файл.ИмяБезРасширения;
					ИзображенияДокумента.Основное.Расширение = Файл.Расширение;
					
					ДвДанныеОсновногоИзображения = Новый ДвоичныеДанные(ФайлИзображенияОсновнойСтраницыДокумента);
					АдресХранилищаОсновногоИзображения = ПоместитьВоВременноеХранилище(ДвДанныеОсновногоИзображения);
					
					ИзображенияДокумента.Основное.АдресХранилищаИзображения = АдресХранилищаОсновногоИзображения;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ФайлИзображенияДополнительнойСтраницыДокумента) Тогда
				
				Если ЗначениеЗаполнено(СканРегистрации) Тогда
					
					ИзображенияДокумента.Дополнительное.ПрисоединенныйФайл = СканРегистрации;
					
				Иначе	
					
					Файл = Новый Файл(ФайлИзображенияДополнительнойСтраницыДокумента);
					
					ИзображенияДокумента.Дополнительное.ИмяФайла = Файл.ИмяБезРасширения;
					ИзображенияДокумента.Дополнительное.Расширение = Файл.Расширение;
					
					ДвДанныеДополнительногоИзображения = Новый ДвоичныеДанные(ФайлИзображенияДополнительнойСтраницыДокумента);
					АдресХранилищаДополнительногоИзображения = ПоместитьВоВременноеХранилище(ДвДанныеДополнительногоИзображения);
					
					ИзображенияДокумента.Дополнительное.АдресХранилищаИзображения = АдресХранилищаДополнительногоИзображения;
					
				КонецЕсли;

			КонецЕсли;
			
		Исключение
			
			ТекстЗавершения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Ошибка = Истина;
			
		КонецПопытки;
		
		Если Не Ошибка И СоздатьПартнераВИБ(ИзображенияДокумента) Тогда
			ТекстЗавершения = ОписаниеПартнера(Партнер, Контрагент);
		Иначе
			Ошибка = Истина;
		КонецЕсли;
		
		Если Ошибка Тогда
			
			СтруктураПараметров.ПропуститьСтраницу = Истина;
			
			ТаблицаПереходовУдалитьСтрокиПослеНомера(ТаблицаПереходов, ПорядковыйНомерПерехода);
			
			СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Назад, Отмена", "Готово", "");
			ИтераторПерехода = ПорядковыйНомерПерехода + 1;
			ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаОшибка", СтраницаНавигации, "СтраницаОшибкаОписание");
			
		КонецЕсли;
		
	Иначе
		СтруктураПараметров.ПропуститьСтраницу = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаУспешноПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры       

&НаКлиенте
Процедура СтраницаУспешноПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаНайден

&НаКлиенте
Процедура СтраницаНайденПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТекстЗавершения = ОписаниеПартнера(Партнер, Контрагент);		
				
КонецПроцедуры

&НаКлиенте
Процедура СтраницаНайденПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры       

&НаКлиенте
Процедура СтраницаНайденПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти

#Область СтраницаОшибка

&НаКлиенте
Процедура СтраницаОшибкаПриОткрытии(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

		
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОшибкаПриПереходеДалее(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры       

&НаКлиенте
Процедура СтраницаОшибкаПриПереходеНазад(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт

	
КонецПроцедуры
	
#КонецОбласти  

#КонецОбласти

#Область ИнициализацияТаблицПереходов

&НаСервере
Процедура ТаблицаПереходовПоСценариюФизЛицо()
	
	ТаблицаПереходов.Очистить();
	
	СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигации", "Отмена", "Назад", "Далее");
	ИтераторПерехода = 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаТипПартнера", СтраницаНавигации, "СтраницаТипПартнераОписание");
	
	СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигации", "Назад, Отмена",, "Далее");
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаДанныеФизЛица", СтраницаНавигации, "СтраницаДанныеФизЛицаОписание");
		
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайденныеФизЛица", СтраницаНавигации, "СтраницаНайденныеФизЛицаОписание", "СтраницаНайденныеФизЛицаПоискПоТелефонуФамилииИмениПриОткрытии", "СтраницаНайденныеФизЛицаПоискПоТелефонуФамилииИмениПриПереходеДалее", "СтраницаНайденныеФизЛицаПоискПоТелефонуФамилииИмениПриПереходеНазад");
		
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаДокументФизЛица", СтраницаНавигации, "СтраницаДокументФизЛицаОписание");
			
	СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Готово", "Назад, Отмена", "Готово");	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаУспешно", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовПоСценариюЮрЛицо()
	
	ТаблицаПереходов.Очистить();
	
	СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигации", "Отмена", "Назад", "Далее");
	ИтераторПерехода = 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаТипПартнера", СтраницаНавигации, "СтраницаТипПартнераОписание");
	
	СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигации", "Назад, Отмена",, "Далее");
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаДанныеЮрЛица", СтраницаНавигации, "СтраницаДанныеЮрЛицаОписание");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайденныеПартнеры", СтраницаНавигации, "СтраницаНайденныеПартнерыОписание");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаКонтактнаяИнформацияПартнера", СтраницаНавигации, "СтраницаКонтактнаяИнформацияПартнераОписание");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайденныеПартнеры", СтраницаНавигации, "СтраницаНайденныеПартнерыОписание", "СтраницаНайденныеПартнеры_ПоискПоТелефону_ПриОткрытии", "СтраницаНайденныеПартнеры_ПоискПоТелефону_ПриПереходеДалее", "СтраницаНайденныеПартнеры_ПоискПоТелефону_ПриПереходеНазад");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаКонтактнаяИнформацияКонтрагента", СтраницаНавигации, "СтраницаКонтактнаяИнформацияКонтрагентаОписание");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаБанковскийСчетКонтрагента", СтраницаНавигации, "СтраницаБанковскийСчетКонтрагентаОписание");
		
	СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Готово", "Назад, Отмена", "Готово");	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаУспешно", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовПоСценариюИндПредприниматель()
	
	ТаблицаПереходов.Очистить();
	
	СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигации", "Отмена", "Назад", "Далее");
	ИтераторПерехода = 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаТипПартнера", СтраницаНавигации, "СтраницаТипПартнераОписание");
	
	СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигации", "Назад, Отмена",, "Далее");      
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаДанныеФизЛица", СтраницаНавигации, "СтраницаДанныеФизЛицаИПОписание");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайденныеФизЛица", СтраницаНавигации, "СтраницаНайденныеФизЛицаОписание", "СтраницаНайденныеФизЛицаИППриОткрытии", "СтраницаНайденныеФизЛицаИППриПереходеДалее", "СтраницаНайденныеФизЛицаИППриПереходеНазад");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаДокументФизЛица", СтраницаНавигации, "СтраницаДокументФизЛицаОписание");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаДанныеИП", СтраницаНавигации, "СтраницаДанныеИПОписание");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайденныеПартнеры", СтраницаНавигации, "СтраницаНайденныеПартнерыОписание", "СтраницаНайденныеПартнерыИППриОткрытии", "СтраницаНайденныеПартнерыИППриПереходеДалее", "СтраницаНайденныеПартнерыИППриПереходеНазад");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаКонтактнаяИнформацияПартнера", СтраницаНавигации, "СтраницаКонтактнаяИнформацияПартнераОписание");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаНайденныеПартнеры", СтраницаНавигации, "СтраницаНайденныеПартнерыОписание", "СтраницаНайденныеПартнеры_ПоискПоТелефону_ПриОткрытии", "СтраницаНайденныеПартнеры_ПоискПоТелефону_ПриПереходеДалее", "СтраницаНайденныеПартнеры_ПоискПоТелефону_ПриПереходеНазад");
		
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаКонтактнаяИнформацияКонтрагента", СтраницаНавигации, "СтраницаКонтактнаяИнформацияКонтрагентаОписание");
	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаБанковскийСчетКонтрагента", СтраницаНавигации, "СтраницаБанковскийСчетКонтрагентаОписание");
	
	
	СтраницаНавигации = ПолучитьСтруктуруСтраницыНавигации("СтраницаНавигацииОкончание", "Готово", "Назад, Отмена", "Готово");	
	ИтераторПерехода = ИтераторПерехода + 1;
	ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, ИтераторПерехода, "СтраницаУспешно", СтраницаНавигации, "СтраницаУспешноСтраницаНайденОписание");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ИспользоватьDBrain()
	Возврат УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ИспользоватьDBrain");
КонецФункции

&НаКлиенте
Процедура ОформлениеСтраницаДокументФизЛица()
	
	ЕстьДокумент = ЗначениеЗаполнено(ФизЛицоДокументВид) И (Не ПустаяСтрока(ФизЛицоДокументНомер) Или Не ПустаяСтрока(ФизЛицоДокументСерия));
   	ЭтоПаспортРФ = ФизЛицоДокументВид = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	ТипСерииДокумента = ФизическиеЛицаКлиентСервер.ТипСерииДокументаУдостоверяющегоЛичность(ФизЛицоДокументВид);
	
	Элементы.ФизЛицоДокументСерия.Доступность = ТипСерииДокумента > 0;
	Элементы.ФизЛицоДокументКемВыдан.Доступность = ЕстьДокумент;
	Элементы.ФизЛицоДокументДатаВыдачи.Доступность = ЕстьДокумент;
	Элементы.ФизЛицоДокументМестоРождения.Доступность = ЕстьДокумент;
	Элементы.ФизЛицоДокументКодПодразделения.Доступность = ЕстьДокумент И ЭтоПаспортРФ;
	Элементы.ФизЛицоДокументСрокДействия.Видимость = ЕстьДокумент И Не ЭтоПаспортРФ;
		
	МаскаСерии = "";
	
	Если ТипСерииДокумента = 1 Тогда
		
	    МаскаСерии = "UU-UU;UUU-UU;UUUU-UU";
		
	ИначеЕсли ТипСерииДокумента = 2 Тогда
		
		МаскаСерии = "UU";
		
	ИначеЕсли ТипСерииДокумента = 3 Тогда
		
		МаскаСерии = "99";
		
	ИначеЕсли ТипСерииДокумента = 4 Тогда
		
		МаскаСерии = "99 99";
		
	ИначеЕсли ТипСерииДокумента = 5 Тогда
		
		МаскаСерии = "UU-UU";

	КонецЕсли;
	
	Элементы.ФизЛицоДокументСерия.Маска = МаскаСерии;
	
	Элементы.Распознать.Видимость = ИспользоватьDBrain();

КонецПроцедуры  

&НаКлиенте
Процедура ОформлениеСтраницаБанковскийСчетКонтрагента()
	
	ЕстьНомерСчета = Не ПустаяСтрока(БанковскийСчетНомерСчета);
		
	Элементы.БанковскийСчетВидСчета.Доступность = ЕстьНомерСчета;
	Элементы.БанковскийСчетВалюта.Доступность = ЕстьНомерСчета;
	Элементы.ГруппаБанк.Доступность = ЕстьНомерСчета;
	Элементы.ИспользуетсяБанкДляРасчетов.Доступность = ЕстьНомерСчета;
	Элементы.СтраницаБанкДляРасчетов.Доступность = ЕстьНомерСчета;
	
	Если ИспользуетсяБанкДляРасчетов Тогда
		Элементы.СтраницыБанкаДляРасчетов.ТекущаяСтраница = Элементы.СтраницаБанкДляРасчетов; 
	Иначе
		Элементы.СтраницыБанкаДляРасчетов.ТекущаяСтраница =	Элементы.СтраницаНепрямыеРасчетыНадпись;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СоздатьПартнераВИБ(ИзображенияДокумента)
	
	ОтменитьТранзакцию = Ложь;
	ТекстЗавершения = "";
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(Контакт) Тогда
			
			Если ТипКонтрагента = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				
				Физлицо = КонтактФизлицо;
				ФизЛицоОбъект = Физлицо.ПолучитьОбъект();					
				ФизЛицоОбъект.Фамилия = ФизЛицоФамилия;
				ФизЛицоОбъект.Имя = ФизЛицоИмя;
				ФизЛицоОбъект.Отчество = ФизЛицоОтчество;
				ФизЛицоОбъект.Пол = ФизЛицоПол;
				ФизЛицоОбъект.ИНН = ФизЛицоИНН;
				ФизЛицоОбъект.Нерезидент = ФизЛицоНерезидент;
				ФизЛицоОбъект.СНИЛС = ФизЛицоСНИЛС;
				ФизЛицоОбъект.ДатаРождения = ФизЛицоДатаРождения;
				
				Если ЗначениеЗаполнено(ИзображенияДокумента.Основное.ПрисоединенныйФайл) Тогда
					
					//ПрисоединенныйФайл = ИзображенияДокумента.Основное.ПрисоединенныйФайл.Скопировать();
					//ПрисоединенныйФайл.ВладелецФайла = ФизЛицо;
					//ПрисоединенныйФайл.Записать();
					
					ФизЛицоОбъект.СканПаспорта = ИзображенияДокумента.Основное.ПрисоединенныйФайл;
					
				ИначеЕсли Не ПустаяСтрока(ИзображенияДокумента.Основное.АдресХранилищаИзображения) Тогда
					
					ОписаниеФайла = НСтр("ru = 'Изображение документа физического лица'");
					СсылкаНаФайл = ПрисоединенныеФайлы.ДобавитьФайл(ФизЛицо, 
					ИзображенияДокумента.Основное.ИмяФайла, 
					ИзображенияДокумента.Основное.Расширение,
					ТекущаяДата(),
					ТекущаяУниверсальнаяДата(),
					ИзображенияДокумента.Основное.АдресХранилищаИзображения,
					,
					ОписаниеФайла);
					
					ФизЛицоОбъект.СканПаспорта = СсылкаНаФайл;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИзображенияДокумента.Дополнительное.ПрисоединенныйФайл) Тогда
					
					//ПрисоединенныйФайл = ИзображенияДокумента.Дополнительное.ПрисоединенныйФайл.Скопировать();
					//ПрисоединенныйФайл.ВладелецФайла = ФизЛицо;
					//ПрисоединенныйФайл.Записать();
					
					ФизЛицоОбъект.СканРегистрации = ИзображенияДокумента.Дополнительное.ПрисоединенныйФайл;
					
				ИначеЕсли Не ПустаяСтрока(ИзображенияДокумента.Дополнительное.АдресХранилищаИзображения) Тогда
					
					ОписаниеФайла = НСтр("ru = 'Изображение документа физического лица'");
					СсылкаНаФайл = ПрисоединенныеФайлы.ДобавитьФайл(ФизЛицо, 
					ИзображенияДокумента.Дополнительное.ИмяФайла, 
					ИзображенияДокумента.Дополнительное.Расширение,
					ТекущаяДата(),
					ТекущаяУниверсальнаяДата(),
					ИзображенияДокумента.Дополнительное.АдресХранилищаИзображения,
					,
					ОписаниеФайла);
					
					ФизЛицоОбъект.СканРегистрации = СсылкаНаФайл;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ФизЛицоОбъект.СканПаспорта) Или
					ЗначениеЗаполнено(ФизЛицоОбъект.СканРегистрации) Тогда
					ФизЛицоОбъект.Записать();
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ФизЛицоДокументВид) И (Не ПустаяСтрока(ФизЛицоДокументСерия) Или Не ПустаяСтрока(ФизЛицоДокументНомер)) Тогда
					
					Набор = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
					
					Набор.Отбор.Период.Установить(ФизЛицоДокументДатаВыдачи);
					Набор.Отбор.Физлицо.Установить(ФизЛицо);
					Набор.Отбор.ВидДокумента.Установить(ФизЛицоДокументВид);
					
					СтрокаНабора = Набор.Добавить();
					
					СтрокаНабора.Период       = ФизЛицоДокументДатаВыдачи;
					СтрокаНабора.ВидДокумента = ФизЛицоДокументВид;
					СтрокаНабора.Физлицо	  = ФизЛицо;
					СтрокаНабора.Серия        = ФизЛицоДокументСерия;
					СтрокаНабора.Номер 		  = ФизЛицоДокументНомер;
					СтрокаНабора.ДатаВыдачи   = ФизЛицоДокументДатаВыдачи;
					СтрокаНабора.КемВыдан     = ФизЛицоДокументКемВыдан;
					СтрокаНабора.СрокДействия = ФизЛицоДокументСрокДействия;
					СтрокаНабора.МестоРождения = ФизЛицоДокументМестоРождения;
					СтрокаНабора.КодПодразделения = ФизЛицоДокументКодПодразделения;
					СтрокаНабора.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
					
					Набор.Записать(Истина);
					
				КонецЕсли; 
				
				УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ФизЛицоОбъект);
				
				ФизЛицоОбъект.Записать();		
				
				ФизЛицо = ФизЛицоОбъект.Ссылка;
				
				ПартнерОбъект = Контакт.ПолучитьОбъект();				
				ПартнерОбъект.ВидПартнера = Перечисления.ВидПартнера.ЧастноеЛицо;
				ПартнерОбъект.CRM_ТипОтношений = ?(ЗначениеЗаполнено(ТипОтношений), ТипОтношений, ТипОтношенийИное);
				ПартнерОбъект.ОсновнойМенеджер = ПользователиКлиентСервер.ТекущийПользователь();
				УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ПартнерОбъект);
				ПартнерОбъект.Записать();
				
				Если ЗначениеЗаполнено(Статус) Тогда
				    РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(ПартнерОбъект.Ссылка, Статус);
				КонецЕсли;
				
				Партнер = ПартнерОбъект.Ссылка;
				
				
			ИначеЕсли ТипКонтрагента = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				
				ПартнерОбъект = Контакт.ПолучитьОбъект();
				ПартнерОбъект.Наименование = ЮрЛицоНаименование;
				ПартнерОбъект.НаименованиеПолное = ЮрЛицоНаименованиеСокр;
				ПартнерОбъект.ВидПартнера = Перечисления.ВидПартнера.Компания;
				ПартнерОбъект.CRM_ТипОтношений = ?(ЗначениеЗаполнено(ТипОтношений), ТипОтношений, ТипОтношенийИное);
				ПартнерОбъект.ОсновнойМенеджер = ПользователиКлиентСервер.ТекущийПользователь();
				ПартнерОбъект.CRM_ИНН = ЮрЛицоИНН;
				ПартнерОбъект.CRM_КПП = ЮрЛицоКПП;
				ПартнерОбъект.CRM_КодПоОКПО = ЮрЛицоКодПоОКПО; 
				УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ПартнерОбъект);
				ПартнерОбъект.Записать();
				
				Если ЗначениеЗаполнено(Статус) Тогда
					РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(ПартнерОбъект.Ссылка, Статус);
				КонецЕсли;
			
				Партнер = ПартнерОбъект.Ссылка;
									
				КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				КонтрагентОбъект.Владелец = Партнер;
				КонтрагентОбъект.Наименование = ЮрЛицоНаименованиеСокр;
				КонтрагентОбъект.НаименованиеПолное = ЮрЛицоНаименованиеПолное;
				КонтрагентОбъект.ИНН = ЮрЛицоИНН;
				КонтрагентОбъект.КПП = ЮрЛицоКПП;
				КонтрагентОбъект.ОКПО = ЮрЛицоКодПоОКПО;
				КонтрагентОбъект.ТипКонтрагента = ТипКонтрагента;
				УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, КонтрагентОбъект);
				КонтрагентОбъект.Записать();
				
				Контрагент = КонтрагентОбъект.Ссылка;
				
				Если Не ПустаяСтрока(БанковскийСчетНомерСчета) Тогда
					
					БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
					БанковскийСчетОбъект.Владелец = Контрагент;
					БанковскийСчетОбъект.ВалютаДенежныхСредств = БанковскийСчетВалюта;
					БанковскийСчетОбъект.ВидСчета = БанковскийСчетВидСчета;
					БанковскийСчетОбъект.НомерСчета = БанковскийСчетНомерСчета;
					БанковскийСчетОбъект.Банк = БанковскийСчетБанк;
					
					Если ИспользуетсяБанкДляРасчетов Тогда
						
						БанковскийСчетОбъект.БанкРасчетов = БанковскийСчетБанкДляРасчетов;
						
					КонецЕсли;
					
					СтрокаНаименования = СокрЛп(БанковскийСчетОбъект.НомерСчета) + ?(ЗначениеЗаполнено(БанковскийСчетОбъект.Банк), ", в " + Строка(БанковскийСчетОбъект.Банк), "");
					СтрокаНаименования = Лев(СтрокаНаименования, 100);
					БанковскийСчетОбъект.Наименование = СтрокаНаименования;
					БанковскийСчетОбъект.Записать();
					
					КонтрагентОбъект.БанковскийСчетПоУмолчанию = БанковскийСчетОбъект.Ссылка; 
					КонтрагентОбъект.Записать();
					
				КонецЕсли;
	
				
			ИначеЕсли ТипКонтрагента = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
				
				ФизЛицоОбъект = КонтактФизлицо.ПолучитьОбъект();				
				ФизЛицоОбъект.Фамилия = ФизЛицоФамилия;
				ФизЛицоОбъект.Имя = ФизЛицоИмя;
				ФизЛицоОбъект.Отчество = ФизЛицоОтчество;
				ФизЛицоОбъект.Пол = ФизЛицоПол;
				ФизЛицоОбъект.ИНН = ФизЛицоИНН;
				ФизЛицоОбъект.Нерезидент = ФизЛицоНерезидент;				
				ФизЛицоОбъект.СНИЛС = ФизЛицоСНИЛС;
				ФизЛицоОбъект.ДатаРождения = ФизЛицоДатаРождения;
				УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ФизЛицоОбъект);			
				ФизЛицоОбъект.Записать();
				
				ФизЛицо = ФизЛицоОбъект.Ссылка;
				
				Если ЗначениеЗаполнено(ФизЛицоДокументВид) И (Не ПустаяСтрока(ФизЛицоДокументСерия) Или Не ПустаяСтрока(ФизЛицоДокументНомер)) Тогда
					
					Набор = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
					
					Набор.Отбор.Период.Установить(ФизЛицоДокументДатаВыдачи);
					Набор.Отбор.Физлицо.Установить(ФизЛицо);
					Набор.Отбор.ВидДокумента.Установить(ФизЛицоДокументВид);
					
					СтрокаНабора = Набор.Добавить();
					
					СтрокаНабора.Период       = ФизЛицоДокументДатаВыдачи;
					СтрокаНабора.ВидДокумента = ФизЛицоДокументВид;
					СтрокаНабора.Физлицо	  = ФизЛицо;
					СтрокаНабора.Серия        = ФизЛицоДокументСерия;
					СтрокаНабора.Номер 		  = ФизЛицоДокументНомер;
					СтрокаНабора.ДатаВыдачи   = ФизЛицоДокументДатаВыдачи;
					СтрокаНабора.КемВыдан     = ФизЛицоДокументКемВыдан;
					СтрокаНабора.СрокДействия = ФизЛицоДокументСрокДействия;
					СтрокаНабора.МестоРождения = ФизЛицоДокументМестоРождения;
					СтрокаНабора.КодПодразделения = ФизЛицоДокументКодПодразделения;
					СтрокаНабора.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
					
					Набор.Записать(Истина);
					
				КонецЕсли;				
				
				ПартнерОбъект = Контакт.ПолучитьОбъект();
				ПартнерОбъект.Наименование = ЮрЛицоНаименование;
				ПартнерОбъект.НаименованиеПолное = ЮрЛицоНаименованиеСокр;
				ПартнерОбъект.ВидПартнера = Перечисления.ВидПартнера.Компания;
				ПартнерОбъект.CRM_ТипОтношений = ?(ЗначениеЗаполнено(ТипОтношений), ТипОтношений, ТипОтношенийИное);
				ПартнерОбъект.CRM_ИНН = ЮрЛицоИНН;
				ПартнерОбъект.ОсновнойМенеджер = ПользователиКлиентСервер.ТекущийПользователь();		
				УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ПартнерОбъект);
				ПартнерОбъект.Записать();
				
				Если ЗначениеЗаполнено(Статус) Тогда
					РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(ПартнерОбъект.Ссылка, Статус);
				КонецЕсли;			
				
				Партнер = ПартнерОбъект.Ссылка;
				
				КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				КонтрагентОбъект.Владелец = Партнер;
				КонтрагентОбъект.Наименование = ЮрЛицоНаименованиеСокр;
				КонтрагентОбъект.НаименованиеПолное = ЮрЛицоНаименованиеПолное;
				КонтрагентОбъект.ИНН = ЮрЛицоИНН;
				КонтрагентОбъект.ТипКонтрагента = ТипКонтрагента;
				КонтрагентОбъект.ФизЛицо = ФизЛицо;
				УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, КонтрагентОбъект);
				КонтрагентОбъект.Записать();
				
				Контрагент = КонтрагентОбъект.Ссылка;
				
				Если Не ПустаяСтрока(БанковскийСчетНомерСчета) Тогда
					
					БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
					БанковскийСчетОбъект.Владелец = Контрагент;
					БанковскийСчетОбъект.ВалютаДенежныхСредств = БанковскийСчетВалюта;
					БанковскийСчетОбъект.ВидСчета = БанковскийСчетВидСчета;
					БанковскийСчетОбъект.НомерСчета = БанковскийСчетНомерСчета;
					БанковскийСчетОбъект.Банк = БанковскийСчетБанк;
					
					Если ИспользуетсяБанкДляРасчетов Тогда
						
						БанковскийСчетОбъект.БанкРасчетов = БанковскийСчетБанкДляРасчетов;
						
					КонецЕсли;
					
					СтрокаНаименования = СокрЛп(БанковскийСчетОбъект.НомерСчета) + ?(ЗначениеЗаполнено(БанковскийСчетОбъект.Банк), ", в " + Строка(БанковскийСчетОбъект.Банк), "");
					СтрокаНаименования = Лев(СтрокаНаименования, 100);
					БанковскийСчетОбъект.Наименование = СтрокаНаименования;
					БанковскийСчетОбъект.Записать();
					
					КонтрагентОбъект.БанковскийСчетПоУмолчанию = БанковскийСчетОбъект.Ссылка; 
					КонтрагентОбъект.Записать();
					
				КонецЕсли;
				
				
			КонецЕсли;
							
		Иначе 			
			
			Если ТипКонтрагента = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				
				Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
					
					ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
					ФизЛицоОбъект.Фамилия = ФизЛицоФамилия;
					ФизЛицоОбъект.Имя = ФизЛицоИмя;
					ФизЛицоОбъект.Отчество = ФизЛицоОтчество;
					ФизЛицоОбъект.Пол = ФизЛицоПол;
					ФизЛицоОбъект.ИНН = ФизЛицоИНН;
					ФизЛицоОбъект.Нерезидент = ФизЛицоНерезидент;
					ФизЛицоОбъект.СНИЛС = ФизЛицоСНИЛС;
					ФизЛицоОбъект.ДатаРождения = ФизЛицоДатаРождения;
					УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ФизЛицоОбъект);			
					ФизЛицоОбъект.Записать();
					
					ФизЛицо = ФизЛицоОбъект.Ссылка;
					
					Если Не ПустаяСтрока(ИзображенияДокумента.Основное.АдресХранилищаИзображения) Тогда
						ОписаниеФайла = НСтр("ru = 'Основное изображение документа физического лица'");
						СсылкаНаФайл = ПрисоединенныеФайлы.ДобавитьФайл(ФизЛицо, 
						ИзображенияДокумента.Основное.ИмяФайла, 
						ИзображенияДокумента.Основное.Расширение,
						ТекущаяДата(),
						ТекущаяУниверсальнаяДата(),
						ИзображенияДокумента.Основное.АдресХранилищаИзображения,
						,
						ОписаниеФайла);
						
						ФизЛицоОбъект.СканПаспорта = СсылкаНаФайл;
						
					КонецЕсли;
					
					Если Не ПустаяСтрока(ИзображенияДокумента.Дополнительное.АдресХранилищаИзображения) Тогда
						ОписаниеФайла = НСтр("ru = 'Дополнительное изображение документа физического лица'");
						СсылкаНаФайл = ПрисоединенныеФайлы.ДобавитьФайл(ФизЛицо, 
						ИзображенияДокумента.Дополнительное.ИмяФайла, 
						ИзображенияДокумента.Дополнительное.Расширение,
						ТекущаяДата(),
						ТекущаяУниверсальнаяДата(),
						ИзображенияДокумента.Дополнительное.АдресХранилищаИзображения,
						,
						ОписаниеФайла);
						
						ФизЛицоОбъект.СканРегистрации = СсылкаНаФайл;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ФизЛицоОбъект.СканПаспорта) Или
						ЗначениеЗаполнено(ФизЛицоОбъект.СканРегистрации) Тогда
						ФизЛицоОбъект.Записать();
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ФизЛицоДокументВид) И (Не ПустаяСтрока(ФизЛицоДокументСерия) Или Не ПустаяСтрока(ФизЛицоДокументНомер)) Тогда
						
						Набор = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
						
						Набор.Отбор.Период.Установить(ФизЛицоДокументДатаВыдачи);
						Набор.Отбор.Физлицо.Установить(ФизЛицо);
						Набор.Отбор.ВидДокумента.Установить(ФизЛицоДокументВид);
						
						СтрокаНабора = Набор.Добавить();
						
						СтрокаНабора.Период       = ФизЛицоДокументДатаВыдачи;
						СтрокаНабора.ВидДокумента = ФизЛицоДокументВид;
						СтрокаНабора.Физлицо	  = ФизЛицо;
						СтрокаНабора.Серия        = ФизЛицоДокументСерия;
						СтрокаНабора.Номер 		  = ФизЛицоДокументНомер;
						СтрокаНабора.ДатаВыдачи   = ФизЛицоДокументДатаВыдачи;
						СтрокаНабора.КемВыдан     = ФизЛицоДокументКемВыдан;
						СтрокаНабора.СрокДействия = ФизЛицоДокументСрокДействия;
						СтрокаНабора.МестоРождения = ФизЛицоДокументМестоРождения;
						СтрокаНабора.КодПодразделения = ФизЛицоДокументКодПодразделения;
						СтрокаНабора.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
						
						Набор.Записать(Истина);
						
					КонецЕсли; 
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Партнер) Тогда
					
					ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
					ПартнерОбъект.Наименование = ФизЛицо.Наименование;
					ПартнерОбъект.НаименованиеПолное = СтрЗаменить(СокрЛП(ФизЛицоФамилия + " " + ФизЛицоИмя + " " + ФизЛицоОтчество), "  ", " ");
					ПартнерОбъект.ВидПартнера = Перечисления.ВидПартнера.ЧастноеЛицо;
					ПартнерОбъект.CRM_ТипОтношений = ?(ЗначениеЗаполнено(ТипОтношений), ТипОтношений, ТипОтношенийИное);
					ПартнерОбъект.CRM_НапоминатьОДнеРождения = ЗначениеЗаполнено(ФизЛицоДатаРождения);
					ПартнерОбъект.ОсновнойМенеджер = ПользователиКлиентСервер.ТекущийПользователь();
					УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ПартнерОбъект);
					
					ПартнерОбъект.ОсновноеКонтактноеЛицо = ФизЛицо;
					НовКЛ = ПартнерОбъект.КонтактныеЛица.Добавить();
					НовКЛ.ФизЛицо = ФизЛицо;
					Новкл.ПравоПодписи = Истина;
					
					ПартнерОбъект.Записать();
					
					Если ЗначениеЗаполнено(Статус) Тогда
						РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(ПартнерОбъект.Ссылка, Статус);
					КонецЕсли;
					
					Партнер = ПартнерОбъект.Ссылка;
					
				КонецЕсли;
				
			ИначеЕсли ТипКонтрагента = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
				
				Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
					
					ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
					ФизЛицоОбъект.Фамилия = ФизЛицоФамилия;
					ФизЛицоОбъект.Имя = ФизЛицоИмя;
					ФизЛицоОбъект.Отчество = ФизЛицоОтчество;
					ФизЛицоОбъект.Пол = ФизЛицоПол;
					ФизЛицоОбъект.ИНН = ФизЛицоИНН;
					ФизЛицоОбъект.Нерезидент = ФизЛицоНерезидент; 					
					ФизЛицоОбъект.СНИЛС = ФизЛицоСНИЛС;
					ФизЛицоОбъект.ДатаРождения = ФизЛицоДатаРождения;
					УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ФизЛицоОбъект);			
					ФизЛицоОбъект.Записать();
					
					ФизЛицо = ФизЛицоОбъект.Ссылка;
					
					Если ЗначениеЗаполнено(ФизЛицоДокументВид) И (Не ПустаяСтрока(ФизЛицоДокументСерия) Или Не ПустаяСтрока(ФизЛицоДокументНомер)) Тогда
						
						Набор = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
						
						Набор.Отбор.Период.Установить(ФизЛицоДокументДатаВыдачи);
						Набор.Отбор.Физлицо.Установить(ФизЛицо);
						Набор.Отбор.ВидДокумента.Установить(ФизЛицоДокументВид);
						
						СтрокаНабора = Набор.Добавить();
						
						СтрокаНабора.Период       = ФизЛицоДокументДатаВыдачи;
						СтрокаНабора.ВидДокумента = ФизЛицоДокументВид;
						СтрокаНабора.Физлицо	  = ФизЛицо;
						СтрокаНабора.Серия        = ФизЛицоДокументСерия;
						СтрокаНабора.Номер 		  = ФизЛицоДокументНомер;
						СтрокаНабора.ДатаВыдачи   = ФизЛицоДокументДатаВыдачи;
						СтрокаНабора.КемВыдан     = ФизЛицоДокументКемВыдан;
						СтрокаНабора.СрокДействия = ФизЛицоДокументСрокДействия;
						СтрокаНабора.МестоРождения = ФизЛицоДокументМестоРождения;
						СтрокаНабора.КодПодразделения = ФизЛицоДокументКодПодразделения;
						СтрокаНабора.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
						
						Набор.Записать(Истина);
						
					КонецЕсли; 
					
				КонецЕсли;
				
				
				Если Не ЗначениеЗаполнено(Партнер) Тогда
					
					ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
					ПартнерОбъект.Наименование = ЮрЛицоНаименование;
					ПартнерОбъект.НаименованиеПолное = ЮрЛицоНаименованиеСокр;
					ПартнерОбъект.ВидПартнера = Перечисления.ВидПартнера.Компания;
					ПартнерОбъект.CRM_ТипОтношений = ?(ЗначениеЗаполнено(ТипОтношений), ТипОтношений, ТипОтношенийИное);
					ПартнерОбъект.CRM_ИНН = ЮрЛицоИНН;
					ПартнерОбъект.CRM_НапоминатьОДнеРождения = ЗначениеЗаполнено(ФизЛицоДатаРождения);
					ПартнерОбъект.ОсновнойМенеджер = ПользователиКлиентСервер.ТекущийПользователь();
					УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ПартнерОбъект);
					
					ПартнерОбъект.ОсновноеКонтактноеЛицо = ФизЛицо;
					НовКЛ = ПартнерОбъект.КонтактныеЛица.Добавить();
					НовКЛ.ФизЛицо = ФизЛицо;
					Новкл.ПравоПодписи = Истина;
					
					ПартнерОбъект.Записать();
					
					Если ЗначениеЗаполнено(Статус) Тогда
						РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(ПартнерОбъект.Ссылка, Статус);
					КонецЕсли;  
					
					Партнер = ПартнерОбъект.Ссылка;
										
				КонецЕсли;
				
				КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				КонтрагентОбъект.Владелец = Партнер;
				КонтрагентОбъект.Наименование = ЮрЛицоНаименованиеСокр;
				КонтрагентОбъект.НаименованиеПолное = ЮрЛицоНаименованиеПолное;
				КонтрагентОбъект.ИНН = ЮрЛицоИНН;
				КонтрагентОбъект.ТипКонтрагента = ТипКонтрагента;
				КонтрагентОбъект.ФизЛицо = ФизЛицо;
				УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, КонтрагентОбъект);
				КонтрагентОбъект.Записать();
				
				Контрагент = КонтрагентОбъект.Ссылка;
				
				Если Не ПустаяСтрока(БанковскийСчетНомерСчета) Тогда
					
					БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
					БанковскийСчетОбъект.Владелец = Контрагент;
					БанковскийСчетОбъект.ВалютаДенежныхСредств = БанковскийСчетВалюта;
					БанковскийСчетОбъект.ВидСчета = БанковскийСчетВидСчета;
					БанковскийСчетОбъект.НомерСчета = БанковскийСчетНомерСчета;
					БанковскийСчетОбъект.Банк = БанковскийСчетБанк;
					
					Если ИспользуетсяБанкДляРасчетов Тогда
						
						БанковскийСчетОбъект.БанкРасчетов = БанковскийСчетБанкДляРасчетов;
						
					КонецЕсли;
					
					СтрокаНаименования = СокрЛп(БанковскийСчетОбъект.НомерСчета) + ?(ЗначениеЗаполнено(БанковскийСчетОбъект.Банк), ", в " + Строка(БанковскийСчетОбъект.Банк), "");
					СтрокаНаименования = Лев(СтрокаНаименования, 100);
					БанковскийСчетОбъект.Наименование = СтрокаНаименования;
					БанковскийСчетОбъект.Записать();
					
					КонтрагентОбъект.БанковскийСчетПоУмолчанию = БанковскийСчетОбъект.Ссылка; 
					КонтрагентОбъект.Записать();
					
				КонецЕсли;
				
			ИначеЕсли ТипКонтрагента = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				
				Если Не ЗначениеЗаполнено(Партнер) Тогда
					
					ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
					ПартнерОбъект.Наименование = ЮрЛицоНаименование;
					ПартнерОбъект.НаименованиеПолное = ЮрЛицоНаименованиеСокр;
					ПартнерОбъект.ВидПартнера = Перечисления.ВидПартнера.Компания;
					ПартнерОбъект.CRM_ТипОтношений = ?(ЗначениеЗаполнено(ТипОтношений), ТипОтношений, ТипОтношенийИное);
					ПартнерОбъект.ОсновнойМенеджер = ПользователиКлиентСервер.ТекущийПользователь();
					ПартнерОбъект.CRM_ИНН = ЮрЛицоИНН;
					ПартнерОбъект.CRM_КПП = ЮрЛицоКПП;
					ПартнерОбъект.CRM_КодПоОКПО = ЮрЛицоКодПоОКПО; 
					УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ПартнерОбъект);
					ПартнерОбъект.Записать();
					
					Если ЗначениеЗаполнено(Статус) Тогда
						РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(ПартнерОбъект.Ссылка, Статус);
					КонецЕсли;
					
					Партнер = ПартнерОбъект.Ссылка;
					
				КонецЕсли;
				
				КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				КонтрагентОбъект.Владелец = Партнер;
				КонтрагентОбъект.Наименование = ЮрЛицоНаименованиеСокр;
				КонтрагентОбъект.НаименованиеПолное = ЮрЛицоНаименованиеПолное;
				КонтрагентОбъект.ИНН = ЮрЛицоИНН;
				КонтрагентОбъект.КПП = ЮрЛицоКПП;
				КонтрагентОбъект.ОКПО = ЮрЛицоКодПоОКПО;
				КонтрагентОбъект.ТипКонтрагента = ТипКонтрагента;
				УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, КонтрагентОбъект);
				КонтрагентОбъект.Записать();
				
				Контрагент = КонтрагентОбъект.Ссылка;
				
				Если Не ПустаяСтрока(БанковскийСчетНомерСчета) Тогда
					
					БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
					БанковскийСчетОбъект.Владелец = Контрагент;
					БанковскийСчетОбъект.ВалютаДенежныхСредств = БанковскийСчетВалюта;
					БанковскийСчетОбъект.ВидСчета = БанковскийСчетВидСчета;
					БанковскийСчетОбъект.НомерСчета = БанковскийСчетНомерСчета;
					БанковскийСчетОбъект.Банк = БанковскийСчетБанк;
					
					Если ИспользуетсяБанкДляРасчетов Тогда
						
						БанковскийСчетОбъект.БанкРасчетов = БанковскийСчетБанкДляРасчетов;
						
					КонецЕсли;
					
					СтрокаНаименования = СокрЛп(БанковскийСчетОбъект.НомерСчета) + ?(ЗначениеЗаполнено(БанковскийСчетОбъект.Банк), ", в " + Строка(БанковскийСчетОбъект.Банк), "");
					СтрокаНаименования = Лев(СтрокаНаименования, 100);
					БанковскийСчетОбъект.Наименование = СтрокаНаименования;
					БанковскийСчетОбъект.Записать();
					
					КонтрагентОбъект.БанковскийСчетПоУмолчанию = БанковскийСчетОбъект.Ссылка; 
					КонтрагентОбъект.Записать();
					
				КонецЕсли;
				
			Иначе
				
				ВызватьИсключение(НСтр("ru = 'Требуется реализация функционала.'"));
				
			КонецЕсли;
			
		КонецЕсли;
     
 	Исключение
		ТекстЗавершения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОтменитьТранзакцию = Истина;
	КонецПопытки;
	
	Если ОтменитьТранзакцию Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат Не ОтменитьТранзакцию;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПартнера(Партнер, Контрагент)
	
	Результат = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПартнер = Новый Запрос;
	ЗапросПартнер.УстановитьПараметр("Партнер", Партнер);
	ЗапросПартнер.Текст = 
	"ВЫБРАТЬ
	|	Партнеры.Наименование,
	|	Партнеры.ВидПартнера КАК ВидПартнера,
	|	Партнеры.CRM_ТипОтношений КАК ТипОтношений,
	|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	Партнеры.ДатаРегистрации КАК ДатаРегистрации,
	|	Партнеры.ОсновноеКонтактноеЛицо КАК ОсновноеКонтактноеЛицо,
	|	Партнеры.ОсновноеКонтактноеЛицо.Наименование КАК ОсновноеКонтактноеЛицоНаименование,
	|	Партнеры.ОсновноеКонтактноеЛицо.ДатаРождения КАК ОсновноеКонтактноеЛицоДатаРождения,
	|	Партнеры.ОсновноеКонтактноеЛицо КАК ОсновноеКонтактноеЛицоФизЛицо
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер";
	
	ВыборкаПартнер = ЗапросПартнер.Выполнить().Выбрать();
	
	Если ВыборкаПартнер.Следующий() Тогда
				
		Результат = Результат + 
		"---Партнер---
		|Наименование: " + ВыборкаПартнер.Наименование + "
		|Вид партнера: " + ВыборкаПартнер.ВидПартнера + "
		|Основной менеджер: " + ВыборкаПартнер.ОсновнойМенеджер + "
		|Дата регистрации: " + Формат(ВыборкаПартнер.ДатаРегистрации, "ДЛФ=DD");
		
		МассивОбъектовКИ = Новый Массив;
		МассивОбъектовКИ.Добавить(Партнер);
		КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектовКИ);
		Для Каждого СтрокаКИ Из КонтактнаяИнформацияОбъекта Цикл
			Если Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
				Результат = Результат + Символы.ПС +
				СтрокаКИ.Вид + ": " + СтрокаКИ.Представление;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаПартнер.ОсновноеКонтактноеЛицо) Тогда
			
			Результат = Результат + Символы.ПС + Символы.ПС +
			"---Основное контактное лицо---
			|Наименование: " + ВыборкаПартнер.ОсновноеКонтактноеЛицоНаименование + "
			|Дата рождения: " + Формат(ВыборкаПартнер.ОсновноеКонтактноеЛицоДатаРождения, "ДЛФ=DD");
			
			Если ЗначениеЗаполнено(ВыборкаПартнер.ОсновноеКонтактноеЛицоФизЛицо) Тогда
				
				ФизЛицо = ВыборкаПартнер.ОсновноеКонтактноеЛицоФизЛицо;
				МенеджерРегистра = РегистрыСведений.ДокументыФизическихЛиц;
				Результат = Результат + Символы.ПС +
				"Документ: " + СтрЗаменить(МенеджерРегистра.ДокументУдостоверяющийЛичностьФизлица(ФизЛицо), ",", Символы.ПС + "          ");
				
				МассивОбъектовКИ = Новый Массив;
				МассивОбъектовКИ.Добавить(ФизЛицо);
				КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектовКИ);
				Для Каждого СтрокаКИ Из КонтактнаяИнформацияОбъекта Цикл
					Если Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
						Результат = Результат + Символы.ПС +
						СтрокаКИ.Вид + ": " + СтрокаКИ.Представление;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			МассивОбъектовКИ = Новый Массив;
			МассивОбъектовКИ.Добавить(ВыборкаПартнер.ОсновноеКонтактноеЛицо);
			КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектовКИ);
			Для Каждого СтрокаКИ Из КонтактнаяИнформацияОбъекта Цикл
				Если Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
					Результат = Результат + Символы.ПС +
					СтрокаКИ.Вид + ": " + СтрокаКИ.Представление;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		ЗапросКонтрагент = Новый Запрос;
		ЗапросКонтрагент.УстановитьПараметр("Контрагент", Контрагент);
		ЗапросКонтрагент.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Наименование,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.ТипКонтрагента КАК ТипКонтрагента,
		|	Контрагенты.ОГРН КАК ОГРН,
		|	Контрагенты.ОГРНИП КАК ОГРНИП,
		|	Контрагенты.ОКПО КАК ОКПО
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент";
		
		ВыборкаКонтрагент = ЗапросКонтрагент.Выполнить().Выбрать();
		
		Если ВыборкаКонтрагент.Следующий() Тогда
			
			Результат = Результат + 
			"---Контрагент---
			|Наименование: " + ВыборкаКонтрагент.Наименование + "
			|Тип контрагента: " + ВыборкаКонтрагент.ТипКонтрагента + "
			|ИНН/КПП: " + ВыборкаКонтрагент.ИНН + "/" + ВыборкаКонтрагент.КПП + " 
			|ОГРН(ИП): " + ?(Не ПустаяСтрока(ВыборкаКонтрагент.ОГРН), ВыборкаКонтрагент.ОГРН, ВыборкаКонтрагент.ОГРНИП)  + "
			|ОКПО: " + ВыборкаКонтрагент.ОКПО;
			
			МассивОбъектовКИ = Новый Массив;
			МассивОбъектовКИ.Добавить(Контрагент);
			КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектовКИ);
			Для Каждого СтрокаКИ Из КонтактнаяИнформацияОбъекта Цикл
				Если Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
					Результат = Результат + Символы.ПС +
					СтрокаКИ.Вид + ": " + СтрокаКИ.Представление;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПартнераПоФизЛицу(ФизЛицо, ТипОтношений)
	
	Результат = Справочники.Партнеры.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("ТипОтношений", ТипОтношений);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Партнеры.Ссылка КАК Партнер
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.ОсновноеКонтактноеЛицо = &ФизЛицо
	|	И Партнеры.CRM_ТипОтношений = &ТипОтношений
	|	И Партнеры.CRM_ФизЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Партнер;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НайденоФизлицо(Клиент, НовоеФизлицо, СтароеФизлицо, ПеречитатьСобытие)
	
	НачатьТранзакцию();
		
	КлиентОбъект = Клиент.ПолучитьОбъект();
	КлиентОбъект.ОсновноеКонтактноеЛицо = НовоеФизлицо;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого ТекКЛ из КлиентОбъект.КонтактныеЛица Цикл
		
		Если ТекКл.ФизЛицо = СтароеФизлицо ИЛИ ТекКл.ФизЛицо = НовоеФизлицо Тогда			
			 СтрокиКУдалению.Добавить(ТекКл); 			
		КонецЕсли;
		    		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению из СтрокиКУдалению Цикл		
		КлиентОбъект.КонтактныеЛица.Удалить(СтрокаКУдалению);		
	КонецЦикла;
	
	НовКл = КлиентОбъект.КонтактныеЛица.Добавить();
	НовКЛ.ФизЛицо = НовоеФизЛицо;
	НовКл.ПравоПодписи = Истина;
	
	КлиентОбъект.Записать();
	
	СоотвДляЗамены = Новый Соответствие;
	СоотвДляЗамены.Вставить(СтароеФизлицо, НовоеФизлицо);		
	ОбщегоНазначения.ЗаменитьСсылки(СоотвДляЗамены, Новый Структура("СпособУдаления", "Непосредственно")); 	

	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	ПеречитатьСобытие = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайденПартнер(НовыйКлиент, СтарыйКлиент, НовоеФизлицо, СтароеФизлицо, ПеречитатьСобытие)
	
	Если НЕ(ЗначениеЗаполнено(СтарыйКлиент) И ЗначениеЗаполнено(СтароеФизлицо)) Тогда
		Возврат; //нашли при создании нового.
	КонецЕсли;   	
	
	НачатьТранзакцию();
	
	СоотвДляЗамены = Новый Соответствие;
	СоотвДляЗамены.Вставить(СтароеФизлицо, НовоеФизлицо);		
	СоотвДляЗамены.Вставить(СтарыйКлиент, НовыйКлиент);
	ОбщегоНазначения.ЗаменитьСсылки(СоотвДляЗамены, Новый Структура("СпособУдаления", "Непосредственно")); 	
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	ПеречитатьСобытие = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНайденныхФизЛицПоФИО(ОчищатьТаблицу = Истина, ПропуститьСтраницу)
	
	Если ОчищатьТаблицу Тогда
		НайденныеФизЛица.Очистить();
	КонецЕсли;
	
	Если НайденныеФизЛица.Количество() = 0 Тогда
		НовоеФизЛицо = НайденныеФизЛица.Добавить();
		НовоеФизЛицо.Представление = НСтр("ru = '< Продолжить создание нового ... >'");
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо,
	|	ЛОЖЬ КАК Использовать,
	|	ПРЕДСТАВЛЕНИЕ(ФизическиеЛица.Ссылка) КАК Представление
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|{ГДЕ
	|	ФизическиеЛица.Ссылка.* КАК ФизЛицо}";
	
	Построитель = Новый ПостроительЗапроса(ТекстЗапроса);
	
	Отбор = Построитель.Отбор.Добавить("ФизЛицо.Фамилия");
	Отбор.ВидСравнения = ВидСравнения.Содержит;
	Отбор.Использование = Истина;
	Отбор.Значение = Сред(ФизЛицоФамилия, 0, СтрДлина(ФизЛицоФамилия) - 1);
	
	Отбор = Построитель.Отбор.Добавить("ФизЛицо.Имя");
	Отбор.ВидСравнения = ВидСравнения.Содержит;
	Отбор.Использование = Истина;
	Отбор.Значение = Сред(ФизЛицоИмя, 1, СтрДлина(ФизЛицоИмя) - 2);
	
	Отбор = Построитель.Отбор.Добавить("ФизЛицо");
	Отбор.ВидСравнения = ВидСравнения.НеВСписке;
	Отбор.Использование = Истина;
		
	СписокНайденных = Новый СписокЗначений;
	СписокНайденных.ЗагрузитьЗначения(НайденныеФизЛица.Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
	СписокНайденных.Добавить(КонтактФизлицо);
	Отбор.Значение = СписокНайденных; 
	
	Запрос = Построитель.ПолучитьЗапрос();
	ТаблицаНайденных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаНайденных.Количество() Тогда
		ПропуститьСтраницу = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНайденных, НайденныеФизЛица);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНайденныхЮрЛиц()
	
	НайденныеПартнеры.Очистить();
	НовыйПартнер = НайденныеПартнеры.Добавить();
	НовыйПартнер.Представление = НСтр("ru = '< Продолжить создание нового ... >'");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникКонтрагенты.Ссылка.Владелец КАК Партнер,
	|	ЛОЖЬ КАК Использовать,
	|	ПРЕДСТАВЛЕНИЕ(СправочникКонтрагенты.Ссылка) КАК Представление
	|ИЗ
	|	Справочник.Контрагенты КАК СправочникКонтрагенты
	|{ГДЕ
	|	СправочникКонтрагенты.Ссылка.* КАК Контрагент}";
	
	Построитель = Новый ПостроительЗапроса(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(ЮрЛицоИНН) Тогда
		
		Отбор = Построитель.Отбор.Добавить("Контрагент.ИНН");
		Отбор.ВидСравнения = ВидСравнения.Равно;
		Отбор.Использование = Истина;
		Отбор.Значение = СокрЛП(ЮрЛицоИНН);
		
	Иначе
		
		Отбор = Построитель.Отбор.Добавить("Контрагент.Наименование");
		Отбор.ВидСравнения = ВидСравнения.Содержит;
		Отбор.Использование = Истина;
		Отбор.Значение = СокрЛП(ЮрЛицоНаименованиеСокр);
		
	КонецЕсли;
		
	Запрос = Построитель.ПолучитьЗапрос();
	ТаблицаНайденных = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНайденных, НайденныеПартнеры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНайденныхИП()
	
	НайденныеПартнеры.Очистить();
	НовыйПартнер = НайденныеПартнеры.Добавить();
	НовыйПартнер.Представление = НСтр("ru = '< Продолжить создание нового ... >'");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникКонтрагенты.Ссылка.Владелец КАК Партнер,
	|	ЛОЖЬ КАК Использовать,
	|	ПРЕДСТАВЛЕНИЕ(СправочникКонтрагенты.Ссылка) КАК Представление
	|ИЗ
	|	Справочник.Контрагенты КАК СправочникКонтрагенты
	|{ГДЕ
	|	СправочникКонтрагенты.Ссылка.* КАК Контрагент}";
	
	Построитель = Новый ПостроительЗапроса(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Отбор = Построитель.Отбор.Добавить("Контрагент.ФизЛицо");
		Отбор.ВидСравнения = ВидСравнения.Равно;
		Отбор.Использование = Истина;
		Отбор.Значение = ФизЛицо;
		
	ИначеЕсли ЗначениеЗаполнено(СокрЛП(ЮрЛицоИНН)) Тогда
		
		Отбор = Построитель.Отбор.Добавить("Контрагент.ИНН");
		Отбор.ВидСравнения = ВидСравнения.Содержит;
		Отбор.Использование = Истина;
		Отбор.Значение = СокрЛП(ЮрЛицоИНН);
	Иначе
		Возврат;
		
	КонецЕсли;
			
	Запрос = Построитель.ПолучитьЗапрос();
	ТаблицаНайденных = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНайденных, НайденныеПартнеры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНайденныхПартнеров_ПоискПоТелефону()
	
	НайденныеПартнеры.Очистить();
	
	Если РольДоступна("ПолныеПрава") Тогда
		
		НовыйПартнер = НайденныеПартнеры.Добавить();
		НовыйПартнер.Представление = НСтр("ru = '< Продолжить создание нового ... >'");
		
	КонецЕсли;
	
	ТаблицаКонтактнойИнформации = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"];
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтактнойИнформации Цикл
		
		Если Не СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Продолжить;
		КонецЕсли;                                               
		
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаТаблицы.ЗначенияПолей, СтрокаТаблицы.Вид);
		Если Не УправлениеКонтактнойИнформациейСлужебный.XDTOКонтактнаяИнформацияЗаполнена(ОбъектКИ) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерТелефонаДляОтбора = "";
		
		Телефон = ОбъектКИ.Состав;
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		Если Телефон <> Неопределено И Телефон.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			
			НомерТелефона = Телефон.Номер;
					
			Поз = Найти(НомерТелефона, ",");
			Если Поз <> 0 Тогда
				НомерТелефона = Лев(НомерТелефона, Поз-1);
			КонецЕсли;
			
			Поз = Найти(НомерТелефона, Символы.ПС);
			Если Поз <> 0 Тогда
				НомерТелефона = Лев(НомерТелефона, Поз-1);
			КонецЕсли;
			
			НомерТелефонаДляОтбора = Прав(УбратьРазделителиВНомерТелефона(НомерТелефона), 6);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(НомерТелефонаДляОтбора) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
			|	ЛОЖЬ КАК Использовать,
			|	ПРЕДСТАВЛЕНИЕ(ПартнерыКонтактнаяИнформация.Ссылка) КАК Представление,
			|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК Телефон
			|ИЗ
			|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
			|ГДЕ
			|	ПартнерыКонтактнаяИнформация.Тип = &Тип
			|{ГДЕ
			|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона}";
			
			Построитель = Новый ПостроительЗапроса(ТекстЗапроса);
			
			Отбор = Построитель.Отбор.Добавить("НомерТелефона");
			Отбор.ВидСравнения = ВидСравнения.Содержит;
			Отбор.Использование = Истина;
			Отбор.Значение = НомерТелефонаДляОтбора;
			
			Запрос = Построитель.ПолучитьЗапрос();
			Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
			ТаблицаНайденных = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаТЗ Из ТаблицаНайденных Цикл			
				СтрокаТЗ.Представление = СтрокаТЗ.Представление + " (" + СтрокаТЗ.Телефон + ")";			
			КонецЦикла;

			ТаблицаНайденных.Свернуть("Партнер, Использовать, Представление, Телефон");
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНайденных, НайденныеПартнеры);
			
		КонецЕсли;
		
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНайденныхФизЛицПоКонтактам(ПропуститьСтраницу)
	
	НайденныеФизЛица.Очистить();
	
	Если РольДоступна("ПолныеПрава") И Не ЗначениеЗаполнено(КонтактФизлицо) Тогда
		
		НовоеФизЛицо = НайденныеФизЛица.Добавить();
		НовоеФизЛицо.Представление = НСтр("ru = '< Продолжить создание нового ... >'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактФизлицо) Тогда
		
		НовоеФизЛицо = НайденныеФизЛица.Добавить();
		НовоеФизЛицо.Представление = "< Текущий контакт ... >";
		НовоеФизЛицо.ФизЛицо = КонтактФизлицо;
		НовоеФизЛицо.Использовать = Истина;
		
	КонецЕсли;
	
	ТаблицаКонтактнойИнформации = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"]; 	
	
	НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица));
	Для Каждого ТекТелефон Из НайденныеСтроки Цикл
		
		ТелефонДляПроверки = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ТекТелефон.Представление),10);
		
		Если НЕ ПустаяСтрока(ТелефонДляПроверки) Тогда  
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	сфпНомераТелефоновДляПоиска.Объект КАК ФизЛицо,
			|	сфпНомераТелефоновДляПоиска.НомерТелефона КАК Телефон,
			|	ПРЕДСТАВЛЕНИЕ(сфпНомераТелефоновДляПоиска.Объект) КАК Представление,
			|	ЛОЖЬ КАК Использовать
			|ИЗ
			|	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
			|ГДЕ
			|	сфпНомераТелефоновДляПоиска.НомерТелефона = &НомерТелефона
			|	И сфпНомераТелефоновДляПоиска.УПДК_Порядок = 2
			|	И сфпНомераТелефоновДляПоиска.Объект <> &КонтактФизлицо";
			
			Запрос.УстановитьПараметр("НомерТелефона", ТелефонДляПроверки);
			Запрос.УстановитьПараметр("КонтактФизлицо", КонтактФизлицо);
			
			ТаблицаНайденных = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаТЗ Из ТаблицаНайденных Цикл			
				
				СтрокаТЗ.Представление = СтрокаТЗ.Представление + " (+7" + СтрокаТЗ.Телефон + ")";
				ПропуститьСтраницу = Ложь;
				
			КонецЦикла;

			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНайденных, НайденныеФизЛица); 
			
		КонецЕсли; 	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение, ПропустилиСтраницу = Ложь)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 1 Тогда
		ПорядковыйНомерПерехода = 1;
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее, ПропустилиСтраницу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее, ПропустилиСтраницу)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее, ПропустилиСтраницу);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельМастера.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	
	СтраницаНавигации = СтрокаПереходаТекущая.СтраницаНавигации;
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтраницаНавигации.ИмяСтраницыНавигации];
	
	УстановитьДоступностьКоманд(СтраницаНавигации.ДоступныеКоманды, Истина);
	УстановитьДоступностьКоманд(СтраницаНавигации.НеДоступныеКоманды, Ложь);
			
	КнопкаПоУмолчанию = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, СтраницаНавигации.КомандаПоУмолчанию);
	Если КнопкаПоУмолчанию <> Неопределено Тогда
		Если НЕ КнопкаПоУмолчанию.КнопкаПоУмолчанию Тогда
			КнопкаПоУмолчанию.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
			
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
		Элементы.ПанельОписания.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
	КонецЕсли;
	
	Если РеквизитыКПроверке.Количество() Тогда
		УстановитьАвтоОтметкуНезаполненныхСтраницы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее, ПропустилиСтраницу)
	
	// Обработчики событий переходов
	Если Не ПропустилиСтраницу Тогда
		
		Если ЭтоПереходДалее Тогда
			СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
			Если СтрокиПерехода.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			СтрокаПерехода = СтрокиПерехода[0];
			// обработчик ПриПереходеДалее
			ПроверяемыеРеквизиты = Новый Массив(РеквизитыКПроверке);
			Отказ = Ложь;
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
				ОбработчикПриПереходеДалее(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее, ПроверяемыеРеквизиты, Отказ);
				Если Отказ Тогда
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			РеквизитыКПроверке = Новый ФиксированныйМассив(ПроверяемыеРеквизиты);
			Отказ = Отказ Или Не ПроверитьЗаполнение();
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		Иначе
			СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
			Если СтрокиПерехода.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			СтрокаПерехода = СтрокиПерехода[0];
			// обработчик ПриПереходеНазад
			ПроверяемыеРеквизиты = Новый Массив;
			Отказ = Ложь;
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
				ОбработчикПриПереходеНазад(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад, ПроверяемыеРеквизиты, Отказ);
				Если Отказ Тогда
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			РеквизитыКПроверке = Новый ФиксированныйМассив(ПроверяемыеРеквизиты);
			Отказ = Отказ Или Не ПроверитьЗаполнение();
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	// обработчик ПриОткрытии
	ПроверяемыеРеквизиты = Новый Массив;
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		ОбработчикПриОткрытии(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии, Отказ, ПропуститьСтраницу, ПроверяемыеРеквизиты, ЭтоПереходДалее);
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1, Истина);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1, Истина);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыКПроверке = Новый ФиксированныйМассив(ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАвтоОтметкуНезаполненныхСтраницы()
	УстановитьАвтоОтметкуНезаполненныхРекурсивно(Элементы.ПанельМастера.ТекущаяСтраница, РеквизитыКПроверке);
КонецПроцедуры

&НаСервере
Процедура УстановитьАвтоОтметкуНезаполненныхРекурсивно(ЭлементФормы, ПроверяемыеРеквизиты)
	
	Для Каждого ПодчиненныйЭлемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы") И
			ПодчиненныйЭлемент.Вид = ВидПоляФормы.ПолеВвода	Тогда
			
			Если Не ПустаяСтрока(ПодчиненныйЭлемент.ПутьКДанным) И
				Не ПроверяемыеРеквизиты.Найти(ПодчиненныйЭлемент.ПутьКДанным) = Неопределено Тогда
				ПодчиненныйЭлемент.АвтоОтметкаНезаполненного = Истина;			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Или 
			ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы") Тогда
			УстановитьАвтоОтметкуНезаполненныхРекурсивно(ПодчиненныйЭлемент, ПроверяемыеРеквизиты);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКоманд(Знач Команды, Доступность)
	
	Позиция = Найти(Команды, ",");
	Пока Позиция > 0 Цикл
		Команда = СокрЛП(Лев(Команды, Позиция - 1));
		Если Не ПустаяСтрока(Команда) Тогда
			Кнопка = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, Команда);
			Если Кнопка <> Неопределено Тогда
				Кнопка.Доступность = Доступность;
			КонецЕсли;	
		КонецЕсли;
		Команды = Сред(Команды, Позиция + 1);
		Позиция = Найти(Команды, ",");
	КонецЦикла;

	Если Не ПустаяСтрока(Команды) Тогда
		Кнопка = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница,  СокрЛП(Команды));
		Если Кнопка <> Неопределено Тогда
			Кнопка.Доступность = Доступность;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ТаблицаПереходовУдалитьСтрокиПослеНомера(ТаблицаПереходов, ПорядковыйНомерПерехода)

	КоличествоИтераций = -(ТаблицаПереходов.Количество() - 1);
	Для Сч = КоличествоИтераций По 0 Цикл
		
		ИндексСтроки = -Сч;
		СтрокаПереходов = ТаблицаПереходов.Получить(ИндексСтроки);
		Если СтрокаПереходов.ПорядковыйНомерПерехода >= ПорядковыйНомерПерехода Тогда
			ТаблицаПереходов.Удалить(ИндексСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) – Число. Порядковый номер перехода, который соответствует текущему шагу перехода
//  ИмяОсновнойСтраницы (обязательный) – Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода
//  ИмяСтраницыНавигации (обязательный) – Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода
//  ИмяСтраницыДекорации (необязательный) – Строка. Имя страницы панели "ПанельДекорации", которая соответствует текущему номеру перехода
//  ИмяОбработчикаПриОткрытии (необязательный) – Строка. Имя функции-обработчика события открытия текущей страницы помощника
//  ИмяОбработчикаПриПереходеДалее (необязательный) – Строка. Имя функции-обработчика события перехода на следующую страницу помощника
//  ИмяОбработчикаПриПереходеНазад (необязательный) – Строка. Имя функции-обработчика события перехода на предыдущую страницу помощника
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ТаблицаПереходовНоваяСтрока(ТаблицаПереходов, 
									ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									Знач СтраницаНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = ""
									)
	//
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.СтраницаНавигации       = СтраницаНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ?(ПустаяСтрока(ИмяОбработчикаПриПереходеДалее), ИмяОсновнойСтраницы + "ПриПереходеДалее", ИмяОбработчикаПриПереходеДалее);
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ?(ПустаяСтрока(ИмяОбработчикаПриПереходеНазад), ИмяОсновнойСтраницы + "ПриПереходеНазад", ИмяОбработчикаПриПереходеНазад);
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ?(ПустаяСтрока(ИмяОбработчикаПриОткрытии), 	 ИмяОсновнойСтраницы + "ПриОткрытии",	   ИмяОбработчикаПриОткрытии);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруСтраницыНавигации(ИмяСтраницыНавигации, ДоступныеКоманды, НедоступныеКоманды = "", КомандаПоУмолчанию)
	
	СтраницаНавигации = Новый Структура;
	СтраницаНавигации.Вставить("ИмяСтраницыНавигации", ИмяСтраницыНавигации);
	СтраницаНавигации.Вставить("ДоступныеКоманды", ДоступныеКоманды);
	СтраницаНавигации.Вставить("НедоступныеКоманды", НедоступныеКоманды);
	СтраницаНавигации.Вставить("КомандаПоУмолчанию", КомандаПоУмолчанию);
	
	Возврат СтраницаНавигации
		
КонецФункции

&НаКлиенте
Функция ПолучитьФильтрИзображений() Экспорт
	
	//Не переносить строки!
	Возврат НСтр("ru = 'Все картинки (*.bmp;*.jpg;*.jpeg;*.gif;*.pdf;*.png)|*.bmp;*.jpg;*.jpeg;*.gif;*.pdf;*.png|Формат bmp (*.bmp)|*.bmp|Формат jpeg (*.jpg;*.jpeg)|*.jpg;*.jpeg|Формат gif (*.gif)|*.gif|Формат pdf (*.pdf)|*.pdf|Формат png (*.png)|*.png'");

КонецФункции

// Процедура открывает форму списка банков для ручного выбора
//
&НаКлиенте
Процедура ОткрытьФормуВыбораБанка(ЭтоНеБанкДляРасчетов)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(ЭтоНеБанкДляРасчетов, БанковскийСчетБанк, БанковскийСчетБанкДляРасчетов));
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныхВыбор", Ложь);
	
	ОткрытьФорму("Справочник.Банки.ФормаВыбора", ПараметрыФормы, ?(ЭтоНеБанкДляРасчетов, Элементы.БанковскийСчетБИКБанка, Элементы.БанковскийСчетБИКБанкаДляРасчетов));
	
КонецПроцедуры // ОткрытьФормуВыбораБанка()

// Процедура заполняет значения полей БИК и КоррСчет.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьБИК(Банк, Бик)
	
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Бик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
		
КонецПроцедуры // ЗаполнитьБИКиКоррСчет()

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСозданиеФизЛица(ТипКонтрагента) 
	Возврат ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
КонецФункции

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение:
//     Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

&НаСервере
Функция РаспознатьНаСервере(АдрВремОсновной, АдрВремДополнительной, РасширениеОсновной, РасширениеДополнительной)
		
	Если ЗначениеЗаполнено(АдрВремОсновной) Тогда
	    СтруктураОсновная = УПДК_ФизическиеЛица.РаспознатьПаспортныеДанные(АдрВремОсновной, РасширениеОсновной);
		Если ТипЗнч(СтруктураОсновная) = Тип("Структура") Тогда
			СтруктураОсновная.Свойство("Номер", ФизЛицоДокументНомер);
			СтруктураОсновная.Свойство("Серия", ФизЛицоДокументСерия);
			
			Если СтруктураОсновная.Свойство("Выдан") Тогда
				ФизЛицоДокументКемВыдан = Справочники.УдостоверениеЛичностиКемВыдан.НайтиПоНаименованию(СтруктураОсновная.Выдан, Истина);
			    Если Не ЗначениеЗаполнено(ФизЛицоДокументКемВыдан) Тогда
				    НовУдостоверение = Справочники.УдостоверениеЛичностиКемВыдан.СоздатьЭлемент();
					НовУдостоверение.Наименование = СтруктураОсновная.Выдан;
				    НовУдостоверение.Записать();
					ФизЛицоДокументКемВыдан = НовУдостоверение.Ссылка;
				КонецЕсли;
			КонецЕсли;
			СтруктураОсновная.Свойство("ДатаВыдачи", ФизЛицоДокументДатаВыдачи);
			СтруктураОсновная.Свойство("КодПодразделения", ФизЛицоДокументКодПодразделения);
			СтруктураОсновная.Свойство("ДатаРождения", ФизЛицоДатаРождения);
			СтруктураОсновная.Свойство("МестоРождения", ФизЛицоДокументМестоРождения);
			СтруктураОсновная.Свойство("Имя", ФизЛицоИмя);
			СтруктураОсновная.Свойство("Фамилия", ФизЛицоФамилия);
			СтруктураОсновная.Свойство("Отчество", ФизЛицоОтчество);
			ФИОНов = ?(ЗначениеЗаполнено(ФизЛицоФамилия), ФизЛицоФамилия, "") + " " + ?(ЗначениеЗаполнено(ФизЛицоИмя), ФизЛицоИмя, "") + " " + ?(ЗначениеЗаполнено(ФизЛицоОтчество), ФизЛицоОтчество, "");
			Если ФИОНов <> ФИО Тогда
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ФИО распознано. Проверьте правильность");
				ФИО = ФИОНов;
			КонецЕсли;
			Пол = "";
			СтруктураОсновная.Свойство("Пол", Пол);
			Если ЗначениеЗаполнено(Пол) Тогда
			    Если СтрНайти(НРег(Пол), "муж") > 0 Тогда
				    ФизЛицоПол = Перечисления.ПолФизическогоЛица.Мужской;
				Иначе	
				    ФизЛицоПол = Перечисления.ПолФизическогоЛица.Женский;
				КонецЕсли; 
			КонецЕсли;
			
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные основной страницы распознаны. Проверьте правильность");
		Иначе	
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось распознать изображение основной страницы");
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(АдрВремДополнительной) Тогда
		СтруктураДополнительная = УПДК_ФизическиеЛица.РаспознатьПаспортныеДанные(АдрВремДополнительной, РасширениеДополнительной);
		Если ТипЗнч(СтруктураДополнительная) = Тип("Структура") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные дополнительной страницы распознаны. Проверьте правильность");
			Если СтруктураДополнительная.Свойство("АдресРегистрации") Тогда				
				Возврат СтруктураДополнительная.АдресРегистрации;
			КонецЕсли;
		Иначе	
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось распознать изображение дополнительной страницы");
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Обработчик для события формы ОбработкаПроверкиЗаполненияНаСервере
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации
//    Объект - Произвольный - Объект-владелец контактной информации
//	  ИмяГруппыРазмещения - Строка - Имя группы, в которой размещены элементы проверяемых реквизитов. Если не указано,
//	 								то проверяются все
//
Процедура КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(Объект, Отказ, ИмяГруппыРазмещения) Экспорт
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ, ИмяГруппыРазмещения);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияПриЧтенииНаСервере(ТекущийОбъект, ИмяЭлементаДляразмещения, ЗаполнятьУдостоверение = Ложь)
    // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, ИмяЭлементаДляразмещения);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если ЗаполнятьУдостоверение Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	ДокументыФизическихЛиц.Серия КАК Серия,
		                      |	ДокументыФизическихЛиц.Номер КАК Номер,
		                      |	ДокументыФизическихЛиц.ДатаВыдачи КАК ДатаВыдачи,
		                      |	ДокументыФизическихЛиц.СрокДействия КАК СрокДействия,
		                      |	ДокументыФизическихЛиц.КодПодразделения КАК КодПодразделения,
		                      |	ДокументыФизическихЛиц.МестоРождения КАК МестоРождения,
		                      |	ДокументыФизическихЛиц.КемВыдан КАК КемВыдан
		                      |ИЗ
		                      |	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		                      |ГДЕ
		                      |	ДокументыФизическихЛиц.Физлицо = &Физлицо
		                      |	И (ДокументыФизическихЛиц.ВидДокумента = &ВидДокумента
		                      |			ИЛИ &ВидДокумента = НЕОПРЕДЕЛЕНО)
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	ДокументыФизическихЛиц.Период УБЫВ");
		
		Запрос.УстановитьПараметр("Физлицо", ТекущийОбъект);
		Запрос.УстановитьПараметр("ВидДокумента", ФизЛицоДокументВид);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
		    Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ФизЛицоДокументСерия = Выборка.Серия;
		    ФизЛицоДокументНомер = Выборка.Номер;
			ФизЛицоДокументДатаВыдачи = Выборка.ДатаВыдачи;
			ФизЛицоДокументСрокДействия = Выборка.СрокДействия;
			ФизЛицоДокументКодПодразделения = Выборка.КодПодразделения;
			ФизЛицоДокументКемВыдан = Выборка.КемВыдан;
			ФизЛицоДокументМестоРождения = Выборка.МестоРождения;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент) Экспорт
        УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка) Экспорт
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка) Экспорт
    УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда) Экспорт
    УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Партнер, Результат);
КонецПроцедуры

#КонецОбласти

