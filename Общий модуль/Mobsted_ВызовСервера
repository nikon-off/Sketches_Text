
Функция ПолучитьИдентификаторОбъекта(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Mobsted_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.Mobsted_ИдентификаторыОбъектов КАК Mobsted_ИдентификаторыОбъектов
	|ГДЕ
	|	Mobsted_ИдентификаторыОбъектов.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Возврат Формат(ВыборкаДетальныеЗаписи.Идентификатор, "ЧГ=0");
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОбъект(Знач Идентификатор) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Число(Идентификатор);
	КонецЕсли;		
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Mobsted_ИдентификаторыОбъектов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.Mobsted_ИдентификаторыОбъектов КАК Mobsted_ИдентификаторыОбъектов
	|ГДЕ
	|	Mobsted_ИдентификаторыОбъектов.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Возврат ВыборкаДетальныеЗаписи.Объект;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УстановитьИдентификаторОбъекта(Объект, Знач Идентификатор) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Число(Идентификатор);
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.Mobsted_ИдентификаторыОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Объект = Объект;
	Запись.Идентификатор = Идентификатор;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьСсылкуДляВхода(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Mobsted_ИдентификаторыОбъектов.СсылкаДляВхода КАК СсылкаДляВхода
	|ИЗ
	|	РегистрСведений.Mobsted_ИдентификаторыОбъектов КАК Mobsted_ИдентификаторыОбъектов
	|ГДЕ
	|	Mobsted_ИдентификаторыОбъектов.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Возврат ВыборкаДетальныеЗаписи.СсылкаДляВхода;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


//+Никонов  Получаем ссылку из ответа. 
//В ПолучаемМассив.Найти("ame") в массиве находится элемент Name. Получается так из-за того что очищаю 
//ПреобразоватьСтруктуруЗаявки от лишних символов 
Функция ПолучаемСсылкуИзСтруктурыЗаявки(ПреобразоватьСтруктуруЗаявки) Экспорт 
	
	УдаляемЛишниеЗнаки = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ПреобразоватьСтруктуруЗаявки,"{",""),"}",""),"""",""),"S",""),"N","");
	ПолучаемМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УдаляемЛишниеЗнаки,,Истина,Истина);
	ПредыдущийЭлементМассива = ПолучаемМассив.Найти("ame");
	Если ТипЗнч(ПредыдущийЭлементМассива) = Тип("Число") Тогда 
		НужныйЭлементМассива = ПолучаемМассив[ПредыдущийЭлементМассива + 1];
	Иначе
		НужныйЭлементМассива = "";
	КонецЕсли;
	
	Возврат НужныйЭлементМассива
КонецФункции // ()
//-Никонов

//+Никонов. Возвращает ссылку на присоединённый файлы для гарантийных работ
Функция ВернутьСсылкуПрисоединенногоФайла(ПараметрыСинхронизации, Инд) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПДК_ПретензияПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	УПДК_ПретензияПрисоединенныеФайлы.ПометкаУдаления КАК ПометкаУдаления,
	|	УПДК_ПретензияПрисоединенныеФайлы.Наименование КАК Наименование,
	|	УПДК_ПретензияПрисоединенныеФайлы.Автор КАК Автор,
	|	УПДК_ПретензияПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
	|	УПДК_ПретензияПрисоединенныеФайлы.Описание КАК Описание,
	|	УПДК_ПретензияПрисоединенныеФайлы.ПутьКФайлу КАК ПутьКФайлу
	|ИЗ
	|	Справочник.УПДК_ПретензияПрисоединенныеФайлы КАК УПДК_ПретензияПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УПДК_Претензия КАК УПДК_Претензия
	|		ПО УПДК_ПретензияПрисоединенныеФайлы.ВладелецФайла = УПДК_Претензия.Ссылка
	|ГДЕ
	|	УПДК_ПретензияПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И УПДК_ПретензияПрисоединенныеФайлы.Служебное ПОДОБНО &Индекс
	|	И УПДК_ПретензияПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	УПДК_ПретензияПрисоединенныеФайлы.ДатаСоздания";
	Индекс = "%" + Инд;
	ВладелецФайла = ПараметрыСинхронизации.ОбъектСинхронизации;
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("Индекс", Индекс);
	eventId = ПолучитьИдентификаторОбъекта(ВладелецФайла);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	СсылкаНаФото = Выборка.Описание;
		Если Не ЗначениеЗаполнено(СсылкаНаФото) Тогда
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()); 
			
			HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
			
			Адрес = Выборка.Ссылка;
			
			Если ЗначениеЗаполнено(Адрес) Тогда
				ДД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Адрес);
				
				HTTPЗапрос = Новый HTTPЗапрос("api/v8/events/eventfile");				
				HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
				HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
				
				б64Макет = Base64Строка(ДД);
				
				мСтрока = "applicationId=" + ПараметрыСинхронизации.ИДБазы 
				+ "&eventId=" + eventId 
				+ "&fileName=photoclaims&fileExt=" + Адрес.Расширение
				+ "&fileBody=" + КодироватьСтроку(Строка(б64Макет), СпособКодированияСтроки.КодировкаURL); 

				HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
				
				мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
				
				ЧтениеJSON	= Новый ЧтениеJSON;	
				ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
				СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
				ЧтениеJSON.Закрыть();
				
				ПреобразоватьСтруктуруЗаявки = ЗначениеВСтрокуВнутр(СтруктураЗаявки);
				url_заявки = Mobsted_ВызовСервера.ПолучаемСсылкуИзСтруктурыЗаявки(ПреобразоватьСтруктуруЗаявки);
				СсылкаНаФото = "https://" + ПараметрыСинхронизации.HTTPServer + url_заявки;
				
				ОбъектФотоВСправочнике = Адрес.ПолучитьОбъект();
				ОбъектФотоВСправочнике.Описание = СсылкаНаФото;
				ОбъектФотоВСправочнике.Записать();
				
			Иначе
				СсылкаНаФото = "";
			КонецЕсли;
		Иначе
			СсылкаНаФото = Выборка.Описание;
		КонецЕсли;
	Возврат СсылкаНаФото;
КонецФункции
//-Никонов 

//+Никонов
Функция СтруктураЗаписьJson(Структура) Экспорт
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json = Запись.Закрыть();
	
	Возврат Json;
	
КонецФункции // СтруктураJson()

Процедура ПолучитьОтветДляЗапроса(Ответ, Json) Экспорт

	Ответ.УстановитьТелоИзСтроки(Json);
	Ответ.КодСостояния = 200;
	Ответ.Заголовки.Вставить("Content-Type", " application/json");

КонецПроцедуры

Процедура ЗаписатьЭтапСделки(Сделка, ЭтапВоронки, ДанныеЗаполнения) Экспорт
	
	Набор = РегистрыСведений.СделкиОбщая.СоздатьНаборЗаписей();
	
	Набор.Отбор.Сделка.Установить(Сделка);
	Набор.Прочитать();
	Набор.Очистить();
	
	//ВоронкаПоУмолчанию = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("ВоронкаПродаж");
	//
	//ПозицияТекущегоЭтапа = ВоронкаПоУмолчанию.Найти(ЭтапВоронки);
	//ТекущийЭтап =  ВоронкаПоУмолчанию.Этапы.Получить(ПозицияТекущегоЭтапа).Этап;
	
	Запись = Набор.Добавить();
	
	Запись.Сделка = Сделка;
	Запись.РегистраторСделки = Сделка;
	Запись.Этап = ЭтапВоронки;
	Запись.Клиент = ДанныеЗаполнения.Клиент;
	Запись.Дата = ТекущаяДатаСеанса();
	Запись.Ответственный = ДанныеЗаполнения.Ответственный;
	//Запись.АгентствоНедвижимости = ДанныеЗаполнения.АгентствоНедвижимости;
	
	Набор.Записать(); 
	
	Для Каждого ТекЗапись из Набор Цикл
		
		НаборЗаписей = РегистрыСведений.СделкиИстория.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.РегистраторСделки.Установить(ТекЗапись.РегистраторСделки);
		НаборЗаписей.Отбор.Этап.Установить(ТекЗапись.Этап);
		
		//Используем по договору для Регистрации и чтобы небыло конфликтов у брони при смене объекта недвижимости. 
		//История о свемене объекта недвижимости нам не интереса
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() Тогда
			Запись = НаборЗаписей[0];
		Иначе
			Запись = НаборЗаписей.Добавить();
			Запись.Период = ТекущаяДатаСеанса();
		КонецЕсли;  
		
		ЗаполнитьЗначенияСвойств(Запись, ТекЗапись,,"Период");
		
		НаборЗаписей.Записать();		
		
	КонецЦикла;	
	
КонецПроцедуры 

Функция CделатьЗапросНаСервер(Метод, мСтрока, ПараметрыСинхронизации, ЗаписьЖурнала) Экспорт
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос(Метод); 
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded"); 	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если мРезультат.КодСостояния = 200 Тогда
		Mobsted_Сервер.ОчиститьMobsted_ДанныеДляСинхронизации(ПараметрыСинхронизации.ОбъектСинхронизации);
	Иначе
		СтруктураЗаявки = Неопределено;
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, мРезультат.ПолучитьТелоКакСтроку()); 
		Mobsted_Сервер.ОчиститьMobsted_ДанныеДляСинхронизации(ПараметрыСинхронизации.ОбъектСинхронизации);
		Возврат СтруктураЗаявки;
	КонецЕсли;				
	
	ЧтениеJSON	= Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	JsonОтвет = СтруктураЗаписьJson(СтруктураЗаявки);
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, JsonОтвет);
	Возврат СтруктураЗаявки;
	
КонецФункции // ()

//-Никонов



