
Процедура ОбработчикMobsted_СинхронизацияОбъектов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Mobsted_СинхронизацияОбъектов);  
	
	ОбработчикСинхронизацияОбъектов();	
	
КонецПроцедуры

Процедура ОбработчикСинхронизацияОбъектов() Экспорт
	
	Mobsted_ИДБазы = Константы.Mobsted_ИДБазы.Получить();
	Mobsted_HTTPServer = Константы.Mobsted_HTTPServer.Получить();
	Mobsted_ИДБазыАгентов = Константы.Mobsted_ИДБазыАгентов.Получить();
	Authorization = "Basic " + Константы.Mobsted_Authorization.Получить();
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("ИДБазы", Mobsted_ИДБазы);
	ПараметрыСинхронизации.Вставить("ИДБазыАгентов", Mobsted_ИДБазыАгентов);
	ПараметрыСинхронизации.Вставить("Authorization", Authorization);
	ПараметрыСинхронизации.Вставить("ОбъектСинхронизации", Неопределено);
	ПараметрыСинхронизации.Вставить("HTTPServer", Mobsted_HTTPServer);
	
	
	Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Mobsted_ДанныеДляСинхронизации.ТипДанных КАК ТипДанных,
		|	Mobsted_ДанныеДляСинхронизации.ОбъектСинхронизации КАК ОбъектСинхронизации
		|ИЗ
		|	РегистрСведений.Mobsted_ДанныеДляСинхронизации КАК Mobsted_ДанныеДляСинхронизации";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();			
		
		ПараметрыСинхронизации.ОбъектСинхронизации = Выборка.ОбъектСинхронизации;
		
		//НаборЗаписей = РегистрыСведений.Mobsted_ДанныеДляСинхронизации.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.ОбъектСинхронизации.Установить(Выборка.ОбъектСинхронизации);
		//НаборЗаписей.Записать();
		
		Если 	  ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("СправочникСсылка.УПДК_ОбъектыНедвижимости") Тогда 			
			ОбновлениеПолейОбъектаНедвижимости(ПараметрыСинхронизации);	
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("СправочникСсылка.Планировки") Тогда			
			ОбновлениеПолейПланировки(ПараметрыСинхронизации);		
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("СправочникСсылка.УПДК_РайоныСтроительства") Тогда			
			ОбновлениеПолейРайоныСтроительства(ПараметрыСинхронизации);			
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("СправочникСсылка.УПДК_ОбъектыСтроительства") Тогда			
			ОбновлениеПолейОбъектыСтроительства(ПараметрыСинхронизации);			
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("СправочникСсылка.УПДК_СекцииОбъектов") Тогда 			
			ОбновлениеПолейСекцииОбъектов(ПараметрыСинхронизации);
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("СправочникСсылка.CRM_ПричиныОтказов") Тогда			
			ОбновлениеПолейПричинОтказов(ПараметрыСинхронизации);
			//++Никонов
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("СправочникСсылка.Партнеры") Тогда			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ОбъектСинхронизации, "АгентствоНедвижимости") Тогда
				ОбновлениеПолейАгентов(ПараметрыСинхронизации);
			Иначе
				ОбновлениеПолейПартнеры(ПараметрыСинхронизации);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Если ЗначениеЗаполнено(Справочники.Партнеры.ПолучитьАгенствоПоФизЛицу(Выборка.ОбъектСинхронизации)) Тогда
				ОбновлениеПолейАгентов(ПараметрыСинхронизации);
			Иначе
				ОбновлениеПолейФизическиеЛица(ПараметрыСинхронизации);
			КонецЕсли;			
			//++Никонов
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("СправочникСсылка.Пользователи") Тогда			
			ОбновлениеПолейПользователи(ПараметрыСинхронизации);
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("ДокументСсылка.УПДК_ЗаказКлиента") Тогда 
			СобытиеБронирование(ПараметрыСинхронизации);			
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("ДокументСсылка.РеализацияНедвижимости") Тогда 
			СобытиеДоговор(ПараметрыСинхронизации);
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("ДокументСсылка.CRM_Событие") Тогда
			Событие(ПараметрыСинхронизации);
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("ДокументСсылка.Сделка") Тогда 			
			Сделка(ПараметрыСинхронизации); 
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 			
			Задача(ПараметрыСинхронизации);     
		ИначеЕсли ТипЗнч(Выборка.ОбъектСинхронизации) = Тип("ДокументСсылка.УПДК_Претензия") Тогда 			
			Гарантия(ПараметрыСинхронизации); 
		КонецЕсли;
		
	КонецЦикла;    	
	
КонецПроцедуры

Процедура ОбновлениеПолейРайоныСтроительства(ПараметрыСинхронизации)
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_РайоныСтроительства.НаименованиеПолное КАК НаименованиеПолное,
	|	УПДК_РайоныСтроительства.feed_description_main_text КАК feed_description_main_text,
	|	УПДК_РайоныСтроительства.feed_sales_phone КАК feed_sales_phone,
	|	УПДК_РайоныСтроительства.feed_sales_address КАК feed_sales_address,
	|	УПДК_РайоныСтроительства.Архив КАК Архив
	|ИЗ
	|	Справочник.УПДК_РайоныСтроительства КАК УПДК_РайоныСтроительства
	|ГДЕ
	|	УПДК_РайоныСтроительства.Ссылка = &ОбъектСинхронизации";
	
	Запрос.Параметры.Вставить("ОбъектСинхронизации", ОбъектСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ИДбазы = ПараметрыСинхронизации.ИДбазы;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate"); 
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded"); 	
	
	Структура = Новый Структура;
	Структура.Вставить("ApplicationId", ИДбазы);
	Структура.Вставить("Тип_Объекта", "ЖК");
	//Структура.Вставить("ID_ЖК", ИДбазы + "jk" + XMLСтрока(ОбъектСинхронизации)); 
	Структура.Вставить("ID_ЖК",XMLСтрока(ОбъектСинхронизации));
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть();
	
	Структура = Новый Структура;
	Структура.Вставить("ID_Застройщика", ИДбазы + "com" + ИДбазы);
	Структура.Вставить("Название_ЖК", Строка(Выборка.НаименованиеПолное));
	Структура.Вставить("Статус", "В продаже");
	Структура.Вставить("Описание_квартиры", Строка(Выборка.feed_description_main_text));	
	Структура.Вставить("Телефон", Строка(Выборка.feed_sales_phone));
	Структура.Вставить("Адрес", Строка(Выборка.feed_sales_address));  	
	Структура.Вставить("Архив", Выборка.Архив); 		
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();
	
	мСтрока = "create=" + Json1 + "&update=" + Json2;	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПолейРайоныСтроительства", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();   	
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
	
	Если мРезультат.КодСостояния = 200 Тогда
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
	Иначе
		ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
	КонецЕсли;	
	
	ЗаписатьИД(СтруктураЗаявки.response, ОбъектСинхронизации, ПараметрыСинхронизации, Истина);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПДК_РайоныСтроительстваfeed_images.ИзображениеПрисоединенныйФайл КАК ИзображениеПрисоединенныйФайл
	|ИЗ
	|	Справочник.УПДК_РайоныСтроительства.feed_images КАК УПДК_РайоныСтроительстваfeed_images
	|ГДЕ
	|	УПДК_РайоныСтроительстваfeed_images.НомерСтроки = 1
	|	И УПДК_РайоныСтроительстваfeed_images.Ссылка = &Ссылка
	|	И УПДК_РайоныСтроительстваfeed_images.ИзображениеПрисоединенныйФайл <> ЗНАЧЕНИЕ(Справочник.УПДК_РайоныСтроительстваПрисоединенныеФайлы.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПФайл = ВыборкаДетальныеЗаписи.ИзображениеПрисоединенныйФайл;
		ДД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ПФайл);
		
		HTTPЗапрос = Новый HTTPЗапрос("api/v8/objects/objectfile");				
		HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		б64Макет = Base64Строка(ДД);
		
		мСтрока = "applicationId=" + ПараметрыСинхронизации.ИДБазы 
		+ "&objectId=" + Формат(Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ПараметрыСинхронизации.ОбъектСинхронизации), "ЧГ=0") 
		+ "&fileName=photoplan&fileExt=" + ПФайл.Расширение
		+ "&fileColumn=" + КодироватьСтроку("Фото_квартиры", СпособКодированияСтроки.КодировкаURL)
		+ "&fileBody=" + КодироватьСтроку(Строка(б64Макет), СпособКодированияСтроки.КодировкаURL); 
		
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеИзображенияРайона", ТекущаяДатаСеанса(), Лев(мСтрока, 500));
		
		мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть(); 		
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеПолейОбъектыСтроительства(ПараметрыСинхронизации)
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_ОбъектыСтроительства.Владелец КАК Владелец,
	|	УПДК_ОбъектыСтроительства.СрокВводаВЭксплуатацию КАК СрокВводаВЭксплуатацию,
	|	УПДК_ОбъектыСтроительства.СрокОкончанияСтроительства КАК СрокОкончанияСтроительства,
	|	УПДК_ОбъектыСтроительства.Архив КАК Архив
	|ИЗ
	|	Справочник.УПДК_ОбъектыСтроительства КАК УПДК_ОбъектыСтроительства
	|ГДЕ
	|	УПДК_ОбъектыСтроительства.Ссылка = &ОбъектСинхронизации";
	
	Запрос.Параметры.Вставить("ОбъектСинхронизации", ОбъектСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ИДбазы = ПараметрыСинхронизации.ИДБазы;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate"); 
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
	
	Структура = Новый Структура;
	Структура.Вставить("ApplicationId", ИДбазы);
	Структура.Вставить("Тип_Объекта", "ГП");
	//Структура.Вставить("ID_ГП", ИДбазы + "gp" + Гуид(ОбъектСинхронизации));	
	Структура.Вставить("ID_ГП",Гуид(ОбъектСинхронизации));
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть(); 
	
	Структура = Новый Структура;	
	Структура.Вставить("ID_Застройщика", ИДбазы + "com" + ИДбазы);  
	//Структура.Вставить("ID_ЖК", ИДбазы + "jk" + Гуид(Выборка.Владелец));
	Структура.Вставить("ID_ЖК", Гуид(Выборка.Владелец));
	Структура.Вставить("Срок_Ввода_в_Эксплуатацию",  Формат(Выборка.СрокВводаВЭксплуатацию,"ДФ=yyyy-MM-dd"));
	Структура.Вставить("Срок_Окончания_Строительства",  Формат(Выборка.СрокОкончанияСтроительства,"ДФ=yyyy-MM-dd"));
	//Структура.Вставить("Колво_Этажей", ОбъектСинхронизации.КоличествоЭтажей);
	//Структура.Вставить("Способ_Строительства",  Строка(ОбъектСинхронизации.СпособСтроительства));
	Структура.Вставить("Наименование_ГП", Строка(ОбъектСинхронизации));
	//Структура.Вставить("Адрес_ГП",  Строка(ОбъектСинхронизации.СтроительныйАдрес));
	Структура.Вставить("Архив", Выборка.Архив);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();
	
	
	мСтрока = "create=" + Json1 + "&update=" + Json2;
	
	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПолейОбъектыСтроительства", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();   	
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
	
	Если мРезультат.КодСостояния = 200 Тогда
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
	Иначе
		ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
	КонецЕсли;
	
	ЗаписатьИД(СтруктураЗаявки.response, ОбъектСинхронизации, ПараметрыСинхронизации, Истина);		
	
КонецПроцедуры  

Процедура ОбновлениеПолейСекцииОбъектов(ПараметрыСинхронизации)
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_СекцииОбъектов.Владелец КАК ГП,
	|	УПДК_СекцииОбъектов.Владелец КАК Район,
	|	УПДК_СекцииОбъектов.КоличествоПоВертикали КАК КоличествоПоВертикали,
	|	УПДК_СекцииОбъектов.КоличествоПоГоризонтали КАК КоличествоПоГоризонтали,
	|	УПДК_СекцииОбъектов.Архив КАК Архив
	|ИЗ
	|	Справочник.УПДК_СекцииОбъектов КАК УПДК_СекцииОбъектов
	|ГДЕ
	|	УПДК_СекцииОбъектов.Ссылка = &ОбъектСинхронизации";
	
	Запрос.Параметры.Вставить("ОбъектСинхронизации", ОбъектСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ИДбазы = ПараметрыСинхронизации.ИДБазы;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate"); 
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
	
	Структура = Новый Структура;
	Структура.Вставить("ApplicationId", ИДбазы);
	Структура.Вставить("Тип_Объекта", "Секция");
	//Структура.Вставить("ID_Секции", ИДбазы + "sek" + Гуид(ОбъектСинхронизации));
	Структура.Вставить("ID_Секции", Гуид(ОбъектСинхронизации));
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть();
	
	Структура = Новый Структура;	
	
	
	Структура.Вставить("ID_Застройщика", ИДбазы + "com" + ИДбазы);	
	//Структура.Вставить("ID_ЖК", ИДбазы + "jk" + Гуид(Выборка.Район));
	//Структура.Вставить("ID_ГП", ИДбазы + "gp" + Гуид(Выборка.ГП));
	Структура.Вставить("ID_ЖК",  Гуид(Выборка.Район));
	Структура.Вставить("ID_ГП", Гуид(Выборка.ГП));
	Структура.Вставить("Наименование_Секции",  Строка(ОбъектСинхронизации));
	Структура.Вставить("Колво_по_Вертикали",  Выборка.КоличествоПоВертикали);
	Структура.Вставить("Колво_по_Горизонтали",  Выборка.КоличествоПоГоризонтали);
	Структура.Вставить("Архив", Выборка.Архив); 		
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();
	
	мСтрока = "create=" + Json1 + "&update=" + Json2;
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПолейСекцииОбъектов", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();   	
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
	
	Если мРезультат.КодСостояния = 200 Тогда
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
	Иначе
		ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
	КонецЕсли;
	
	ЗаписатьИД(СтруктураЗаявки.response, ОбъектСинхронизации, ПараметрыСинхронизации, Истина);
	
КонецПроцедуры  

Процедура ОбновлениеПолейПричинОтказов(ПараметрыСинхронизации)
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	ИДбазы = ПараметрыСинхронизации.ИДБазы;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("/api/v8/list/createupdate"); 
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	CRM_ПричиныОтказов.Наименование КАК Наименование,
	|	CRM_ПричиныОтказов.УПДК_РассторжениеДоговора КАК УПДК_РассторжениеДоговора,
	|	CRM_ПричиныОтказов.РеализацияНедвижимости КАК РеализацияНедвижимости,
	|	CRM_ПричиныОтказов.УПДК_Событие КАК УПДК_Событие,
	|	CRM_ПричиныОтказов.ЗакрытиеБрони КАК ЗакрытиеБрони,
	|	CRM_ПричиныОтказов.Перебронирование КАК Перебронирование,
	|	CRM_ПричиныОтказов.ЗаявкаАнкетаДляБанка КАК ЗаявкаАнкетаДляБанка
	|ИЗ
	|	Справочник.CRM_ПричиныОтказов КАК CRM_ПричиныОтказов
	|ГДЕ
	|	CRM_ПричиныОтказов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ОбъектСинхронизации);
	
	ПричинаОтказа = Запрос.Выполнить().Выбрать();
	
	Если ПричинаОтказа.Следующий() Тогда
		
		к=0;
		Разделитель= "&";
		Структура = Новый Структура;
		СтрокаЗапроса = "?";
		
		//Структура.Вставить("listId", "12");
		//Структура.Вставить("tableName","reasons_rejection");
		СтрокаЗапроса = "listId=12&tableName=reasons_rejection";
		
		Если ПричинаОтказа.УПДК_РассторжениеДоговора Тогда
			
			ТипДокумента = "РасторжениеДоговора";	
			
			Структура1 = Новый Структура;
			//Структура1.Вставить("guid", ИДбазы + "causerd" + Гуид(ОбъектСинхронизации));
			Структура1.Вставить("guid", Гуид(ОбъектСинхронизации));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура1);
			Json1 = Запись.Закрыть();
			
			Структура2 = Новый Структура;
			
			Структура2.Вставить("type", Строка(ПричинаОтказа.Наименование));
			Структура2.Вставить("doc", Строка(ТипДокумента));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура2);
			Json2 = Запись.Закрыть();     
			
			Crerate = "c"+Строка(к);
			Update = "u"+Строка(к);
			//Структура.Вставить(Crerate,Структура1);
			//Структура.Вставить(Update,Структура2);
			
			СтрокаЗапроса = СтрокаЗапроса +  "&" + Crerate + "=" + Json1 + "&" + Update + "="+Json2;
			к = к + 1; 
		КонецЕсли;	
		
		Если ПричинаОтказа.РеализацияНедвижимости Тогда
			ТипДокумента = "РеализацияНедвижимости";
			
			Структура1 = Новый Структура;
			//Структура1.Вставить("guid", ИДбазы + "causerd" + Гуид(ОбъектСинхронизации)); 		
			Структура1.Вставить("guid", Гуид(ОбъектСинхронизации));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура1);
			Json1 = Запись.Закрыть();
			
			Структура2 = Новый Структура;
			
			Структура2.Вставить("type", Строка(ПричинаОтказа.Наименование));
			Структура2.Вставить("doc", Строка(ТипДокумента));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура2);
			Json2 = Запись.Закрыть();
			
			Crerate = "c"+Строка(к);
			Update = "u"+Строка(к);
			//Структура.Вставить(Crerate,Структура1);
			//Структура.Вставить(Update,Структура2);
			
			СтрокаЗапроса = СтрокаЗапроса +  "&" + Crerate + "=" + Json1 + "&" + Update + "="+Json2;
			
			
			к = к + 1; 
			
		КонецЕсли; 
		
		Если  ПричинаОтказа.УПДК_Событие Тогда
			ТипДокумента = "Событие";
			
			Структура1 = Новый Структура;
			//Структура1.Вставить("guid", ИДбазы + "causerd" + Гуид(ОбъектСинхронизации)); 		
			Структура1.Вставить("guid", Гуид(ОбъектСинхронизации));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура1);
			Json1 = Запись.Закрыть();
			
			Структура2 = Новый Структура;
			
			Структура2.Вставить("type", Строка(ПричинаОтказа.Наименование));
			Структура2.Вставить("doc", Строка(ТипДокумента));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура2);
			Json2 = Запись.Закрыть();
			
			Crerate = "c"+Строка(к);
			Update = "u"+Строка(к);
			//Структура.Вставить(Crerate,Структура1);
			//Структура.Вставить(Update,Структура2);
			
			СтрокаЗапроса = СтрокаЗапроса +  "&" + Crerate + "=" + Json1 + "&" + Update + "="+Json2;
			к = к + 1; 
			
		КонецЕсли; 
		
		Если  ПричинаОтказа.ЗакрытиеБрони Тогда
			ТипДокумента = "ЗакрытиеБрони";
			
			Структура1 = Новый Структура;
			//Структура1.Вставить("guid", ИДбазы + "causerd" + Гуид(ОбъектСинхронизации));
			Структура1.Вставить("guid", Гуид(ОбъектСинхронизации));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура1);
			Json1 = Запись.Закрыть();
			
			Структура2 = Новый Структура;
			
			Структура2.Вставить("type", Строка(ПричинаОтказа.Наименование));
			Структура2.Вставить("doc", Строка(ТипДокумента));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура2);
			Json2 = Запись.Закрыть();
			
			Crerate = "c"+Строка(к);
			Update = "u"+Строка(к);
			//Структура.Вставить(Crerate,Структура1);
			//Структура.Вставить(Update,Структура2);
			
			СтрокаЗапроса = СтрокаЗапроса +  "&" + Crerate + "=" + Json1 + "&" + Update + "="+Json2;
			
			к = к + 1; 
			
		КонецЕсли; 
		
		Если  ПричинаОтказа.Перебронирование Тогда
			ТипДокумента = "Перебронирование";
			
			Структура1 = Новый Структура;
			//Структура1.Вставить("guid", ИДбазы + "causerd" + Гуид(ОбъектСинхронизации)); 		
			Структура1.Вставить("guid", Гуид(ОбъектСинхронизации));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура1);
			Json1 = Запись.Закрыть();
			
			Структура2 = Новый Структура;
			
			Структура2.Вставить("type", Строка(ПричинаОтказа.Наименование));
			Структура2.Вставить("doc", Строка(ТипДокумента));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура2);
			Json2 = Запись.Закрыть();
			
			Crerate = "c"+Строка(к);
			Update = "u"+Строка(к);
			//Структура.Вставить(Crerate,Структура1);
			//Структура.Вставить(Update,Структура2);
			
			СтрокаЗапроса = СтрокаЗапроса +  "&" + Crerate + "=" + Json1 + "&" + Update + "="+Json2;
			
			к = к + 1; 
			
		КонецЕсли; 
		
		Если  ПричинаОтказа.ЗаявкаАнкетаДляБанка Тогда
			ТипДокумента = "ЗаявкаАнкетаДляБанка";
			
			Структура1 = Новый Структура;
			//Структура1.Вставить("guid", ИДбазы + "causerd" + Гуид(ОбъектСинхронизации)); 		
			Структура1.Вставить("guid", Гуид(ОбъектСинхронизации));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура1);
			Json1 = Запись.Закрыть();
			
			Структура2 = Новый Структура;
			
			Структура2.Вставить("type", Строка(ПричинаОтказа.Наименование));
			Структура2.Вставить("doc", Строка(ТипДокумента));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура2);
			Json2 = Запись.Закрыть();
			
			Crerate = "c"+Строка(к);
			Update = "u"+Строка(к);
			//Структура.Вставить(Crerate,Структура1);
			//Структура.Вставить(Update,Структура2);
			
			СтрокаЗапроса = СтрокаЗапроса +  "&" + Crerate + "=" + Json1 + "&" + Update + "="+Json2;
			
			
			
			к = к + 1; 
			
		КонецЕсли;	
		
		
		Если к>0 Тогда 	
			
			//Запись = Новый ЗаписьJSON;
			//Запись.УстановитьСтроку();
			//ЗаписатьJSON(Запись, Структура);
			//JsonОСн = Запись.Закрыть();	
			
			HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаЗапроса);
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПолейПричиныОтказа", ТекущаяДатаСеанса(), СтрокаЗапроса);
			
			мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			
			ЧтениеJSON	= Новый ЧтениеJSON;	
			ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
			СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
			ЧтениеJSON.Закрыть();   	
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
			
			Если мРезультат.КодСостояния = 200 Тогда
				ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
			Иначе
				ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
			КонецЕсли;
			
			ЗаписатьИД(СтруктураЗаявки.response, ОбъектСинхронизации, ПараметрыСинхронизации, Истина);
		КонецЕСли;
		
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеПолейПартнеры(ПараметрыСинхронизации)
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	ИДбазы = ПараметрыСинхронизации.ИДБазы;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate"); 
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка,
	|	Партнеры.ОсновноеКонтактноеЛицо.Фамилия КАК Фамилия,
	|	Партнеры.ОсновноеКонтактноеЛицо.Имя КАК Имя,
	|	Партнеры.ОсновноеКонтактноеЛицо.Отчество КАК Отчество,
	|	МАКСИМУМ(ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация.Представление, """")) КАК Телефон,
	|	МАКСИМУМ(ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация2.Представление, """")) КАК Email,
	|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	Партнеры.Mobsted_ПриглашениеОтправлено КАК ПриглашениеОтправлено,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.ДатаРождения <> &ПустаяДата
	|			ТОГДА РАЗНОСТЬДАТ(ФизическиеЛица.ДатаРождения, &ТекущаяДата, ГОД)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Возраст
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО Партнеры.ОсновноеКонтактноеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|			И (&Телефон = ФизическиеЛицаКонтактнаяИнформация.Вид)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация2
	|		ПО Партнеры.ОсновноеКонтактноеЛицо = ФизическиеЛицаКонтактнаяИнформация2.Ссылка
	|			И (&Email = ФизическиеЛицаКонтактнаяИнформация2.Вид)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Партнеры.ОсновноеКонтактноеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Партнеры.CRM_ТипОтношений = &CRM_ТипОтношений
	|	И Партнеры.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Партнеры.Ссылка,
	|	Партнеры.ОсновноеКонтактноеЛицо.Фамилия,
	|	Партнеры.ОсновноеКонтактноеЛицо.Имя,
	|	Партнеры.ОсновноеКонтактноеЛицо.Отчество,
	|	Партнеры.ОсновнойМенеджер,
	|	Партнеры.Mobsted_ПриглашениеОтправлено,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.ДатаРождения <> &ПустаяДата
	|			ТОГДА РАЗНОСТЬДАТ(ФизическиеЛица.ДатаРождения, &ТекущаяДата, ГОД)
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Телефон", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица);
	Запрос.УстановитьПараметр("Email", Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица);
	Запрос.УстановитьПараметр("CRM_ТипОтношений", Справочники.CRM_ТипыОтношений.Покупатель);
	Запрос.УстановитьПараметр("Ссылка", ОбъектСинхронизации); 
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	ТекПартнер = Запрос.Выполнить().Выбрать();
	
	Если ТекПартнер.Следующий() Тогда
		
		Телефон = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ТекПартнер.Телефон),10); 	
		
		Если Не ЗначениеЗаполнено(Телефон) Тогда
			
			ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации); 
			Возврат;
			
		КонецЕсли;
		
		Структура = Новый Структура;
		Структура.Вставить("ApplicationId", ИДбазы);
		//Структура.Вставить("ID_Клиента", ИДбазы + "customer" + Гуид(ОбъектСинхронизации));
		Структура.Вставить("ID_Клиента", Гуид(ОбъектСинхронизации));
		Структура.Вставить("Тип_Объекта", "Клиент");
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		Структура = Новый Структура;
		
		Структура.Вставить("Фамилия", Строка(ТекПартнер.Фамилия));
		Структура.Вставить("Имя", Строка(ТекПартнер.Имя));
		Структура.Вставить("Отчество", Строка(ТекПартнер.Отчество));
		Структура.Вставить("ФИО", Строка(ТекПартнер.Ссылка));
		Структура.Вставить("Phone", "+7" + Телефон);
		Структура.Вставить("Email", ТекПартнер.Email);  
		Структура.Вставить("Возраст_Клиента", ТекПартнер.Возраст);
		//Структура.Вставить("ID_Менеджера", ИДбазы + "manager" + Гуид(ТекПартнер.ОсновнойМенеджер));
		Структура.Вставить("ID_Менеджера", Гуид(ТекПартнер.ОсновнойМенеджер));
		//Структура.Вставить("Аккредитация_Застр" + ИДбазы, ?(ТекПартнер.ПриглашениеОтправлено, 1, 0));
		
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();
		
		мСтрока = "create=" + Json1 + "&update=" + Json2;		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПолейПартнеры", ТекущаяДатаСеанса(), мСтрока);
		
		мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть(); 
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
		Если мРезультат.КодСостояния = 200 Тогда
			ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
		Иначе
			ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
		КонецЕсли;
		
		ЗаписатьИД(СтруктураЗаявки.response, ОбъектСинхронизации, ПараметрыСинхронизации);  
		
		//Заполняем поле InviteUrl
		
		HTTPЗапрос = Новый HTTPЗапрос("api/v8/hashtags/objects"); 
		HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/json");
		
		Структура = Новый Структура;
		Структура.Вставить("ids", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Число(Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации))));
		Структура.Вставить("tags", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("#Object:InviteUrl#"));
		
		Структура.Вставить("applicationId", ИДбазы);
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		
		мСтрока = Json1;
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ПолучениеInviteUrl", ТекущаяДатаСеанса(), мСтрока);
		
		мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть(); 
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки));
		
		Попытка
			
			СсылкаДляВхода = СтруктураЗаявки.data[0].attributes.InviteUrl;
			
			НаборЗаписей = РегистрыСведений.Mobsted_ИдентификаторыОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ОбъектСинхронизации);
			
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись из НаборЗаписей Цикл 				
				Запись.СсылкаДляВхода = СсылкаДляВхода;				
			КонецЦикла;
			
			НаборЗаписей.Записать();  
			
		Исключение
		КонецПопытки;		
		
	Иначе
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
	КонецЕсли;
	
КонецПроцедуры  

Процедура ОбновлениеПолейФизическиеЛица(ПараметрыСинхронизации)  
	//Походу это идет выгрузка не физ лиц, а Агентов.
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	ИДбазы = ПараметрыСинхронизации.ИДБазы;
	ИДБазыАгентов = ПараметрыСинхронизации.ИДБазыАгентов;
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МАКСИМУМ(ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация.Представление, """")) КАК Телефон,
	|	МАКСИМУМ(ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация2.Представление, """")) КАК Email,
	|	ПартнерыКонтактныеЛица.Ссылка.НаименованиеПолное КАК НаименованиеПолноеАН,
	|	ПартнерыКонтактныеЛица.ФизЛицо.Фамилия КАК Фамилия,
	|	ПартнерыКонтактныеЛица.ФизЛицо.Имя КАК Имя,
	|	ПартнерыКонтактныеЛица.ФизЛицо.Отчество КАК Отчество
	|ИЗ
	|	Справочник.Партнеры.КонтактныеЛица КАК ПартнерыКонтактныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО ПартнерыКонтактныеЛица.ФизЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|			И (&Телефон = ФизическиеЛицаКонтактнаяИнформация.Вид)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация2
	|		ПО (ПартнерыКонтактныеЛица.ФизЛицо = ФизическиеЛицаКонтактнаяИнформация2.Ссылка)
	|			И (&Email = ФизическиеЛицаКонтактнаяИнформация2.Вид)
	|ГДЕ
	|	ПартнерыКонтактныеЛица.Ссылка.АгентствоНедвижимости
	|	И ПартнерыКонтактныеЛица.ФизЛицо = &ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартнерыКонтактныеЛица.Ссылка.НаименованиеПолное,
	|	ПартнерыКонтактныеЛица.ФизЛицо.Фамилия,
	|	ПартнерыКонтактныеЛица.ФизЛицо.Имя,
	|	ПартнерыКонтактныеЛица.ФизЛицо.Отчество";
	
	Запрос.УстановитьПараметр("Телефон", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица);
	Запрос.УстановитьПараметр("Email", Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица);
	Запрос.УстановитьПараметр("ФизЛицо", ОбъектСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Телефон = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ВыборкаДетальныеЗаписи.Телефон),10);
		
		Если НЕ ЗначениеЗаполнено(Телефон) Тогда			
			
			ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации); 		    
			Возврат;
			
		КонецЕсли;
		
		//Проверяем на существование Агента в тенанте по номеру телефона
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()); 		
		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
		HTTPЗапрос = Новый HTTPЗапрос("api/v8/hashtags/filters/objects"); 
		HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
		
		Структура = Новый Структура;
		Структура.Вставить("applicationId", 3);
		Структура.Вставить("objectId", 1);		
		ApiTel = Новый Структура("ApiTel", "+7" + Телефон);
		Variable = Новый Структура("Variable", ApiTel); 
		Структура.Вставить("extraParams", Variable);		
		Структураtags = Новый Структура;
		Структураtags.Вставить("tag","#ObjectsFilter:API_filter_agent:Data#");
		Структураtags.Вставить("objectId", 1);		
		pagination = Новый Структура;
		pagination.Вставить("page", 1);
		pagination.Вставить("pageSize", 100); 	
		Структураtags.Вставить("pagination", pagination); 		
		tags = Новый Массив;
		tags.Добавить(Структураtags); 		
		Структура.Вставить("tags", tags); 		
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть(); 	
		
		мСтрока = Json1;
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ПолучениеМассиваАгентов", ТекущаяДатаСеанса(), мСтрока);
		
		мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		
		ТелоКакСтрока = мРезультат.ПолучитьТелоКакСтроку();
		ТелоКакСтрока = СтрЗаменить(ТелоКакСтрока, "@", "_");
		
		ЧтениеJSON.УстановитьСтроку(ТелоКакСтрока); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();   	
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
		Попытка
			
			ObjectID = СтруктураЗаявки.data[0].attributes.data[0].objects_id;			
			Mobsted_ВызовСервера.УстановитьИдентификаторОбъекта(ОбъектСинхронизации, ObjectID);			
			ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
			
			ДобавитьВДругойТенантНаСервере(ПараметрыСинхронизации, ObjectID, ПараметрыСинхронизации.ИДбазы);
			
			
			Возврат;
			
		Исключение
			
			ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
			Возврат;
			
		КонецПопытки;
		
		//Если Агента нет, то создаем
		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
		HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate"); 
		HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization);
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		Структура = Новый Структура;
		Структура.Вставить("ApplicationId", ИДБазыАгентов);
		//Структура.Вставить("ID_Агента", ИДбазы + "agent" + Гуид(ОбъектСинхронизации)); 
		Структура.Вставить("ID_Агента", Гуид(ОбъектСинхронизации)); 
		Структура.Вставить("Тип_Объекта", "Агент");
		
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		Структура = Новый Структура;
		
		Структура.Вставить("Наименования_Агенства", Строка(ВыборкаДетальныеЗаписи.НаименованиеПолноеАН));
		Структура.Вставить("Фамилия", Строка(ВыборкаДетальныеЗаписи.Фамилия));
		Структура.Вставить("Имя", Строка(ВыборкаДетальныеЗаписи.Имя));
		Структура.Вставить("Отчество",Строка(ВыборкаДетальныеЗаписи.Отчество));
		Структура.Вставить("Phone", "+7" + Телефон);
		Структура.Вставить("Email", ВыборкаДетальныеЗаписи.Email);
		//Структура.Вставить("Аккредитация_Застр" + ИДбазы, 1); 		
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть(); 		
		
		мСтрока = "create=" + Json1 + "&update=" + Json2; 		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПолейФизическиеЛица", ТекущаяДатаСеанса(), мСтрока);
		
		мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть(); 
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
		Если мРезультат.КодСостояния = 200 Тогда
			ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
		Иначе
			ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
		КонецЕсли;
		
		ЗаписатьИД(СтруктураЗаявки.response, ОбъектСинхронизации, ПараметрыСинхронизации);
		
		//РасшариваемАгентаДляБазыКлиента
		Начало = СтрНайти(СтруктураЗаявки.response, "ID = ");
		Начало = Начало + 5;
		Точка = СтрНайти(СтруктураЗаявки.response, ".");		
		ИД = Число(Сред(СтруктураЗаявки.response, Начало, Точка - Начало)); 		
		Если ЗначениеЗаполнено(ИД) Тогда
			ДобавитьВДругойТенантНаСервере(ПараметрыСинхронизации, ИД, ПараметрыСинхронизации.ИДБазы);	
		КонецЕсли;
		
	Иначе
		
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
		
	КонецЕсли;  		
	
КонецПроцедуры  

Процедура ОбновлениеПолейПользователи(ПараметрыСинхронизации)
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	ИДбазы = ПараметрыСинхронизации.ИДБазы;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate"); 
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(ПользователиКонтактнаяИнформация.Представление, """")) КАК Представление,
	|	Пользователи.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТелефоны
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|		ПО Пользователи.Ссылка = ПользователиКонтактнаяИнформация.Ссылка
	|			И (&ТипТелефон = ПользователиКонтактнаяИнформация.Тип)
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Пользователи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТелефоны.Ссылка КАК Ссылка,
	|	ВТТелефоны.Представление КАК Телефон
	|ИЗ
	|	ВТТелефоны КАК ВТТелефоны";
	
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Ссылка", ОбъектСинхронизации);
	
	Менеджер = Запрос.Выполнить().Выбрать();
	Менеджер.Следующий();	
	Телефон = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(Менеджер.Телефон),10);
	
	Структура = Новый Структура;
	Структура.Вставить("ApplicationId", ИДбазы);
	//Структура.Вставить("ID_Менеджера", ИДбазы + "manager" + Гуид(ОбъектСинхронизации)); 
	Структура.Вставить("ID_Менеджера", Гуид(ОбъектСинхронизации)); 
	Структура.Вставить("Тип_Объекта", "Менеджер");
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть();
	
	Структура = Новый Структура;
	
	Структура.Вставить("Фамилия", Строка(ОбъектСинхронизации));
	Структура.Вставить("Phone", "+7" + Телефон);
	//+Никонов по задаче MOBILE4DEV-10
	Если Пользователи.РолиДоступны("УПДК_РазделГарантия", ОбъектСинхронизации) Тогда 
		Структура.Вставить("менеджер_гарантийщик", "1");
	Иначе 
		Структура.Вставить("менеджер_гарантийщик", "0");
	КонецЕсли;
	//-Никонов
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();
	
	мСтрока = "create=" + Json1 + "&update=" + Json2;
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПолейПользователи", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть(); 
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
	
	Если мРезультат.КодСостояния = 200 Тогда
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
	Иначе
		ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
	КонецЕсли;
	
	ЗаписатьИД(СтруктураЗаявки.response, ОбъектСинхронизации, ПараметрыСинхронизации);
	
КонецПроцедуры 

Процедура ОбновлениеПолейАгентов(ПараметрыСинхронизации)
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПартнерыКонтактныеЛица.Ссылка КАК Агенство,
		|	ПартнерыКонтактныеЛица.ФизЛицо.Ссылка КАК Агент,
		|	ПартнерыКонтактныеЛица.ФизЛицо.Фамилия КАК Фамилия,
		|	ПартнерыКонтактныеЛица.ФизЛицо.Имя КАК Имя,
		|	ПартнерыКонтактныеЛица.ФизЛицо.Отчество КАК Отчество,
		|	ПартнерыКонтактныеЛица.ФизЛицо.ТелефонСтрокой КАК Телефон
		|ИЗ
		|	Справочник.Партнеры.КонтактныеЛица КАК ПартнерыКонтактныеЛица
		|ГДЕ
		|	ПартнерыКонтактныеЛица.Ссылка.АгентствоНедвижимости = ИСТИНА
		|	И ПартнерыКонтактныеЛица.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И %ПараметрУсловияЗапроса%";
	
	Если ТипЗнч(ОбъектСинхронизации) = Тип("СправочникСсылка.Партнеры") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ПараметрУсловияЗапроса%","ПартнерыКонтактныеЛица.Ссылка = &Агентсво");
		Запрос.УстановитьПараметр("Агентсво", ОбъектСинхронизации);
	ИначеЕсли ТипЗнч(ОбъектСинхронизации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ПараметрУсловияЗапроса%","ПартнерыКонтактныеЛица.ФизЛицо = &Агент");
		Запрос.УстановитьПараметр("Агент", ОбъектСинхронизации);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОписаниеОшибки = СтрШаблон("У объекта %1 не заполнено поле контактные лица",ОбъектСинхронизации);
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗаписьВЖурнал("Mobsted_ОбновлениеПолейАгентов", ТекущаяДатаСеанса(), "Запрос не выполнен", , 400, ОписаниеОшибки, ОбъектСинхронизации);
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Телефон = Лев(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(Выборка.Телефон),11); 	
	
	ИДбазы = ПараметрыСинхронизации.ИДбазы;
	мСтрока = "applicationId=" + ИДбазы;
	Если ТипЗнч(ОбъектСинхронизации) = Тип("СправочникСсылка.Партнеры") Тогда			
		Json1 = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Тип_Объекта, ID_Агентства", "Агентство", XMLСтрока(Выборка.Агенство)));
		Json2 = Mobsted_ВызовСервера.СтруктураЗаписьJson( Новый Структура("Наименования_Агенства", Строка(Выборка.Агенство)));
	ИначеЕсли ТипЗнч(ОбъектСинхронизации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда			
		Json1 = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Тип_Объекта, ID_Агента", "Агент", XMLСтрока(Выборка.Агент)));
		Структура = Новый Структура;
		Структура.Вставить("Фамилия", Выборка.Фамилия);
		Структура.Вставить("Имя", Выборка.Имя);
		Структура.Вставить("Отчество", Выборка.Отчество);
		Структура.Вставить("Телефон", Телефон);
		Структура.Вставить("Наименования_Агенства", Строка(Выборка.Агенство));
		Структура.Вставить("ID_Агентства", XMLСтрока(Выборка.Агенство));
		Json2 = Mobsted_ВызовСервера.СтруктураЗаписьJson(Структура);
	КонецЕсли;
	
	мСтрока = мСтрока + "&c0=" + Json1 + "&u0=" + Json2;
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПолейАгентов", ТекущаяДатаСеанса(), мСтрока);
	
	Метод = "api/v8/objects/createupdate";
	
	СтруктураЗаявки = Mobsted_ВызовСервера.CделатьЗапросНаСервер(Метод, мСтрока,ПараметрыСинхронизации, ЗаписьЖурнала);
	
	Если СтруктураЗаявки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураЗаявки.Свойство("data") Тогда
		Для каждого Структура Из СтруктураЗаявки.data Цикл
			ID = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Структура,"id");
			Mobsted_ВызовСервера.УстановитьИдентификаторОбъекта(ОбъектСинхронизации,ID);
		КонецЦикла; 
	Иначе
		ВызватьИсключение "В ответе не содержится ключевое поле data" ;
	КонецЕсли;

	

КонецПроцедуры

Процедура Событие(ПараметрыСинхронизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Событие.Ссылка КАК Ссылка,
	|	Событие.Дата КАК Дата,
	|	Событие.Партнер КАК Партнер,
	|	Событие.Предмет КАК Предмет,
	|	Событие.УПДК_Агент КАК УПДК_Агент,
	|	Событие.Ответственный КАК Ответственный,
	|	Событие.Помещение.АдресСтрокой КАК АдресСтрокой,
	|	Событие.Помещение.СсылкаНаКарту КАК СсылкаНаКарту,
	|	Событие.ВидСобытия КАК ВидСобытия,
	|	Событие.СостояниеСобытия КАК СостояниеСобытия,
	|	СделкиОбщая.Сделка КАК Сделка,
	|	СделкиОбщая.ОбъектНедвижимости КАК ОбъектНедвижимости
	|ИЗ
	|	Документ.CRM_Событие КАК Событие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СделкиОбщая КАК СделкиОбщая
	|		ПО (СделкиОбщая.Клиент = Событие.Партнер)
	|ГДЕ
	|	Событие.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрыСинхронизации.ОбъектСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Событие = РезультатЗапроса.Выбрать();	
	Событие.Следующий(); 
	
	Если Событие.ВидСобытия = Перечисления.CRM_ВидыСобытий.Показ Тогда
		
		#Область СобытиеПоказКлиент				
		
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()); 
		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
		HTTPЗапрос = Новый HTTPЗапрос("api/v6/events/createupdate"); 
		
		HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		Структура = Новый Структура;
		Структура.Вставить("ActionName", "Показ");
		Структура.Вставить("ScreenId", 0);
		//Структура.Вставить("EventId", ПараметрыСинхронизации.ИДБазы + "EventCustomer" + XMLСтрока(Событие.Ссылка));
		Структура.Вставить("EventId", XMLСтрока(Событие.Ссылка));
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		Структура = Новый Структура; 		
		Структура.Вставить("ObjectId", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(Событие.Партнер));
		
		Попытка
			Структура.Вставить("objectid_flat", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(Событие.Предмет)); 
		Исключение
		КонецПопытки;
		
		
		//Структура.Вставить("id_менеджера",  ?(ЗначениеЗаполнено(Событие.Ответственный), ПараметрыСинхронизации.ИДБазы + "manager" + XMLСтрока(Событие.Ответственный),""));  
		//Структура.Вставить("id_агента", ?(ЗначениеЗаполнено(Событие.УПДК_Агент), ПараметрыСинхронизации.ИДБазы + "agent" + XMLСтрока(Событие.УПДК_Агент),""));
		
		//+Никонов
		Структура.Вставить("ID_Сделки", XMLСтрока(Событие.Сделка));
		Структура.Вставить("Id_Квартиры", XMLСтрока(Событие.ОбъектНедвижимости));
		//-Никонов
		
		Структура.Вставить("id_агента", ?(ЗначениеЗаполнено(Событие.УПДК_Агент), XMLСтрока(Событие.УПДК_Агент),""));
		Структура.Вставить("id_менеджера",  ?(ЗначениеЗаполнено(Событие.Ответственный), XMLСтрока(Событие.Ответственный),""));
		
		Структура.Вставить("фамилия_клиента", ?(ЗначениеЗаполнено(Событие.Партнер),Строка(Событие.Партнер),""));
		
		Структура.Вставить("objectid_customer", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(Событие.Партнер)); 
		Структура.Вставить("Дата_Показа", Формат(Событие.Дата,"ДФ=yyyy-MM-dd")); 
		Структура.Вставить("Время_Показа", Формат(Событие.Дата,"ДФ=HH:mm")); 
		
		Структура.Вставить("address", ?(ЗначениеЗаполнено(Событие.АдресСтрокой), Строка(Событие.АдресСтрокой),"")); 
		Структура.Вставить("address_map", ?(ЗначениеЗаполнено(Событие.СсылкаНаКарту), Строка(Событие.СсылкаНаКарту),"")); 
		
		Если Событие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.ВРаботе Или Событие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано Тогда
			Структура.Вставить("StatusId", Число(ПараметрыСинхронизации.ИдБазы) * 2 - 1); 
		Иначе
			Структура.Вставить("StatusId", Число(ПараметрыСинхронизации.ИдБазы) * 2);		
		КонецЕсли; 	
		Если ЗначениеЗаполнено(Событие.Сделка) Тогда
			//Структура.Вставить("id_сделки", ПараметрыСинхронизации.ИДБазы + "deal" + XMLСтрока(Событие.Сделка));
			Структура.Вставить("id_сделки", XMLСтрока(Событие.Сделка));
		КонецЕсли;
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();		
		
		мСтрока = "ApplicationId=" + ПараметрыСинхронизации.ИДБазы + "&create0=" + Json1 + "&update0=" + Json2;		
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_СобытиеПоказКлиент", ТекущаяДатаСеанса(), мСтрока);
		мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();		
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
		Если мРезультат.КодСостояния = 200 Тогда
			ОчиститьMobsted_ДанныеДляСинхронизации(ПараметрыСинхронизации.ОбъектСинхронизации);
		Иначе
			ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
		КонецЕсли;
		
		#КонецОбласти
		
		#Область СобытиеПоказРиелтор				
		
		Если ЗначениеЗаполнено(Событие.УПДК_Агент) Тогда
			
			//Обновляем событие в мобилке.
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()); 
			
			HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
			HTTPЗапрос = Новый HTTPЗапрос("api/v6/events/createupdate"); 
			
			HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			
			Структура = Новый Структура;
			Структура.Вставить("ActionName", "Показ");
			Структура.Вставить("ScreenId", 0);
			//Структура.Вставить("EventId", ПараметрыСинхронизации.ИдБазы + "EventAgent" + XMLСтрока(Событие.Ссылка)); 
			Структура.Вставить("EventId", XMLСтрока(Событие.Ссылка)); 
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json1 = Запись.Закрыть();
			
			Структура = Новый Структура; 				
			
			Структура.Вставить("ObjectId", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(Событие.УПДК_Агент));
			
			Попытка
				Структура.Вставить("objectid_flat", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(Событие.Предмет)); 
			Исключение
			КонецПопытки;
			
			Структура.Вставить("id_агента", ?(ЗначениеЗаполнено(Событие.УПДК_Агент),"Demo" + "agent" + XMLСтрока(Событие.УПДК_Агент),""));
			//Структура.Вставить("id_менеджера", ?(ЗначениеЗаполнено(Событие.Ответственный),"Demo" + "manager" + XMLСтрока(Событие.Ответственный),""));
			Структура.Вставить("id_менеджера", ?(ЗначениеЗаполнено(Событие.Ответственный),XMLСтрока(Событие.Ответственный),""));
			Структура.Вставить("фамилия_клиента", ?(ЗначениеЗаполнено(Событие.Партнер),Строка(Событие.Партнер),""));
			
			
			
			Структура.Вставить("objectid_customer", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(Событие.Партнер)); 
			Структура.Вставить("Дата_Показа", Формат(Событие.Дата,"ДФ=yyyy-MM-dd")); 
			Структура.Вставить("Время_Показа", Формат(Событие.Дата,"ДФ=HH:mm")); 
			
			Структура.Вставить("address", ?(ЗначениеЗаполнено(Событие.АдресСтрокой), Строка(Событие.АдресСтрокой),"")); 
			Структура.Вставить("address_map", ?(ЗначениеЗаполнено(Событие.СсылкаНаКарту), Строка(Событие.СсылкаНаКарту),"")); 
			
			Если Событие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.ВРаботе Или Событие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано Тогда
				Структура.Вставить("StatusId", Число(ПараметрыСинхронизации.ИдБазы) * 2 - 1); 
			Иначе
				Структура.Вставить("StatusId", Число(ПараметрыСинхронизации.ИдБазы) * 2);		
			КонецЕсли; 				
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json2 = Запись.Закрыть(); 			
			
			мСтрока = "ApplicationId=" + ПараметрыСинхронизации.ИДБазыАгентов + "&create0=" + Json1 + "&update0=" + Json2;			
			HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_СобытиеПоказАгент", ТекущаяДатаСеанса(), мСтрока);
			
			мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			
			ЧтениеJSON	= Новый ЧтениеJSON;	
			ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
			СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
			ЧтениеJSON.Закрыть();
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
			
			//Отказываемся от функционала, Агент уже должен быть рсшарен для данной базы
			//Если Структура.Свойство("ObjectId") Тогда 				
			//	ДобавитьВДругойТенантНаСервере(ПараметрыСинхронизации, Структура.ObjectId, ПараметрыСинхронизации.ИДБазы); 
			//КонецЕсли;
			
		КонецЕсли;
		#КонецОбласти
		
	Иначе
		
		ОчиститьMobsted_ДанныеДляСинхронизации(ПараметрыСинхронизации.ОбъектСинхронизации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Сделка(ПараметрыСинхронизации)
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СделкиОбщая.Сделка КАК Сделка,
	|	СделкиОбщая.Этап КАК Этап,
	|	СделкиОбщая.Клиент КАК Клиент,
	|	СделкиОбщая.Клиент.ОсновноеКонтактноеЛицо.Фамилия КАК Фамилия,
	|	СделкиОбщая.Клиент.ОсновноеКонтактноеЛицо.Имя КАК Имя,
	|	СделкиОбщая.Клиент.ОсновноеКонтактноеЛицо.Отчество КАК Отчество,
	|	СделкиОбщая.Ответственный КАК Ответственный,
	|	СделкиОбщая.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	УПДК_НедвижимостьСрезПоследних.ЗаказКлиента КАК ЗаказКлиента,
	|	ВЫБОР
	|		КОГДА СделкиОбщая.Сделка.Основание.Результат ЕСТЬ NULL
	|			ТОГДА СделкиОбщая.Сделка.Основание.Описание
	|		ИНАЧЕ СделкиОбщая.Сделка.Основание.Результат
	|	КОНЕЦ КАК Комментарий,
	|	СделкиОбщая.Сделка.Закрыта КАК Закрыта,
	|	СделкиОбщая.Клиент.ОсновноеКонтактноеЛицо КАК ОсновноеКонтактноеЛицо
	|ИЗ
	|	РегистрСведений.СделкиОбщая КАК СделкиОбщая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПДК_Недвижимость.СрезПоследних(&ТекущаяДата, ) КАК УПДК_НедвижимостьСрезПоследних
	|		ПО СделкиОбщая.ОбъектНедвижимости = УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости
	|ГДЕ
	|	СделкиОбщая.Сделка = &ОбъектСинхронизации
	|	И СделкиОбщая.Дата <= &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	СделкиОбщая.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектСинхронизации", ОбъектСинхронизации);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ИДбазы = ПараметрыСинхронизации.ИДбазы;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate"); 
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded"); 	
	
	Структура = Новый Структура;
	Структура.Вставить("ApplicationId", ИДбазы);
	Структура.Вставить("Тип_Объекта", "Сделка");
	//Структура.Вставить("id_сделки", ИДбазы + "deal" + XMLСтрока(ОбъектСинхронизации));
	Структура.Вставить("ID_Сделки", XMLСтрока(ОбъектСинхронизации));
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть();
	
	Структура = Новый Структура;
	//Структура.Вставить("ID_Менеджера", ИДбазы + "manager" + XMLСтрока(Выборка.Ответственный));
	//Структура.Вставить("ID_Клиента", ИДбазы + "customer" + XMLСтрока(Выборка.Клиент));
	Структура.Вставить("stage_id", XMLСтрока(Выборка.Этап));
	Структура.Вставить("ID_Менеджера", XMLСтрока(Выборка.Ответственный));
	Структура.Вставить("ID_Клиента", XMLСтрока(Выборка.Клиент));
	
	Если ЗначениеЗаполнено(Выборка.ОбъектНедвижимости) Тогда
		//Структура.Вставить("ID_Квартиры", ИДбазы + "kv" + XMLСтрока(Выборка.ОбъектНедвижимости));
		Структура.Вставить("Id_Квартиры", XMLСтрока(Выборка.ОбъектНедвижимости));
	КонецЕсли;
	Структура.Вставить("Фамилия", Строка(Выборка.Фамилия));	
	Структура.Вставить("Имя", Строка(Выборка.Имя));
	Структура.Вставить("Отчество", Строка(Выборка.Отчество));
	Email = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.ОсновноеКонтактноеЛицо, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Если ЗначениеЗаполнено(Email) Тогда
		Структура.Вставить("Email", Email);
	КонецЕсли;    
	
	Структура.Вставить("Комментарий", Строка(Выборка.Комментарий));
	Структура.Вставить("статус_сделки", Строка(Выборка.Этап));
	Структура.Вставить("customer_name ", Строка(Выборка.Клиент));
	Если ЗначениеЗаполнено(Выборка.ЗаказКлиента) Тогда
		//Структура.Вставить("orderID", ИДбазы + "Order" + XMLСтрока(Выборка.ЗаказКлиента));   
		Структура.Вставить("orderID", XMLСтрока(Выборка.ЗаказКлиента));
	КонецЕсли;
	
	Если Выборка.Закрыта Тогда
		Структура.Вставить("Архив", 1);
	КонецЕсли;
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();
	
	мСтрока = "create=" + Json1 + "&update=" + Json2;	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеСделки", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();   	
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
	
	Если мРезультат.КодСостояния = 200 Тогда
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
	Иначе
		ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
	КонецЕсли;	
	
	ЗаписатьИД(СтруктураЗаявки.response, ОбъектСинхронизации, ПараметрыСинхронизации, Истина);			
	
КонецПроцедуры

Процедура Задача(ПараметрыСинхронизации)
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	//+Никонов по задаче 4dev-707
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителя.ДатаНачала КАК Дата,
	|	ЗадачаИсполнителя.CRM_Партнер КАК Партнер,
	|	ЗадачаИсполнителя.Автор КАК Автор,
	|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	|	ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
	|	ЗадачаИсполнителя.Описание КАК Описание,
	|	ЗадачаИсполнителя.CRM_ПроцентВыполненияЗадачи КАК CRM_ПроцентВыполненияЗадачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &ОбъектСинхронизации";
	
	Запрос.УстановитьПараметр("ОбъектСинхронизации", ОбъектСинхронизации);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ИДбазы = ПараметрыСинхронизации.ИДбазы;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v6/events/createupdate"); 
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded"); 	
	
	мСтрока = "ApplicationId="+ИДбазы;
	
	Структура = Новый Структура;
	Структура.Вставить("ActionName", "Личная задача");
	Структура.Вставить("ScreenId", "0");
	Структура.Вставить("StatusId", "25");
	Структура.Вставить("task_id", XMLСтрока(ПараметрыСинхронизации.ОбъектСинхронизации));
	
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть();
	
	Структура = Новый Структура;
	Структура.Вставить("Результат", "");
	Структура.Вставить("Задача", Строка(Выборка.Ссылка));
	Структура.Вставить("Дата", Формат(Выборка.Дата, "ДФ=dd.MM.yyyy; ДЛФ=D"));
	Структура.Вставить("Время", Формат(Выборка.Дата, "ДФ=hh:mm"));
	Структура.Вставить("ПроцентВыполнения", Выборка.CRM_ПроцентВыполненияЗадачи);
	//Структура.Вставить("Постановщик", ИДбазы + "manager" + XMLСтрока(Выборка.Автор));
	Структура.Вставить("Постановщик", Строка(Выборка.Автор));
	Структура.Вставить("Постановщик_id", XMLСтрока(Выборка.Автор));
	Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
		//Структура.Вставить("Исполнитель", ИДбазы + "manager" + XMLСтрока(Выборка.Исполнитель));
		Структура.Вставить("Исполнитель", Строка(Выборка.Исполнитель));
		Структура.Вставить("Исполнитель_id", XMLСтрока(Выборка.Исполнитель));
		object_id = Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(Выборка.Исполнитель);
		Если ЗначениеЗаполнено(object_id) Тогда
			Структура.Вставить("ObjectId", XMLСтрока(object_id));
		КонецЕсли;		
	КонецЕсли;
	Структура.Вставить("Клиент", Строка(Выборка.Партнер));	
	Если ЗначениеЗаполнено(Выборка.Партнер) Тогда
		//Структура.Вставить("client_id", ИДбазы + "customer" + XMLСтрока(Выборка.Партнер));
		Структура.Вставить("client_id", XMLСтрока(Выборка.Партнер));
	КонецЕсли;
	//Структура.Вставить("Объект", Строка(Выборка.ОбъектНедвижимости));
	//Структура.Вставить("flat_id", ИДбазы + "kv" + XMLСтрока(Выборка.ОбъектНедвижимости));
	Структура.Вставить("Комментарий", Строка(Выборка.Описание));
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();
	
	мСтрока = мСтрока + "&create0=" + Json1 + "&update0=" + Json2;	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеЗадачи", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();   	
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, Mobsted_ВызовСервера.СтруктураЗаписьJson(СтруктураЗаявки)); 
	
	Если мРезультат.КодСостояния = 200 Тогда
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
	Иначе
		ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
		ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
	КонецЕсли;				
	
КонецПроцедуры

Процедура ОбновлениеПолейОбъектаНедвижимости(ПараметрыСинхронизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(УПДК_ОбъектыНедвижимостиБалконы.Остеклен) КАК Остеклен,
	|	СУММА(УПДК_ОбъектыНедвижимостиБалконы.ПлощадьБалкона) КАК ПлощадьБалкона,
	|	УПДК_ОбъектыНедвижимостиБалконы.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(УПДК_ОбъектыНедвижимостиБалконы.НомерСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(УПДК_ОбъектыНедвижимостиБалконы.ТипБалкона = ЗНАЧЕНИЕ(Перечисление.ТипыБалконов.Лоджия)) КАК Лоджия
	|ПОМЕСТИТЬ ВТБалконы
	|ИЗ
	|	Справочник.УПДК_ОбъектыНедвижимости.Балконы КАК УПДК_ОбъектыНедвижимостиБалконы
	|ГДЕ
	|	УПДК_ОбъектыНедвижимостиБалконы.Ссылка = &ОбъектНедвижимости
	|
	|СГРУППИРОВАТЬ ПО
	|	УПДК_ОбъектыНедвижимостиБалконы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	УПДК_НедвижимостьСрезПоследних.СтатусНедвижимости КАК СтатусНедвижимости,
	|	УПДК_НедвижимостьСрезПоследних.Период КАК Период,
	|	ЕСТЬNULL(УПДК_НедвижимостьСрезПоследних.ЗаказКлиента.СрокБронирования, """") КАК СрокБронирования,
	|	УПДК_НедвижимостьСрезПоследних.Клиент КАК Клиент,
	|	УПДК_НедвижимостьСрезПоследних.ЗаказКлиента КАК ЗаказКлиента,
	|	УПДК_НедвижимостьСрезПоследних.Договор КАК Договор,
	|	ЕСТЬNULL(УПДК_СостоянияРегистрацииДокументовСрезПоследних.Состояние, ЗНАЧЕНИЕ(Перечисление.УПДК_СостоянияРегистрацииДокументов.ПустаяСсылка)) КАК Регистрация,
	|	УПДК_НедвижимостьСрезПоследних.Договор.Статус КАК ДоговорСтатус,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Объект.СрокВводаВЭксплуатацию КАК СрокВводаВЭксплуатацию,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.УдалитьПланКвартиры КАК ПланКвартиры,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Планировка.УдалитьПланКвартиры КАК ПланировкаПланКвартиры,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Объект КАК Объект,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Район КАК Район,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Секция КАК Секция,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Этаж КАК Этаж,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.НомерНаЭтаже КАК Номер_на_этаже,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.НомерНаПлощадке КАК Номер_на_площадке,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.КоличествоКомнат КАК Колво_комнат,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Уровней КАК Колво_уровней,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Стояков КАК Колво_стояков,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.ОбщаяПлощадь КАК Общая_Площадь,
	|	0 КАК Комната_1_площадь,
	|	0 КАК Комната_2_площадь,
	|	0 КАК Комната_3_площадь,
	|	0 КАК Комната_4_площадь,
	|	0 КАК Комната_5_площадь,
	|	0 КАК Корридор_площадь,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.ПлощадьКухни КАК Кухня_площадь,
	|	0 КАК Санузел_площадь,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.СовмещенныйСанУзел КАК Тип_санузла,
	|	ЕСТЬNULL(ВТБалконы.НомерСтроки, 0) КАК Колво_балконов,
	|	ЕСТЬNULL(ВТБалконы.Лоджия, ЛОЖЬ) КАК Тип_балкона,
	|	ЕСТЬNULL(ВТБалконы.Остеклен, ЛОЖЬ) КАК Остекление_балкона,
	|	ЕСТЬNULL(ВТБалконы.ПлощадьБалкона, 0) КАК Балкон_площадь,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.ТипПланировки КАК Тип_планировки,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Отделка КАК Отделка,
	|	ЕСТЬNULL(УПДК_ФактическиеЦеныНедвижимости.Стоимость, 0) КАК Стоимость,
	|	УПДК_НедвижимостьСрезПоследних.Период КАК Дата_изменения_статуса_квартиры,
	|	ЕСТЬNULL(УПДК_НедвижимостьСрезПоследних.ЗаказКлиента.СрокБронирования, ДАТАВРЕМЯ(1980, 1, 1)) КАК Срок_бронирования,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.ТипПланировки КАК ТипПланировки,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.НомерУсловный КАК НомерПроект,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Описание КАК Описание,
	|	ВЫБОР
	|		КОГДА УПДК_ЭтапыСтроительстваОбъектовСрезПоследних.ЭтапСтроительства.ТипЭтапаСтроительства = ЗНАЧЕНИЕ(Перечисление.УПДК_ТипыЭтаповСтроительства.ВводВЭксплуатацию)
	|			ТОГДА ИСТИНА
	|		КОГДА УПДК_ЭтапыСтроительстваОбъектовСрезПоследних.ЭтапСтроительства.ТипЭтапаСтроительства = ЗНАЧЕНИЕ(Перечисление.УПДК_ТипыЭтаповСтроительства.ОформленаСобственность)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДомСдан,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Секция КАК Наименование_Секции,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Объект.СпособСтроительства КАК Материал_стен,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Объект.КоличествоЭтажей КАК Этажность,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Район.Архив
	|		ИЛИ УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Секция.Архив
	|		ИЛИ УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Объект.Архив КАК Архив,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Планировка КАК Планировка,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.ВидНедвижимости КАК ВидНедвижимости,
	|	УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.ТипНедвижимости КАК ТипНедвижимости
	|ИЗ
	|	РегистрСведений.УПДК_Недвижимость.СрезПоследних(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_НедвижимостьСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПДК_ФактическиеЦеныНедвижимости КАК УПДК_ФактическиеЦеныНедвижимости
	|		ПО УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости = УПДК_ФактическиеЦеныНедвижимости.ОбъектНедвижимости
	|			И (&ВидЦены = УПДК_ФактическиеЦеныНедвижимости.ВидЦены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБалконы КАК ВТБалконы
	|		ПО УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости = ВТБалконы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПДК_ЭтапыСтроительстваОбъектов.СрезПоследних КАК УПДК_ЭтапыСтроительстваОбъектовСрезПоследних
	|		ПО УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости.Объект = УПДК_ЭтапыСтроительстваОбъектовСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПДК_СостоянияРегистрацииДокументов.СрезПоследних КАК УПДК_СостоянияРегистрацииДокументовСрезПоследних
	|		ПО УПДК_НедвижимостьСрезПоследних.Договор = УПДК_СостоянияРегистрацииДокументовСрезПоследних.Документ
	|			И (УПДК_НедвижимостьСрезПоследних.Договор <> ЗНАЧЕНИЕ(Документ.РеализацияНедвижимости.ПустаяСсылка))";
	
	
	Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.Оптовая);
	Запрос.УстановитьПараметр("ОбъектНедвижимости", ПараметрыСинхронизации.ОбъектСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		//Обновляем статус квартиры в мобилке.
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()); 
		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
		
		//Отправляем изображение планировки
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПланКвартиры) Тогда 						
			Адрес = ВыборкаДетальныеЗаписи.ПланКвартиры; 						
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПланировкаПланКвартиры) Тогда 						
			Адрес = ВыборкаДетальныеЗаписи.ПланировкаПланКвартиры;
			//+Никонов добавляем возможность грузить фото из планировок, если они есть
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Планировка) Тогда
			ЗапросПланировки = Новый Запрос;
			ЗапросПланировки.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПланировкиПрисоединенныеФайлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.УПДК_ОбъектыНедвижимости КАК УПДК_ОбъектыНедвижимости
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПланировкиПрисоединенныеФайлы КАК ПланировкиПрисоединенныеФайлы
			|		ПО УПДК_ОбъектыНедвижимости.Планировка.Ссылка = ПланировкиПрисоединенныеФайлы.ВладелецФайла.Ссылка
			|ГДЕ
			|	УПДК_ОбъектыНедвижимости.Ссылка = &Ссылка";
			ЗапросПланировки.УстановитьПараметр("Ссылка", ПараметрыСинхронизации.ОбъектСинхронизации);
			РезультатЗапроса = ЗапросПланировки.Выполнить();
			ВыборкаПланировки = РезультатЗапроса.Выбрать();
			Если ВыборкаПланировки.Следующий() Тогда
				СсылкаНаПланировку = ВыборкаПланировки.Ссылка;
			КонецЕсли; 
			Адрес = СсылкаНаПланировку;
			//-Никонов
		Иначе 						
			Адрес = "";
		КонецЕсли;  		
		
		Если ЗначениеЗаполнено(Адрес) Тогда
			
			ДД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Адрес);
			
			HTTPЗапрос = Новый HTTPЗапрос("api/v8/objects/objectfile");				
			HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			
			б64Макет = Base64Строка(ДД);
			
			мСтрока = "applicationId=" + ПараметрыСинхронизации.ИДБазы 
			+ "&objectId=" + Формат(Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ПараметрыСинхронизации.ОбъектСинхронизации), "ЧГ=0") 
			+ "&fileName=photoplan&fileExt=" + Адрес.Расширение
			+ "&fileColumn=" + КодироватьСтроку("Фото_квартиры", СпособКодированияСтроки.КодировкаURL)
			+ "&fileBody=" + КодироватьСтроку(Строка(б64Макет), СпособКодированияСтроки.КодировкаURL); 
			
			
			HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПланировкиОбъектаНедвижимости", ТекущаяДатаСеанса(), Лев(мСтрока, 500));
			
			мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			
			ЧтениеJSON	= Новый ЧтениеJSON;	
			ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
			СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
			ЧтениеJSON.Закрыть();
			
			//+Никонов
			ПреобразоватьСтруктуруЗаявки = ЗначениеВСтрокуВнутр(СтруктураЗаявки);
			url_планировки = Mobsted_ВызовСервера.ПолучаемСсылкуИзСтруктурыЗаявки(ПреобразоватьСтруктуруЗаявки);
			//-Никонов
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки));
			
		КонецЕсли;
		
		//https:///
		HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate");		
		HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		Структура = Новый Структура;
		Структура.Вставить("ApplicationId", ПараметрыСинхронизации.ИДБазы);
		//Структура.Вставить("Id_Квартиры", ПараметрыСинхронизации.ИДБазы + "kv" + XMLСтрока(ПараметрыСинхронизации.ОбъектСинхронизации)); 		
		Структура.Вставить("Id_Квартиры", XMLСтрока(ПараметрыСинхронизации.ОбъектСинхронизации)); 
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		
		Структура = Новый Структура;
		Структура.Вставить("Статус_Квартиры", Строка(ВыборкаДетальныеЗаписи.СтатусНедвижимости));
		Структура.Вставить("Дата_изменения_статуса_кв", Формат(ВыборкаДетальныеЗаписи.Период,"ДФ=yyyy-MM-dd"));
		//пока не пишем туда даты изменения для регистрации и тп статусов, пока не нужно.
		Структура.Вставить("Срок_бронирования", Формат(ВыборкаДетальныеЗаписи.СрокБронирования,"ДФ=yyyy-MM-dd"));
		Структура.Вставить("Срок_Ввода_в_Эксплуатацию", Формат(ВыборкаДетальныеЗаписи.СрокВводаВЭксплуатацию,"ДФ=yyyy-MM-dd")); 					
		
		//Структура.Вставить("ID_Планировки", ПараметрыСинхронизации.ИДБазы + "plan" + XMLСтрока(ВыборкаДетальныеЗаписи.Планировка)); 		
		Структура.Вставить("ID_Планировки", XMLСтрока(ВыборкаДетальныеЗаписи.Планировка));
		
		ТекОбъектНедвижимости = ВыборкаДетальныеЗаписи;
		Структура.Вставить("Тип_Объекта", НРег(ТекОбъектНедвижимости.ТипНедвижимости));
		//Структура.Вставить("ID_Застройщика", ПараметрыСинхронизации.ИДБазы + "com" + ПараметрыСинхронизации.ИДБазы);
		//Структура.Вставить("ID_ЖК", ПараметрыСинхронизации.ИДБазы + "jk" + XMLСтрока(ТекОбъектНедвижимости.Район));
		Структура.Вставить("ID_Застройщика", ПараметрыСинхронизации.ИДБазы);
		Структура.Вставить("ID_ЖК", XMLСтрока(ТекОбъектНедвижимости.Район));
		Структура.Вставить("Название_ЖК", Строка(УПДК_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекОбъектНедвижимости.Район, "НаименованиеПолное")));
		//Структура.Вставить("ID_ГП", ПараметрыСинхронизации.ИДБазы + "gp" + XMLСтрока(ТекОбъектНедвижимости.Объект));   
		Структура.Вставить("ID_ГП", XMLСтрока(ТекОбъектНедвижимости.Объект));
		Структура.Вставить("Наименование_ГП", Строка(ТекОбъектНедвижимости.Объект));
		Структура.Вставить("Номер_на_площадке", ТекОбъектНедвижимости.Номер_на_площадке);
		Структура.Вставить("Колво_комнат", ПолучитьКоличествоКомнатСтрокой(ТекОбъектНедвижимости.Колво_комнат,ТекОбъектНедвижимости.ТипПланировки, ТекОбъектНедвижимости.ТипНедвижимости));
		Структура.Вставить("колво_комнат_фильтр", ПолучитьКоличествоКомнатЧислом(ТекОбъектНедвижимости.Колво_комнат,ТекОбъектНедвижимости.ТипПланировки)); 		
		Структура.Вставить("Описание_квартиры", ТекОбъектНедвижимости.Описание);
		Структура.Вставить("Номер_Квартиры", ТекОбъектНедвижимости.НомерПроект); 		
		Структура.Вставить("Дом_сдан", ТекОбъектНедвижимости.ДомСдан);		
		Структура.Вставить("Наименование_Секции", Строка(ТекОбъектНедвижимости.Наименование_Секции));
		Структура.Вставить("Материал_стен", Строка(ТекОбъектНедвижимости.Материал_стен));
		Структура.Вставить("Этажность", Строка(ТекОбъектНедвижимости.Этажность));
		Структура.Вставить("Этаж", Строка(ТекОбъектНедвижимости.Этаж));		
		Структура.Вставить("Колво_уровней", ТекОбъектНедвижимости.Колво_уровней);
		Структура.Вставить("Колво_стояков", ТекОбъектНедвижимости.Колво_стояков);
		Структура.Вставить("Комната_1_площадь",  Формат(ТекОбъектНедвижимости.Комната_1_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Комната_2_площадь",  Формат(ТекОбъектНедвижимости.Комната_2_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Комната_3_площадь",  Формат(ТекОбъектНедвижимости.Комната_3_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Комната_4_площадь",  Формат(ТекОбъектНедвижимости.Комната_4_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Комната_5_площадь",  Формат(ТекОбъектНедвижимости.Комната_5_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Корридор_площадь", Формат(ТекОбъектНедвижимости.Корридор_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Кухня_площадь",  Формат(ТекОбъектНедвижимости.Кухня_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Санузел_площадь",  Формат(ТекОбъектНедвижимости.Санузел_площадь, "ЧРД=.; ЧН=0; ЧГ=0")); 
		Структура.Вставить("Вид_Объекта",  НРег(Строка(ТекОбъектНедвижимости.ВидНедвижимости))); 
		
		Структура.Вставить("Тип_санузла", ?(ТекОбъектНедвижимости.Тип_санузла, "Совмещенный", "Раздельный"));
		Структура.Вставить("Колво_балконов", ТекОбъектНедвижимости.Колво_балконов);
		Структура.Вставить("Тип_балкона", ТекОбъектНедвижимости.Тип_балкона);
		Структура.Вставить("Остекление_балкона", ТекОбъектНедвижимости.Остекление_балкона);
		Структура.Вставить("Балкон_площадь",  Формат(ТекОбъектНедвижимости.Балкон_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Тип_планировки", Строка(ТекОбъектНедвижимости.Тип_планировки));
		Структура.Вставить("Отделка", Строка(ТекОбъектНедвижимости.Отделка));
		Структура.Вставить("Стоимость", Формат(ТекОбъектНедвижимости.Стоимость, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Общая_Площадь", Формат(ТекОбъектНедвижимости.Общая_Площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Архив", ТекОбъектНедвижимости.Архив); 		
		
		Структура.Вставить("Наименование_Застройщика", Строка(Справочники.Организации.ОсновнаяОрганизация));
		Структура.Вставить("Сумма_комиссии", 0); 					
		
		Структура.Вставить("ID_Клиента", "");
		Структура.Вставить("Фамилия", "");
		Структура.Вставить("Имя", "");
		Структура.Вставить("Отчество", "");
		Структура.Вставить("Phone", "");		
		Структура.Вставить("Email", "");
		
		Структура.Вставить("ID_Агенства", "");
		Структура.Вставить("ID_Агента", "");
		Структура.Вставить("ID_Менеджера", "");		 
		
		Структура.Вставить("Стоимость_договора", "");
		Структура.Вставить("Форма_оплаты", "");
		//+Никонов
		Структура.Вставить("url_планировки", "");
		Структура.url_планировки = Строка(url_планировки); 
		//-Никонов
		
		
		Если ВыборкаДетальныеЗаписи.СтатусНедвижимости = Перечисления.УПДК_СтатусыНедвижимости.НаОформлении Тогда
			
			Если ВыборкаДетальныеЗаписи.Регистрация = Перечисления.УПДК_СостоянияРегистрацииДокументов.Зарегистрирован ИЛИ
				ВыборкаДетальныеЗаписи.Регистрация = Перечисления.УПДК_СостоянияРегистрацииДокументов.НаРегистрации Тогда
				
				Структура.Статус_Квартиры = Строка(ВыборкаДетальныеЗаписи.Регистрация);
				
			Иначе
				
				Структура.Статус_Квартиры = Строка(ВыборкаДетальныеЗаписи.ДоговорСтатус);
				
			КонецЕсли;
			
		КонецЕсли; 					
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Клиент) Тогда
			
			//Структура.ID_Клиента = ПараметрыСинхронизации.ИДБазы + "customer" + XMLСтрока(ВыборкаДетальныеЗаписи.Клиент);
			Структура.ID_Клиента = XMLСтрока(ВыборкаДетальныеЗаписи.Клиент);
			
			ОснКЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.Клиент, "ОсновноеКонтактноеЛицо");
			
			Если ЗначениеЗаполнено(ОснКл) Тогда
				
				РеквизитыОснКЛ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснКЛ, "Фамилия, Имя, Отчество");
				
				Структура.Фамилия = РеквизитыОснКЛ.Фамилия;
				Структура.Имя = РеквизитыОснКЛ.Имя;
				Структура.Отчество = РеквизитыОснКЛ.Отчество;
				
				НайденныеСтроки = ОснКЛ.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.МобильныйтелефонФизическогоЛИца));
				
				Если НайденныеСтроки.Количество() Тогда
					Структура.Phone = "+7"+ Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НайденныеСтроки[0].Представление),10);
				КонецЕсли;
				
			КонецЕсли;  					
			
		КонецЕсли;
		
		АН = Неопределено; 
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Договор) Тогда
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаДетальныеЗаписи.Договор, "Агент, АгентствоНедвижимости, Ответственный, СуммаДокумента, СпособПриобретения, Дата");
			
			Если ЗначениеЗаполнено(РеквизитыДокумента.Агент) Тогда
				
				//Структура.ID_Агенства  = ПараметрыСинхронизации.ИДБазы + "agency" + XMLСтрока(РеквизитыДокумента.АгентствоНедвижимости);
				//Структура.ID_Агента    = ПараметрыСинхронизации.ИДБазы + "agent" + XMLСтрока(РеквизитыДокумента.Агент);
				//Структура.ID_Менеджера = ПараметрыСинхронизации.ИДБазы + "manager" + XMLСтрока(РеквизитыДокумента.Ответственный); 
				Структура.ID_Агенства  = XMLСтрока(РеквизитыДокумента.АгентствоНедвижимости);
				Структура.ID_Агента    = XMLСтрока(РеквизитыДокумента.Агент);
				Структура.ID_Менеджера = XMLСтрока(РеквизитыДокумента.Ответственный);
			КонецЕсли;					
			
			Структура.Стоимость_договора = РеквизитыДокумента.СуммаДокумента;
			Структура.Форма_оплаты = Строка(РеквизитыДокумента.СпособПриобретения);
			
			АН = РеквизитыДокумента.АгентствоНедвижимости;
			АНДата = РеквизитыДокумента.Дата;
			
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаказКлиента) Тогда
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаДетальныеЗаписи.ЗаказКлиента, "Агент, АгентствоНедвижимости, Ответственный, СуммаДокумента, СпособПриобретения, Дата");
			
			Если ЗначениеЗаполнено(РеквизитыДокумента.Агент) Тогда
				
				//Структура.ID_Агенства  = ПараметрыСинхронизации.ИДБазы + "agency" + XMLСтрока(РеквизитыДокумента.АгентствоНедвижимости);
				//Структура.ID_Агента    = ПараметрыСинхронизации.ИДБазы + "agent" + XMLСтрока(РеквизитыДокумента.Агент);
				//Структура.ID_Менеджера = ПараметрыСинхронизации.ИДБазы + "manager" + XMLСтрока(РеквизитыДокумента.Ответственный);
				Структура.ID_Агенства  = XMLСтрока(РеквизитыДокумента.АгентствоНедвижимости);
				Структура.ID_Агента    = XMLСтрока(РеквизитыДокумента.Агент);
				Структура.ID_Менеджера = XMLСтрока(РеквизитыДокумента.Ответственный);
			КонецЕсли;					
			Структура.Стоимость_договора = РеквизитыДокумента.СуммаДокумента;
			Структура.Форма_оплаты = Строка(РеквизитыДокумента.СпособПриобретения);
			
			АН = РеквизитыДокумента.АгентствоНедвижимости;
			АНДата = РеквизитыДокумента.Дата;
			
		КонецЕсли;	
		
		Если АН <> Неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УПДК_УсловияВознагражденияАНСрезПоследних.ОбъектУсловия КАК ОбъектУсловия,
			|	УПДК_УсловияВознагражденияАНСрезПоследних.ПроцентВознаграждения КАК ПроцентВознаграждения,
			|	УПДК_УсловияВознагражденияАНСрезПоследних.СуммаВознагражденияМин КАК СуммаВознагражденияМин,
			|	УПДК_УсловияВознагражденияАНСрезПоследних.СуммаВознагражденияМакс КАК СуммаВознагражденияМакс
			|ИЗ
			|	РегистрСведений.УПДК_УсловияВознагражденияАН.СрезПоследних КАК УПДК_УсловияВознагражденияАНСрезПоследних
			|ГДЕ
			|	УПДК_УсловияВознагражденияАНСрезПоследних.АгентствоНедвижимости = &АгентствоНедвижимости
			|	И УПДК_УсловияВознагражденияАНСрезПоследних.СоглашениеАгентстваНедвижимости.НачалоДействия <= &Период
			|	И УПДК_УсловияВознагражденияАНСрезПоследних.СоглашениеАгентстваНедвижимости.ОкончаниеДействия >= &Период
			|	И УПДК_УсловияВознагражденияАНСрезПоследних.Действует";
			
			Запрос.УстановитьПараметр("АгентствоНедвижимости", АН);
			Запрос.УстановитьПараметр("Период", АНДата);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаАН = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаАН.Следующий() Цикл
				
				Если СегментыСервер.ВходитВСегмент(ПараметрыСинхронизации.ОбъектСинхронизации, ВыборкаАН.ОбъектУсловия) Тогда
					
					Если ЗначениеЗаполнено(ВыборкаАН.СуммаВознагражденияМин) Тогда
						Структура.Сумма_комиссии = ВыборкаАН.СуммаВознагражденияМин;
					Иначе
						
						Структура.Сумма_комиссии = ВыборкаАН.ПроцентВознаграждения / 100 * Структура.Стоимость_договора;
						Если ЗначениеЗаполнено(ВыборкаАН.СуммаВознагражденияМакс) И Структура.Сумма_комиссии > ВыборкаАН.СуммаВознагражденияМакс Тогда
							Структура.Сумма_комиссии = ВыборкаАН.СуммаВознагражденияМакс;
						КонецЕсли;
						
					КонецЕсли;
					
					
					Прервать;
				КонецЕсли;
				
				
				
			КонецЦикла;
			
			
			
		КонецЕсли;
		
		//МеняемЗапятыеНаТочки
		
		Структура.Сумма_комиссии = Формат(Структура.Сумма_комиссии, "ЧРД=.; ЧН=0; ЧГ=0");
		Структура.Стоимость_договора = Формат(Структура.Стоимость_договора, "ЧРД=.; ЧН=0; ЧГ=0");
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();		
		
		мСтрока = "create=" + Json1 + "&update=" + Json2;		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПолейОбъектаНедвижимости", ТекущаяДатаСеанса(), мСтрока);
		
		мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); 	
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
		Если мРезультат.КодСостояния = 200 Тогда
			ОчиститьMobsted_ДанныеДляСинхронизации(ПараметрыСинхронизации.ОбъектСинхронизации); 
		Иначе
			ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
		КонецЕсли;  
		
		ЗаписатьИД(СтруктураЗаявки.response, ТекОбъектНедвижимости.ОбъектНедвижимости, ПараметрыСинхронизации, Истина);
		
	Иначе
		
		ОчиститьMobsted_ДанныеДляСинхронизации(ПараметрыСинхронизации.ОбъектСинхронизации); 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеПолейПланировки(ПараметрыСинхронизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Планировки.Ссылка КАК Ссылка,
	|	Планировки.Наименование КАК Наименование,
	|	Планировки.КоличествоКомнат КАК Колво_комнат,
	|	Планировки.ОбщаяПлощадьПроектная КАК Общая_Площадь,
	|	Планировки.ПлощадьКухни КАК Кухня_площадь,
	|	Планировки.СовмещенныйСанУзел КАК Тип_санузла,
	|	Планировки.Описание КАК Описание,
	|	Планировки.ТипПланировки КАК Тип_планировки,
	|	Планировки.ВидНедвижимости КАК ВидНедвижимости,
	|	Планировки.ВидНедвижимости.ТипНедвижимости КАК ТипНедвижимости
	|ИЗ
	|	Справочник.Планировки КАК Планировки
	|ГДЕ
	|	Планировки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПланировкиПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПланировкиПрисоединенныеФайлы КАК ПланировкиПрисоединенныеФайлы
	|ГДЕ
	|	ПланировкиПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ПланировкиПрисоединенныеФайлы.ПланКвартиры";
	
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрыСинхронизации.ОбъектСинхронизации);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
	ПланКвартиры = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		//Обновляем статус квартиры в мобилке.
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()); 
		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
		
		//https:///
		HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate");		
		HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		
		Структура = Новый Структура;
		Структура.Вставить("ApplicationId", ПараметрыСинхронизации.ИДБазы);
		//Структура.Вставить("ID_Планировки", ПараметрыСинхронизации.ИДБазы + "plan" + XMLСтрока(ПараметрыСинхронизации.ОбъектСинхронизации));
		Структура.Вставить("ID_Планировки", XMLСтрока(ПараметрыСинхронизации.ОбъектСинхронизации));
		Структура.Вставить("Тип_Объекта", "Планировка");
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		
		Структура = Новый Структура;
		ТекОбъектНедвижимости = ВыборкаДетальныеЗаписи;
		
		Структура.Вставить("ID_Застройщика", ПараметрыСинхронизации.ИДБазы + "com" + ПараметрыСинхронизации.ИДБазы);
		Структура.Вставить("Колво_комнат", ПолучитьКоличествоКомнатСтрокой(ТекОбъектНедвижимости.Колво_комнат,ТекОбъектНедвижимости.Тип_планировки,ТекОбъектНедвижимости.ТипНедвижимости));
		Структура.Вставить("колво_комнат_фильтр", ПолучитьКоличествоКомнатЧислом(ТекОбъектНедвижимости.Колво_комнат,ТекОбъектНедвижимости.Тип_планировки)); 		
		Структура.Вставить("Описание_квартиры", ТекОбъектНедвижимости.Описание);
		//Структура.Вставить("Материал_стен", Строка(ТекОбъектНедвижимости.Материал_стен));
		//Структура.Вставить("Этажность", Строка(ТекОбъектНедвижимости.Этажность));
		//Структура.Вставить("Колво_уровней", ТекОбъектНедвижимости.Колво_уровней);
		//Структура.Вставить("Колво_стояков", ТекОбъектНедвижимости.Колво_стояков);
		//Структура.Вставить("Комната_1_площадь",  Формат(ТекОбъектНедвижимости.Комната_1_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		//Структура.Вставить("Комната_2_площадь",  Формат(ТекОбъектНедвижимости.Комната_2_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		//Структура.Вставить("Комната_3_площадь",  Формат(ТекОбъектНедвижимости.Комната_3_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		//Структура.Вставить("Комната_4_площадь",  Формат(ТекОбъектНедвижимости.Комната_4_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		//Структура.Вставить("Комната_5_площадь",  Формат(ТекОбъектНедвижимости.Комната_5_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		//Структура.Вставить("Корридор_площадь", Формат(ТекОбъектНедвижимости.Корридор_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Кухня_площадь",  Формат(ТекОбъектНедвижимости.Кухня_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		//Структура.Вставить("Санузел_площадь",  Формат(ТекОбъектНедвижимости.Санузел_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		
		Структура.Вставить("Тип_санузла", ?(ТекОбъектНедвижимости.Тип_санузла, "Совмещенный", "Раздельный"));
		//Структура.Вставить("Колво_балконов", ТекОбъектНедвижимости.Колво_балконов);
		//Структура.Вставить("Тип_балкона", ТекОбъектНедвижимости.Тип_балкона);
		//Структура.Вставить("Остекление_балкона", ТекОбъектНедвижимости.Остекление_балкона);
		//Структура.Вставить("Балкон_площадь",  Формат(ТекОбъектНедвижимости.Балкон_площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Тип_планировки", Строка(ТекОбъектНедвижимости.Тип_планировки));
		//Структура.Вставить("Отделка", Строка(ТекОбъектНедвижимости.Отделка));
		//Структура.Вставить("Стоимость", Формат(ТекОбъектНедвижимости.Стоимость, "ЧРД=.; ЧН=0; ЧГ=0"));
		Структура.Вставить("Общая_Площадь", Формат(ТекОбъектНедвижимости.Общая_Площадь, "ЧРД=.; ЧН=0; ЧГ=0"));
		//Структура.Вставить("Архив", ТекОбъектНедвижимости.Архив); 		
		
		Структура.Вставить("Наименование_Застройщика", Строка(Справочники.Организации.ОсновнаяОрганизация));
		
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();		
		
		мСтрока = "create=" + Json1 + "&update=" + Json2;		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПолейПланировки", ТекущаяДатаСеанса(), мСтрока);
		
		мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); 	
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
		Если мРезультат.КодСостояния = 200 Тогда
			ОчиститьMobsted_ДанныеДляСинхронизации(ПараметрыСинхронизации.ОбъектСинхронизации); 
		Иначе
			ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
		КонецЕсли;  
		
		ЗаписатьИД(СтруктураЗаявки.response, ПараметрыСинхронизации.ОбъектСинхронизации, ПараметрыСинхронизации, Истина);
		
		//Отправляем изображение планировки
		Если ПланКвартиры.Следующий() Тогда 						
			Адрес = ПланКвартиры.Ссылка; 						
		Иначе 						
			Адрес = "";
		КонецЕсли;  		
		
		Если ЗначениеЗаполнено(Адрес) Тогда
			
			ДД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Адрес);
			
			HTTPЗапрос = Новый HTTPЗапрос("api/v8/objects/objectfile");				
			HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			
			б64Макет = Base64Строка(ДД);
			
			мСтрока = "applicationId=" + ПараметрыСинхронизации.ИДБазы 
			+ "&objectId=" + Формат(Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ПараметрыСинхронизации.ОбъектСинхронизации), "ЧГ=0") 
			+ "&fileName=photoplan&fileExt=" + Адрес.Расширение
			+ "&fileColumn=" + КодироватьСтроку("Фото_квартиры", СпособКодированияСтроки.КодировкаURL)
			+ "&fileBody=" + КодироватьСтроку(Строка(б64Макет), СпособКодированияСтроки.КодировкаURL); 
			
			
			HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПланировкиПланировки", ТекущаяДатаСеанса(), Лев(мСтрока, 500));
			
			мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			
			ЧтениеJSON	= Новый ЧтениеJSON;	
			ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
			СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
			ЧтениеJSON.Закрыть(); 		
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
			
		КонецЕсли; 
		
	Иначе
		
		ОчиститьMobsted_ДанныеДляСинхронизации(ПараметрыСинхронизации.ОбъектСинхронизации); 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СобытиеБронирование(ПараметрыСинхронизации)
	
	#Область СобытиеБронированиеКлиент				
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v6/events/createupdate"); 
	
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
	
	Структура = Новый Структура;
	Структура.Вставить("ActionName", "Бронирование");
	Структура.Вставить("ScreenId", 0);
	//Структура.Вставить("OrderId", ПараметрыСинхронизации.ИДБазы + "Order" + XMLСтрока(ПараметрыСинхронизации.ОбъектСинхронизации)); 				
	Структура.Вставить("OrderId", XMLСтрока(ПараметрыСинхронизации.ОбъектСинхронизации)); 
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть();
	
	Структура = Новый Структура; 				
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_НедвижимостьВЗаказахОстатки.ЗаказКлиента КАК ЗаказКлиента,
	|	УПДК_НедвижимостьВЗаказахОстатки.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	УПДК_ЗаказКлиента.Дата КАК Дата,
	|	УПДК_ЗабронированнаяНедвижимостьСрезПоследних.СрокБронирования КАК СрокБронирования,
	|	УПДК_ЗаказКлиента.Клиент КАК Клиент,
	|	УПДК_НедвижимостьВЗаказахОстатки.ЗаказКлиента.Агент КАК Агент,
	|	УПДК_НедвижимостьВЗаказахОстатки.ЗаказКлиента.Ответственный КАК ЗаказКлиентаОтветственный,
	|	Сделки.Сделка КАК Сделка
	|ИЗ
	|	РегистрНакопления.УПДК_НедвижимостьВЗаказах.Остатки КАК УПДК_НедвижимостьВЗаказахОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УПДК_ЗаказКлиента КАК УПДК_ЗаказКлиента
	|		ПО УПДК_НедвижимостьВЗаказахОстатки.ЗаказКлиента = УПДК_ЗаказКлиента.Ссылка
	|			И УПДК_НедвижимостьВЗаказахОстатки.ОбъектНедвижимости = УПДК_ЗаказКлиента.ОбъектНедвижимости
	|			И (УПДК_НедвижимостьВЗаказахОстатки.ЗаказКлиента = &ОбъектСинхронизации)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПДК_ЗабронированнаяНедвижимость.СрезПоследних КАК УПДК_ЗабронированнаяНедвижимостьСрезПоследних
	|		ПО УПДК_НедвижимостьВЗаказахОстатки.ЗаказКлиента = УПДК_ЗабронированнаяНедвижимостьСрезПоследних.ЗаказКлиента
	|			И УПДК_НедвижимостьВЗаказахОстатки.ОбъектНедвижимости = УПДК_ЗабронированнаяНедвижимостьСрезПоследних.ОбъектНедвижимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сделки КАК Сделки
	|		ПО (УПДК_ЗаказКлиента.Ссылка = Сделки.РегистраторСделки)
	|ГДЕ
	|	УПДК_НедвижимостьВЗаказахОстатки.КоличествоОстаток > 0";
	
	Запрос.УстановитьПараметр("ОбъектСинхронизации", ПараметрыСинхронизации.ОбъектСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНедвижимостьВЗаказахОстатки = РезультатЗапроса.Выбрать();
	
	Если ВыборкаНедвижимостьВЗаказахОстатки.Следующий() Тогда
		
		//+Никонов
		Структура.Вставить("ID_Сделки", XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.Сделка));
		Структура.Вставить("Id_Квартиры", XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.ОбъектНедвижимости));
		//-Никонов
		
		Структура.Вставить("ObjectId", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаНедвижимостьВЗаказахОстатки.Клиент));
		Структура.Вставить("objectid_flat", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаНедвижимостьВЗаказахОстатки.ОбъектНедвижимости)); 
		Структура.Вставить("flat", ВыборкаНедвижимостьВЗаказахОстатки.ОбъектНедвижимости.Наименование); 
		Структура.Вставить("objectid_customer", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаНедвижимостьВЗаказахОстатки.Клиент)); 
		//Структура.Вставить("id_customer", ПараметрыСинхронизации.ИДБазы + "customer" +  XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.Клиент));
		Структура.Вставить("id_customer", XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.Клиент));
		Структура.Вставить("Дата_Брони", Формат(ВыборкаНедвижимостьВЗаказахОстатки.Дата,"ДФ=yyyy-MM-dd")); 
		Структура.Вставить("Срок_Брони", Формат(ВыборкаНедвижимостьВЗаказахОстатки.СрокБронирования,"ДФ=yyyy-MM-dd")); 
		Структура.Вставить("StatusId", Число(ПараметрыСинхронизации.ИдБазы) * 2 -  1); 
		
		//Структура.Вставить("id_агента", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.Агент), ПараметрыСинхронизации.ИДБазы + "agent" + XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.Агент),""));
		//Структура.Вставить("id_менеджера", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиентаОтветственный), ПараметрыСинхронизации.ИДБазы + "manager" + XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиентаОтветственный),""));
		
		Структура.Вставить("id_агента", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.Агент), XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.Агент),""));
		Структура.Вставить("id_менеджера", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиентаОтветственный), XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиентаОтветственный),""));
		Структура.Вставить("фамилия_клиента", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.Клиент),Строка(ВыборкаНедвижимостьВЗаказахОстатки.Клиент),""));
		Если ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.Сделка) Тогда
			//Структура.Вставить("id_сделки", ПараметрыСинхронизации.ИДБазы + "deal" + XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.Сделка)); 
			Структура.Вставить("id_сделки", XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.Сделка));
		КонецЕсли;
		
	Иначе
		
		Структура.Вставить("StatusId", Число(ПараметрыСинхронизации.ИдБазы) * 2);		
		
	КонецЕсли;
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();
	
	
	мСтрока = "ApplicationId=" + ПараметрыСинхронизации.ИДБазы + "&create0=" + Json1 + "&update0=" + Json2;	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_БроньКлиент", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
	
	Если мРезультат.КодСостояния = 200 Тогда
		ОчиститьMobsted_ДанныеДляСинхронизации(ПараметрыСинхронизации.ОбъектСинхронизации);
	Иначе
		ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
	КонецЕсли;
	
	#КонецОбласти
	
	
	#Область СобытиеБронированиеАгент				
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v6/events/createupdate"); 
	
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
	
	Структура = Новый Структура;
	Структура.Вставить("ActionName", "Бронирование");
	Структура.Вставить("ScreenId", 0);
	//Структура.Вставить("OrderId", ПараметрыСинхронизации.ИДБазы + "OrderAgent" + XMLСтрока(ПараметрыСинхронизации.ОбъектСинхронизации));
	Структура.Вставить("OrderId", XMLСтрока(ПараметрыСинхронизации.ОбъектСинхронизации));
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть();
	
	Структура = Новый Структура; 				
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_НедвижимостьВЗаказахОстатки.ЗаказКлиента КАК ЗаказКлиента,
	|	УПДК_НедвижимостьВЗаказахОстатки.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	УПДК_ЗаказКлиента.Дата КАК Дата,
	|	УПДК_ЗабронированнаяНедвижимостьСрезПоследних.СрокБронирования КАК СрокБронирования,
	|	УПДК_ЗаказКлиента.Клиент КАК Клиент,
	|	СделкиОбщая.Сделка КАК Сделка
	|ИЗ
	|	РегистрНакопления.УПДК_НедвижимостьВЗаказах.Остатки КАК УПДК_НедвижимостьВЗаказахОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УПДК_ЗаказКлиента КАК УПДК_ЗаказКлиента
	|		ПО УПДК_НедвижимостьВЗаказахОстатки.ЗаказКлиента = УПДК_ЗаказКлиента.Ссылка
	|			И УПДК_НедвижимостьВЗаказахОстатки.ОбъектНедвижимости = УПДК_ЗаказКлиента.ОбъектНедвижимости
	|			И (УПДК_НедвижимостьВЗаказахОстатки.ЗаказКлиента = &ОбъектСинхронизации)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПДК_ЗабронированнаяНедвижимость.СрезПоследних КАК УПДК_ЗабронированнаяНедвижимостьСрезПоследних
	|		ПО УПДК_НедвижимостьВЗаказахОстатки.ЗаказКлиента = УПДК_ЗабронированнаяНедвижимостьСрезПоследних.ЗаказКлиента
	|			И УПДК_НедвижимостьВЗаказахОстатки.ОбъектНедвижимости = УПДК_ЗабронированнаяНедвижимостьСрезПоследних.ОбъектНедвижимости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СделкиОбщая КАК СделкиОбщая
	|		ПО УПДК_НедвижимостьВЗаказахОстатки.ОбъектНедвижимости = СделкиОбщая.ОбъектНедвижимости
	|ГДЕ
	|	УПДК_НедвижимостьВЗаказахОстатки.КоличествоОстаток > 0";
	
	Запрос.УстановитьПараметр("ОбъектСинхронизации", ПараметрыСинхронизации.ОбъектСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНедвижимостьВЗаказахОстатки = РезультатЗапроса.Выбрать();
	
	Если ВыборкаНедвижимостьВЗаказахОстатки.Следующий() Тогда
		
		Если Не ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиента.Агент) Тогда
			Возврат;
		КонецЕсли;

		//+Никонов
		Структура.Вставить("ID_Сделки", XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.Сделка));
		Структура.Вставить("Id_Квартиры", XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.ОбъектНедвижимости));
		//-Никонов
		
		Структура.Вставить("ObjectId", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиента.Агент));
		Структура.Вставить("objectid_flat", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаНедвижимостьВЗаказахОстатки.ОбъектНедвижимости)); 
		Структура.Вставить("objectid_customer", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаНедвижимостьВЗаказахОстатки.Клиент));
		Структура.Вставить("Дата_Брони", Формат(ВыборкаНедвижимостьВЗаказахОстатки.Дата,"ДФ=yyyy-MM-dd")); 
		Структура.Вставить("Срок_Брони", Формат(ВыборкаНедвижимостьВЗаказахОстатки.СрокБронирования,"ДФ=yyyy-MM-dd")); 
		Структура.Вставить("StatusId", Число(ПараметрыСинхронизации.ИдБазы) * 2 - 1); 
		
		//Структура.Вставить("id_агента", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиента.Агент), ПараметрыСинхронизации.ИДБазы + "agent" + XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиента.Агент),""));
		//Структура.Вставить("id_менеджера", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиента.Ответственный), ПараметрыСинхронизации.ИДБазы + "manager" + XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиента.Ответственный),""));
		
		Структура.Вставить("id_агента", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиента.Агент), XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиента.Агент),""));
		Структура.Вставить("id_менеджера", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиента.Ответственный), XMLСтрока(ВыборкаНедвижимостьВЗаказахОстатки.ЗаказКлиента.Ответственный),""));
		Структура.Вставить("фамилия_клиента", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВЗаказахОстатки.Клиент),Строка(ВыборкаНедвижимостьВЗаказахОстатки.Клиент),""));
		
		
	Иначе
		
		Структура.Вставить("StatusId", Число(ПараметрыСинхронизации.ИдБазы) * 2);		
		
	КонецЕсли;
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();
	
	
	мСтрока = "ApplicationId=" + ПараметрыСинхронизации.ИДБазыАгентов + "&create0=" + Json1 + "&update0=" + Json2;
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_БроньАгент", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
	
	//Агент должен ыть уже расшарен для текущей базы
	//Если Структура.Свойство("ObjectId") Тогда
	//	ДобавитьВДругойТенантНаСервере(ПараметрыСинхронизации, Структура.ObjectId, ПараметрыСинхронизации.ИДБазы); 
	//КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура СобытиеДоговор (ПараметрыСинхронизации)
	#Область СобытиеДоговор				
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение("crm4devru-admin.mobsted.ru",,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v6/events/createupdate"); 
	
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
	
	// определить статус договора и в зависимости от этого определяем "ActionName"
	Структура = Новый Структура;
	
	Если ПараметрыСинхронизации.ОбъектСинхронизации.Статус = Перечисления.СтатусыДоговоровСПокупателями.НаОформлении тогда
		
		Структура.Вставить("ActionName", "Оформление договора");
		
	ИначеЕсли ПараметрыСинхронизации.ОбъектСинхронизации.Статус = Перечисления.СтатусыДоговоровСПокупателями.НаПодписании тогда
		
		Структура.Вставить("ActionName", "Договор на подписании");
		
	ИначеЕсли ПараметрыСинхронизации.ОбъектСинхронизации.Статус = Перечисления.СтатусыДоговоровСПокупателями.Подписан тогда
		
		Структура.Вставить("ActionName", "Договор подписан");
		
	Иначе 
		
		Структура.Вставить("ActionName", "Договор отменен");
		
	КонецЕсли;
	
	Структура.Вставить("ScreenId", 0);
	//Структура.Вставить("ContractId", ПараметрыСинхронизации.ИДБазы + "Contract" + Строка(ПараметрыСинхронизации.ОбъектСинхронизации.УникальныйИдентификатор())); 				
	Структура.Вставить("ContractId",Строка(ПараметрыСинхронизации.ОбъектСинхронизации.УникальныйИдентификатор()));   
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть();
	
	Структура = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УПДК_НедвижимостьВПродажеОстатки.ОбъектНедвижимости КАК ОбъектНедвижимости,
	               |	УПДК_НедвижимостьВПродажеОстатки.Договор КАК Договор,
	               |	УПДК_НедвижимостьВПродажеОстатки.Договор.Агент КАК Агент,
	               |	УПДК_НедвижимостьВПродажеОстатки.Договор.Ответственный КАК Ответственный,
	               |	РеализацияНедвижимости.Клиент КАК Клиент,
	               |	РеализацияНедвижимости.Дата КАК Дата,
	               |	СделкиОбщая.Сделка КАК Сделка
	               |ИЗ
	               |	РегистрНакопления.УПДК_НедвижимостьВПродаже.Остатки КАК УПДК_НедвижимостьВПродажеОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияНедвижимости КАК РеализацияНедвижимости
	               |			ПРАВОЕ СОЕДИНЕНИЕ РегистрСведений.СделкиОбщая КАК СделкиОбщая
	               |			ПО (СделкиОбщая.Договор = РеализацияНедвижимости.Ссылка)
	               |		ПО УПДК_НедвижимостьВПродажеОстатки.Договор = РеализацияНедвижимости.Ссылка
	               |			И (УПДК_НедвижимостьВПродажеОстатки.Договор = &ОбъектСинхронизации)
	               |ГДЕ
	               |	УПДК_НедвижимостьВПродажеОстатки.КоличествоОстаток > 0";
	
	Запрос.УстановитьПараметр("ОбъектСинхронизации", ПараметрыСинхронизации.ОбъектСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНедвижимостьВПродаже = РезультатЗапроса.Выбрать();
	
	Если ВыборкаНедвижимостьВПродаже.Следующий() Тогда
		
		//+Никонов
		Структура.Вставить("ID_Сделки", XMLСтрока(ВыборкаНедвижимостьВПродаже.Сделка));
		Структура.Вставить("Id_Квартиры", XMLСтрока(ВыборкаНедвижимостьВПродаже.ОбъектНедвижимости));
		//-Никонов

		Структура.Вставить("ObjectId", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаНедвижимостьВПродаже.Клиент));
		Структура.Вставить("objectid_flat", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаНедвижимостьВПродаже.ОбъектНедвижимости)); 
		Структура.Вставить("objectid_customer", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаНедвижимостьВПродаже.Клиент)); 
		Структура.Вставить("Дата_Договора", Формат(ВыборкаНедвижимостьВПродаже.Дата,"ДФ=yyyy-MM-dd")); 
		Структура.Вставить("StatusId", Число(ПараметрыСинхронизации.ИдБазы) * 2 -  1); 
		
		//Структура.Вставить("id_агента", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВПродаже.Агент), ПараметрыСинхронизации.ИДБазы + "agent" + XMLСтрока(ВыборкаНедвижимостьВПродаже.Агент),""));
		//Структура.Вставить("id_менеджера", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВПродаже.Ответственный), ПараметрыСинхронизации.ИДБазы + "manager" + XMLСтрока(ВыборкаНедвижимостьВПродаже.Ответственный),""));
		Структура.Вставить("id_агента", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВПродаже.Агент), XMLСтрока(ВыборкаНедвижимостьВПродаже.Агент),""));
		Структура.Вставить("id_менеджера", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВПродаже.Ответственный), XMLСтрока(ВыборкаНедвижимостьВПродаже.Ответственный),""));
		
		Структура.Вставить("фамилия_клиента", ?(ЗначениеЗаполнено(ВыборкаНедвижимостьВПродаже.Клиент),Строка(ВыборкаНедвижимостьВПродаже.Клиент),""));
		
	Иначе
		
		Структура.Вставить("StatusId", Число(ПараметрыСинхронизации.ИдБазы) * 2);		
		
	КонецЕсли;
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();
	
	
	мСтрока = "ApplicationId=" + ПараметрыСинхронизации.ИДБазы + "&create0=" + Json1 + "&update0=" + Json2;	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ДоговорСКлиентом", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
	
	Если мРезультат.КодСостояния = 200 Тогда
		ОчиститьMobsted_ДанныеДляСинхронизации(ПараметрыСинхронизации.ОбъектСинхронизации);
	Иначе
		ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
	КонецЕсли;
	
	#КонецОбласти	
	
КонецПроцедуры

//+Никонов, Оригинал, переделан в копии, так как нужен был другая структура. 
//Здесь сохранен исходник, который был написан для метода api/v6/events/createupdate 
//
Процедура Гарантия1(ПараметрыСинхронизации) Экспорт
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_Претензия.Статус КАК Статус,
	|	УПДК_Претензия.Ссылка КАК Ссылка,
	|	УПДК_Претензия.Клиент КАК Клиент,
	|	УПДК_Претензия.Описание КАК Описание,
	|	УПДК_Претензия.Номер КАК Номер,
	|	УПДК_Претензия.Претензии.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Дата КАК Дата,
	|		ВидГарантийныхРабот КАК ВидГарантийныхРабот,
	|		Подрядчик КАК Подрядчик,
	|		Статус КАК Статус,
	|		Комментарий КАК Комментарий,
	|		Описание КАК Описание,
	|		КрайнийСрок КАК КрайнийСрок,
	|		Подразделение КАК Подразделение,
	|		СобственнымиСилами КАК СобственнымиСилами,
	|		СрокГарантииВГодах КАК СрокГарантииВГодах,
	|		Гарантийная КАК Гарантийная,
	|		ДатаПередачиПодрядчику КАК ДатаПередачиПодрядчику,
	|		ДатаВРаботе КАК ДатаВРаботе,
	|		ДатаЗакрытия КАК ДатаЗакрытия,
	|		Исполнитель КАК Исполнитель
	|	) КАК Претензии,
	|	УПДК_Претензия.Объект.ВидНедвижимости КАК ВидНедвижимости,
	|	УПДК_Претензия.Объект.Район КАК ЖК,
	|	УПДК_Претензия.Объект.Объект КАК Дом,
	|	УПДК_Претензия.Объект.Секция КАК Подъезд,
	|	УПДК_Претензия.Объект.НомерУсловный КАК Квартира
	|ИЗ
	|	Документ.УПДК_Претензия КАК УПДК_Претензия
	|ГДЕ
	|	УПДК_Претензия.Ссылка = &ОбъектСинхронизации";
	
	Запрос.УстановитьПараметр("ОбъектСинхронизации", ОбъектСинхронизации);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ИДбазы = ПараметрыСинхронизации.ИДбазы;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v6/events/createupdate"); 
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded"); 	
	
	Структура = Новый Структура;
	Структура.Вставить("ActionName", "Гарантия");                                      
	Структура.Вставить("ScreenId", 0);
	//Структура.Вставить("EventId", ПараметрыСинхронизации.ИДБазы + "EventCustomer" + XMLСтрока(Событие.Ссылка));
	Структура.Вставить("EventId",XMLСтрока(ОбъектСинхронизации));
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть();
	
	Структура = Новый Структура;
	//Структура.Вставить("ID_Клиента", ИДбазы + "customer" + XMLСтрока(Выборка.Клиент));
	Структура.Вставить("ObjectId", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(Выборка.Клиент));  
	Структура.Вставить("number",Строка(Выборка.Номер));
	
	//Структура.Вставить("ID_Квартиры", ИДбазы + "kv" + XMLСтрока(Выборка.ОбъектНедвижимости));
	Попытка
		Структура.Вставить("objectid_flat", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(Выборка.Предмет)); 
	Исключение
	КонецПопытки;
	Структура.Вставить("objectid_customer", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(Выборка.Клиент));
	//Структура.Вставить("objectid_object", Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(Выборка.Объект));
	
	Структура.Вставить("Комментарий", Строка(Выборка.Описание));
	//Структура.Вставить("Описание", Строка(Выборка.Описание));
	Структура.Вставить("Статус_гарантии", Строка(Выборка.Статус));
	
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();
	
	мСтрока = "ApplicationId=" + ПараметрыСинхронизации.ИДБазы + "&create0=" + Json1 + "&update0=" + Json2;	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеГарантии", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();   	
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
	
	Если мРезультат.КодСостояния = 200 Тогда
		
		HTTPЗапрос = Новый HTTPЗапрос("/api/v8/list/createupdate"); 
		HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded"); 
		
		СтрокаЗапроса = "listId=12&tableName=guarantee";
		
		ВыборкаГР = Выборка.Претензии.Выбрать();  
		СтрокаГР = "";
		к=0;
		Разделитель= "&";
		НомерГарантии = Выборка.Номер;
		
		Пока ВыборкаГР.Следующий() Цикл 
			
			Структура1 = Новый Структура;
			Структура1.Вставить("typeOfWork", XMLСтрока(ВыборкаГР.ВидГарантийныхРабот)); 
			Структура1.Вставить("event_id", XMLСтрока(ОбъектСинхронизации));   
			Структура1.Вставить("number", НомерГарантии);
			
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура1);
			Json1 = Запись.Закрыть();
			
			Структура2 = Новый Структура;
			
			Структура2.Вставить("workStatus", XMLСтрока(ВыборкаГР.Статус));
			Структура2.Вставить("description", XMLСтрока(ВыборкаГР.Комментарий));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура2);
			Json2 = Запись.Закрыть();     
			
			Crerate = "c"+Строка(к);
			Update = "u"+Строка(к);
			//Структура.Вставить(Crerate,Структура1);
			//Структура.Вставить(Update,Структура2);
			
			СтрокаЗапроса = СтрокаЗапроса +  "&" + Crerate + "=" + Json1 + "&" + Update + "="+Json2;
			к = к + 1; 	
			
		КонецЦикла;
		//Структура.Вставить("Гарантийные_работы", ГР);
		//	
		//Запись = Новый ЗаписьJSON;
		//Запись.УстановитьСтроку();
		//ЗаписатьJSON(Запись, Структура);
		//Json2 = Запись.Закрыть();
		
		мСтрока = СтрокаЗапроса;	
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеРаботГарантии", ТекущаяДатаСеанса(), мСтрока);
		
		мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();   	
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки));  
		
		Если мРезультат.КодСостояния = 200 Тогда
			ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
		Иначе
			ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
		КонецЕсли;
		
	Иначе
		ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
	КонецЕсли;	
	
	//ЗаписатьИД(СтруктураЗаявки.response, ОбъектСинхронизации, ПараметрыСинхронизации, Истина);			
	
КонецПроцедуры

//+Никонов переделанный оригинал, нужна была другая структура отправки json.
//текущая процедура написана по методу api/v8/events
//В случае успеха удалить процедуру Гарантия1
//
Процедура Гарантия2(ПараметрыСинхронизации) Экспорт
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_Претензия.Статус КАК Статус,
	|	УПДК_Претензия.Ссылка КАК Ссылка,
	|	УПДК_Претензия.Клиент КАК Клиент,
	|	УПДК_Претензия.Описание КАК Описание,
	|	УПДК_Претензия.Номер КАК Номер,
	|	УПДК_Претензия.Объект.ВидНедвижимости КАК ВидНедвижимости,
	|	УПДК_Претензия.Объект.Район КАК ЖК,
	|	УПДК_Претензия.Объект.Объект КАК Дом,
	|	УПДК_Претензия.Объект.Секция КАК Подъезд,
	|	УПДК_Претензия.Объект.НомерУсловный КАК Квартира,
	|	УПДК_Претензия.Автор КАК Автор,
	|	УПДК_Претензия.Объект КАК Объект
	|ИЗ
	|	Документ.УПДК_Претензия КАК УПДК_Претензия
	|ГДЕ
	|	УПДК_Претензия.Ссылка = &ОбъектСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПДК_ПретензияПретензии.ВидГарантийныхРабот КАК ВидГарантийныхРабот,
	|	УПДК_ПретензияПретензии.Статус КАК Статус,
	|	УПДК_ПретензияПретензии.Комментарий КАК Комментарий,
	|	УПДК_ПретензияПретензии.Описание КАК Описание
	|ИЗ
	|	Документ.УПДК_Претензия.Претензии КАК УПДК_ПретензияПретензии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УПДК_Претензия КАК УПДК_Претензия
	|		ПО УПДК_ПретензияПретензии.Ссылка = УПДК_Претензия.Ссылка
	|ГДЕ
	|	УПДК_Претензия.Ссылка = &ОбъектСинхронизации";
	
	Запрос.УстановитьПараметр("ОбъектСинхронизации", ОбъектСинхронизации);
	
	Сч = 1;
	Пока Сч<=2 Цикл
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВыборкаОбъекта = РезультатЗапроса[0].Выбрать();
		ВыборкаОбъекта.Следующий();
		ВыборкаВидаРабота = РезультатЗапроса[1].Выбрать();
		
		Если РезультатЗапроса.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИДбазы = ПараметрыСинхронизации.ИДбазы;
		
		Структура = Новый Структура;
		Структура.Вставить("идКвартиры", XMLСтрока(ВыборкаОбъекта.Объект));  
		Структура.Вставить("видОбъекта", Строка(ВыборкаОбъекта.ВидНедвижимости));  
		Структура.Вставить("район", Строка(ВыборкаОбъекта.ЖК));  
		Структура.Вставить("дом", Строка(ВыборкаОбъекта.Дом));  
		Структура.Вставить("подъезд", Строка(ВыборкаОбъекта.Подъезд));  
		Структура.Вставить("квартира", Строка(ВыборкаОбъекта.Квартира));  
		Структура.Вставить("клиент", Строка(ВыборкаОбъекта.Клиент));  
		Структура.Вставить("идЗаявки", XMLСтрока(ВыборкаОбъекта.Ссылка));  
		Структура.Вставить("номерЗаявки", Строка(ВыборкаОбъекта.Номер));  
		Структура.Вставить("статусЗаявки", Строка(ВыборкаОбъекта.Статус));
		
		Инд = 1;
		Пока Инд <= 10 Цикл
			Если ВыборкаВидаРабота.Следующий() Тогда
				Ключ = "видРабот" + Инд;
				Значение = Строка(ВыборкаВидаРабота.ВидГарантийныхРабот);
				Структура.Вставить(Ключ, Значение);
				Ключ = "описание" + Инд;
				Значение = Строка(ВыборкаВидаРабота.Описание);
				Структура.Вставить(Ключ, Значение);
				Ключ = "комментарий" + Инд;
				Значение = Строка(ВыборкаВидаРабота.Комментарий);
				Структура.Вставить(Ключ, Значение); 
				Ключ = "статус" + Инд;
				Значение =Строка(ВыборкаВидаРабота.Статус);
				Структура.Вставить(Ключ, Значение); 
				Ключ = "фото" + Инд;
				Если НЕ Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации) = Неопределено Тогда
					Значение = Mobsted_ВызовСервера.ВернутьСсылкуПрисоединенногоФайла(ПараметрыСинхронизации, Инд);
				Иначе
					Значение = "";
				КонецЕсли; 
				Структура.Вставить(Ключ, Значение); 
			Иначе	
				Ключ = "видРабот" + Инд;
				Значение = "";
				Структура.Вставить(Ключ, Значение);
				Ключ = "описание" + Инд;
				Значение = "";
				Структура.Вставить(Ключ, Значение);
				Ключ = "комментарий" + Инд;
				Значение = "";
				Структура.Вставить(Ключ, Значение); 
				Ключ = "статус" + Инд;
				Значение = "";
				Структура.Вставить(Ключ, Значение); 
				Ключ = "фото" + Инд;
				Значение = "";
				Структура.Вставить(Ключ, Значение);
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();
		
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()); 
		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
		HTTPЗапрос = Новый HTTPЗапрос("api/v8/events");
		HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		ObjectId = Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаОбъекта.Клиент);
		StatusId = "25";
		
		мСтрока = "ApplicationId=" + ПараметрыСинхронизации.ИДБазы + "&Value=" + Json2 + "&ObjectId=" + ObjectId + "&ScreenId=202" + "&ActionName=Гарантия" + "&StatusId=" + StatusId;
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеГарантии", ТекущаяДатаСеанса(), мСтрока);
		
		мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ОтветHTTP = мРезультат.ПолучитьТелоКакСтроку();
		
		Если Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации) = Неопределено Тогда
			ЗаписатьИДEvent(ОтветHTTP, ОбъектСинхронизации, ПараметрыСинхронизации,Ложь);
		КонецЕсли; 
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ОтветHTTP); 
		
		Если мРезультат.КодСостояния = 200 Тогда
			ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
		Иначе
			ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
		КонецЕсли;
		Сч = Сч +1;	
	КонецЦикла;
КонецПроцедуры

//+Никонов рабочий вариант
// если что, то оставить его
Процедура Гарантия4(ПараметрыСинхронизации) Экспорт
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_Претензия.Статус КАК Статус,
	|	УПДК_Претензия.Ссылка КАК Ссылка,
	|	УПДК_Претензия.Клиент КАК Клиент,
	|	УПДК_Претензия.Описание КАК Описание,
	|	УПДК_Претензия.Номер КАК Номер,
	|	УПДК_Претензия.Объект.ВидНедвижимости КАК ВидНедвижимости,
	|	УПДК_Претензия.Объект.Район КАК ЖК,
	|	УПДК_Претензия.Объект.Объект КАК Дом,
	|	УПДК_Претензия.Объект.Секция КАК Подъезд,
	|	УПДК_Претензия.Объект.НомерУсловный КАК Квартира,
	|	УПДК_Претензия.Автор КАК Автор,
	|	УПДК_Претензия.Объект КАК Объект
	|ИЗ
	|	Документ.УПДК_Претензия КАК УПДК_Претензия
	|ГДЕ
	|	УПДК_Претензия.Ссылка = &ОбъектСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПДК_ПретензияПретензии.ВидГарантийныхРабот КАК ВидГарантийныхРабот,
	|	УПДК_ПретензияПретензии.Статус КАК Статус,
	|	УПДК_ПретензияПретензии.Комментарий КАК Комментарий,
	|	УПДК_ПретензияПретензии.Описание КАК Описание
	|ИЗ
	|	Документ.УПДК_Претензия.Претензии КАК УПДК_ПретензияПретензии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УПДК_Претензия КАК УПДК_Претензия
	|		ПО УПДК_ПретензияПретензии.Ссылка = УПДК_Претензия.Ссылка
	|ГДЕ
	|	УПДК_Претензия.Ссылка = &ОбъектСинхронизации";
	
	Запрос.УстановитьПараметр("ОбъектСинхронизации", ОбъектСинхронизации);
	
	Сч = 1;
	Пока Сч<=2 Цикл
		Если Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации) = Неопределено Тогда
			
			//POSTCreating One Event
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ВыборкаОбъекта = РезультатЗапроса[0].Выбрать();
			ВыборкаОбъекта.Следующий();
			ВыборкаВидаРабота = РезультатЗапроса[1].Выбрать();
			
			Если РезультатЗапроса.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ИДбазы = ПараметрыСинхронизации.ИДбазы;
			
			Структура = Новый Структура;
			Структура.Вставить("Id_Квартиры", XMLСтрока(ВыборкаОбъекта.Объект));
			Структура.Вставить("ID_Сделки", "");
			Структура.Вставить("видОбъекта", Строка(ВыборкаОбъекта.ВидНедвижимости));  
			Структура.Вставить("район", Строка(ВыборкаОбъекта.ЖК));  
			Структура.Вставить("дом", Строка(ВыборкаОбъекта.Дом));  
			Структура.Вставить("подъезд", Строка(ВыборкаОбъекта.Подъезд));  
			Структура.Вставить("квартира", Строка(ВыборкаОбъекта.Квартира));  
			Структура.Вставить("клиент", Строка(ВыборкаОбъекта.Клиент));  
			Структура.Вставить("идЗаявки", XMLСтрока(ВыборкаОбъекта.Ссылка));  
			Структура.Вставить("номерЗаявки", Строка(ВыборкаОбъекта.Номер));  
			Структура.Вставить("статусЗаявки", Строка(ВыборкаОбъекта.Статус));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json1 = Запись.Закрыть();
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()); 
			
			HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
			HTTPЗапрос = Новый HTTPЗапрос("api/v8/events");
			HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			
			ObjectId = Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаОбъекта.Клиент);
			StatusId = "25";
			
			мСтрока = "ApplicationId=" + ПараметрыСинхронизации.ИДБазы + "&Value=" + Json1 + "&ObjectId=" + ObjectId + "&ScreenId=202" + "&ActionName=Гарантия" + "&StatusId=" + StatusId;
			
			HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_СозданиеГарантии", ТекущаяДатаСеанса(), мСтрока);
			
			мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			ОтветHTTP = мРезультат.ПолучитьТелоКакСтроку();
			
			ЗаписатьИДEvent(ОтветHTTP, ОбъектСинхронизации, ПараметрыСинхронизации,Ложь);
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ОтветHTTP);
			
			Если мРезультат.КодСостояния = 200 Тогда
				ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
			Иначе
				ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
			КонецЕсли;
			
			
			
		Иначе
			//PUTUpdating the Event
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ВыборкаОбъекта = РезультатЗапроса[0].Выбрать();
			ВыборкаОбъекта.Следующий();
			ВыборкаВидаРабота = РезультатЗапроса[1].Выбрать();
			
			Если РезультатЗапроса.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ИДбазы = ПараметрыСинхронизации.ИДбазы;
			
			Структура = Новый Структура;
			Структура.Вставить("идКвартиры", XMLСтрока(ВыборкаОбъекта.Объект));  
			Структура.Вставить("видОбъекта", Строка(ВыборкаОбъекта.ВидНедвижимости));  
			Структура.Вставить("район", Строка(ВыборкаОбъекта.ЖК));  
			Структура.Вставить("дом", Строка(ВыборкаОбъекта.Дом));  
			Структура.Вставить("подъезд", Строка(ВыборкаОбъекта.Подъезд));  
			Структура.Вставить("квартира", Строка(ВыборкаОбъекта.Квартира));  
			Структура.Вставить("клиент", Строка(ВыборкаОбъекта.Клиент));  
			Структура.Вставить("идЗаявки", XMLСтрока(ВыборкаОбъекта.Ссылка));  
			Структура.Вставить("номерЗаявки", Строка(ВыборкаОбъекта.Номер));  
			Структура.Вставить("статусЗаявки", Строка(ВыборкаОбъекта.Статус));
			
			Инд = 1;
			Пока Инд <= 10 Цикл
				Если ВыборкаВидаРабота.Следующий() Тогда
					Ключ = "видРабот" + Инд;
					Значение = Строка(ВыборкаВидаРабота.ВидГарантийныхРабот);
					Структура.Вставить(Ключ, Значение);
					Ключ = "описание" + Инд;
					Значение = Строка(ВыборкаВидаРабота.Описание);
					Структура.Вставить(Ключ, Значение);
					Ключ = "комментарий" + Инд;
					Значение = Строка(ВыборкаВидаРабота.Комментарий);
					Структура.Вставить(Ключ, Значение); 
					Ключ = "статус" + Инд;
					Значение =Строка(ВыборкаВидаРабота.Статус);
					Структура.Вставить(Ключ, Значение); 
					Ключ = "фото" + Инд;
					Если НЕ Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации) = Неопределено Тогда
						Значение = Mobsted_ВызовСервера.ВернутьСсылкуПрисоединенногоФайла(ПараметрыСинхронизации, Инд);
					Иначе
						Значение = "";
					КонецЕсли; 
					Структура.Вставить(Ключ, Значение); 
				Иначе	
					Ключ = "видРабот" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение);
					Ключ = "описание" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение);
					Ключ = "комментарий" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение); 
					Ключ = "статус" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение); 
					Ключ = "фото" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение);
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json1 = Запись.Закрыть();
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()); 
			
			HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
			
			EventID = Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации);
			StatusId = "25";

			мСтрока = EventID + "?ActionName=Гарантия" + "&Value=" + Json1 + "&ApplicationId="  + ПараметрыСинхронизации.ИДБазы;
			//мСтрока = EventID + "?Value=" + Json1;
			HTTPЗапрос = Новый HTTPЗапрос("api/v8/events/");
			HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеГарантии", ТекущаяДатаСеанса(), мСтрока);
			
			мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			ОтветHTTP = мРезультат.ПолучитьТелоКакСтроку();
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ОтветHTTP); 
			
			Если мРезультат.КодСостояния = 200 Тогда
				ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
			Иначе
				ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
			КонецЕсли;
			
		КонецЕсли;
		
		Сч = Сч +1;	
	КонецЦикла;
КонецПроцедуры
//-Никонов 

//+Никонов тестовый вариант с элементом body
Процедура Гарантия3(ПараметрыСинхронизации) Экспорт
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_Претензия.Статус КАК Статус,
	|	УПДК_Претензия.Ссылка КАК Ссылка,
	|	УПДК_Претензия.Клиент КАК Клиент,
	|	УПДК_Претензия.Описание КАК Описание,
	|	УПДК_Претензия.Номер КАК Номер,
	|	УПДК_Претензия.Объект.ВидНедвижимости КАК ВидНедвижимости,
	|	УПДК_Претензия.Объект.Район КАК ЖК,
	|	УПДК_Претензия.Объект.Объект КАК Дом,
	|	УПДК_Претензия.Объект.Секция КАК Подъезд,
	|	УПДК_Претензия.Объект.НомерУсловный КАК Квартира,
	|	УПДК_Претензия.Автор КАК Автор,
	|	УПДК_Претензия.Объект КАК Объект
	|ИЗ
	|	Документ.УПДК_Претензия КАК УПДК_Претензия
	|ГДЕ
	|	УПДК_Претензия.Ссылка = &ОбъектСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПДК_ПретензияПретензии.ВидГарантийныхРабот КАК ВидГарантийныхРабот,
	|	УПДК_ПретензияПретензии.Статус КАК Статус,
	|	УПДК_ПретензияПретензии.Комментарий КАК Комментарий,
	|	УПДК_ПретензияПретензии.Описание КАК Описание
	|ИЗ
	|	Документ.УПДК_Претензия.Претензии КАК УПДК_ПретензияПретензии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УПДК_Претензия КАК УПДК_Претензия
	|		ПО УПДК_ПретензияПретензии.Ссылка = УПДК_Претензия.Ссылка
	|ГДЕ
	|	УПДК_Претензия.Ссылка = &ОбъектСинхронизации";
	
	Запрос.УстановитьПараметр("ОбъектСинхронизации", ОбъектСинхронизации);
	
	Сч = 1;
	Пока Сч<=2 Цикл
		Если Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации) = Неопределено Тогда
			
			//POSTCreating One Event
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ВыборкаОбъекта = РезультатЗапроса[0].Выбрать();
			ВыборкаОбъекта.Следующий();
			ВыборкаВидаРабота = РезультатЗапроса[1].Выбрать();
			
			Если РезультатЗапроса.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ИДбазы = ПараметрыСинхронизации.ИДбазы;
			
			Структура = Новый Структура;
			Структура.Вставить("идКвартиры", XMLСтрока(ВыборкаОбъекта.Объект));  
			Структура.Вставить("видОбъекта", Строка(ВыборкаОбъекта.ВидНедвижимости));  
			Структура.Вставить("район", Строка(ВыборкаОбъекта.ЖК));  
			Структура.Вставить("дом", Строка(ВыборкаОбъекта.Дом));  
			Структура.Вставить("подъезд", Строка(ВыборкаОбъекта.Подъезд));  
			Структура.Вставить("квартира", Строка(ВыборкаОбъекта.Квартира));  
			Структура.Вставить("клиент", Строка(ВыборкаОбъекта.Клиент));  
			Структура.Вставить("идЗаявки", XMLСтрока(ВыборкаОбъекта.Ссылка));  
			Структура.Вставить("номерЗаявки", Строка(ВыборкаОбъекта.Номер));  
			Структура.Вставить("статусЗаявки", Строка(ВыборкаОбъекта.Статус));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json1 = Запись.Закрыть();
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()); 
			
			HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
			HTTPЗапрос = Новый HTTPЗапрос("api/v8/events");
			HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			
			ObjectId = Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаОбъекта.Клиент);
			StatusId = "25";
			
			мСтрока = "ApplicationId=" + ПараметрыСинхронизации.ИДБазы + "&Value=" + Json1 + "&ObjectId=" + ObjectId + "&ScreenId=202" + "&ActionName=Гарантия" + "&StatusId=" + StatusId;
			
			HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_СозданиеГарантии", ТекущаяДатаСеанса(), мСтрока);
			
			мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			ОтветHTTP = мРезультат.ПолучитьТелоКакСтроку();
			
			ЗаписатьИДEvent(ОтветHTTP, ОбъектСинхронизации, ПараметрыСинхронизации,Ложь);
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ОтветHTTP);
			
			Если мРезультат.КодСостояния = 200 Тогда
				ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
			Иначе
				ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
			КонецЕсли;
			
		Иначе
			//PUTUpdating the Event
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ВыборкаОбъекта = РезультатЗапроса[0].Выбрать();
			ВыборкаОбъекта.Следующий();
			ВыборкаВидаРабота = РезультатЗапроса[1].Выбрать();
			
			Если РезультатЗапроса.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ИДбазы = ПараметрыСинхронизации.ИДбазы;
			
			Структура = Новый Структура;
			Структура.Вставить("идКвартиры", XMLСтрока(ВыборкаОбъекта.Объект));  
			Структура.Вставить("видОбъекта", Строка(ВыборкаОбъекта.ВидНедвижимости));  
			Структура.Вставить("район", Строка(ВыборкаОбъекта.ЖК));  
			Структура.Вставить("дом", Строка(ВыборкаОбъекта.Дом));  
			Структура.Вставить("подъезд", Строка(ВыборкаОбъекта.Подъезд));  
			Структура.Вставить("квартира", Строка(ВыборкаОбъекта.Квартира));  
			Структура.Вставить("клиент", Строка(ВыборкаОбъекта.Клиент));  
			Структура.Вставить("идЗаявки", XMLСтрока(ВыборкаОбъекта.Ссылка));  
			Структура.Вставить("номерЗаявки", Строка(ВыборкаОбъекта.Номер));  
			Структура.Вставить("статусЗаявки", Строка(ВыборкаОбъекта.Статус));
			
			
			Инд = 1;
			Пока Инд <= 10 Цикл
				Если ВыборкаВидаРабота.Следующий() Тогда
					Ключ = "видРабот" + Инд;
					Значение = Строка(ВыборкаВидаРабота.ВидГарантийныхРабот);
					Структура.Вставить(Ключ, Значение);
					Ключ = "описание" + Инд;
					Значение = Строка(ВыборкаВидаРабота.Описание);
					Структура.Вставить(Ключ, Значение);
					Ключ = "комментарий" + Инд;
					Значение = Строка(ВыборкаВидаРабота.Комментарий);
					Структура.Вставить(Ключ, Значение); 
					Ключ = "статус" + Инд;
					Значение =Строка(ВыборкаВидаРабота.Статус);
					Структура.Вставить(Ключ, Значение); 
					Ключ = "фото" + Инд;
					Если НЕ Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации) = Неопределено Тогда
						Значение = Mobsted_ВызовСервера.ВернутьСсылкуПрисоединенногоФайла(ПараметрыСинхронизации, Инд);
					Иначе
						Значение = "";
					КонецЕсли; 
					Структура.Вставить(Ключ, Значение); 
				Иначе	
					Ключ = "видРабот" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение);
					Ключ = "описание" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение);
					Ключ = "комментарий" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение); 
					Ключ = "статус" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение); 
					Ключ = "фото" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение);
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json1 = Запись.Закрыть();
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()); 
			
			HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
			
			EventID = Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации);
			StatusId = "25";

			мСтрока = "/" + EventID + "?ActionName=Гарантия" + "&Value=" + Json1 + "&ApplicationId="  + ПараметрыСинхронизации.ИДБазы;
			HTTPЗапрос = Новый HTTPЗапрос("api/v8/events" + мСтрока);
			HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеГарантии", ТекущаяДатаСеанса(), мСтрока);
			
			////мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			мРезультат = HTTPСоединение.Записать(HTTPЗапрос);
			ОтветHTTP = мРезультат.ПолучитьТелоКакСтроку();
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ОтветHTTP); 
			
			Если мРезультат.КодСостояния = 200 Тогда
				ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
			Иначе
				ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
			КонецЕсли;
			
		КонецЕсли;
		
		Сч = Сч +1;	
	КонецЦикла;
КонецПроцедуры
//-Никонов

//+Никонов тестовый вариант с элементом body
Процедура Гарантия(ПараметрыСинхронизации) Экспорт
	
	ОбъектСинхронизации = ПараметрыСинхронизации.ОбъектСинхронизации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_Претензия.Статус КАК Статус,
	|	УПДК_Претензия.Ссылка КАК Ссылка,
	|	УПДК_Претензия.Клиент КАК Клиент,
	|	УПДК_Претензия.Описание КАК Описание,
	|	УПДК_Претензия.Номер КАК Номер,
	|	УПДК_Претензия.Объект.ВидНедвижимости КАК ВидНедвижимости,
	|	УПДК_Претензия.Объект.Район КАК ЖК,
	|	УПДК_Претензия.Объект.Объект КАК Дом,
	|	УПДК_Претензия.Объект.Секция КАК Подъезд,
	|	УПДК_Претензия.Объект.НомерУсловный КАК Квартира,
	|	УПДК_Претензия.Автор КАК Автор,
	|	УПДК_Претензия.Объект КАК Объект,
	|	УПДК_Претензия.Ответственный.Ссылка КАК ОтветственныйСсылка,
	|	УПДК_Претензия.Ответственный.ФизическоеЛицо КАК ОтветственныйФизическоеЛицо,
	|	УПДК_Претензия.ДатаВыполненияЗаявки КАК ДатаВыполненияЗаявки
	|ИЗ
	|	Документ.УПДК_Претензия КАК УПДК_Претензия
	|ГДЕ
	|	УПДК_Претензия.Ссылка = &ОбъектСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПДК_ПретензияПретензии.ВидГарантийныхРабот КАК ВидГарантийныхРабот,
	|	УПДК_ПретензияПретензии.Статус КАК Статус,
	|	УПДК_ПретензияПретензии.Комментарий КАК Комментарий,
	|	УПДК_ПретензияПретензии.Описание КАК Описание,
	|	УПДК_ПретензияПретензии.Подрядчик.Ссылка КАК ПодрядчикСсылка,
	|	УПДК_ПретензияПретензии.Подрядчик.ОсновноеКонтактноеЛицо КАК ПодрядчикОсновноеКонтактноеЛицо
	|ИЗ
	|	Документ.УПДК_Претензия.Претензии КАК УПДК_ПретензияПретензии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УПДК_Претензия КАК УПДК_Претензия
	|		ПО УПДК_ПретензияПретензии.Ссылка = УПДК_Претензия.Ссылка
	|ГДЕ
	|	УПДК_Претензия.Ссылка = &ОбъектСинхронизации";
	
	Запрос.УстановитьПараметр("ОбъектСинхронизации", ОбъектСинхронизации);
	
	Сч = 1;
	Пока Сч<=2 Цикл
		Если Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации) = Неопределено Тогда
			
			//POSTCreating One Event
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ВыборкаОбъекта = РезультатЗапроса[0].Выбрать();
			ВыборкаОбъекта.Следующий();
			ВыборкаВидаРабота = РезультатЗапроса[1].Выбрать();
			
			Если РезультатЗапроса.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ИДбазы = ПараметрыСинхронизации.ИДбазы;
			
			Структура = Новый Структура;
			Структура.Вставить("идКвартиры", XMLСтрока(ВыборкаОбъекта.Объект));  
			Структура.Вставить("видОбъекта", Строка(ВыборкаОбъекта.ВидНедвижимости));  
			Структура.Вставить("район", Строка(ВыборкаОбъекта.ЖК));  
			Структура.Вставить("дом", Строка(ВыборкаОбъекта.Дом));  
			Структура.Вставить("подъезд", Строка(ВыборкаОбъекта.Подъезд));  
			Структура.Вставить("квартира", Строка(ВыборкаОбъекта.Квартира));  
			Структура.Вставить("клиент", Строка(ВыборкаОбъекта.Клиент));  
			Структура.Вставить("идЗаявки", XMLСтрока(ВыборкаОбъекта.Ссылка));  
			Структура.Вставить("номерЗаявки", Строка(ВыборкаОбъекта.Номер));  
			Структура.Вставить("статусЗаявки", Строка(ВыборкаОбъекта.Статус));
			Структура.Вставить("фиоОтветственного", Строка(ВыборкаОбъекта.ОтветственныйФизическоеЛицо));
			Структура.Вставить("идОтветственного", XMLСтрока(ВыборкаОбъекта.ОтветственныйСсылка));
			Структура.Вставить("ДатаВыполненияЗаявки", Строка(ВыборкаОбъекта.ДатаВыполненияЗаявки));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json1 = Запись.Закрыть();
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()); 
			
			HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
			HTTPЗапрос = Новый HTTPЗапрос("api/v8/events");
			HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			
			ObjectId = Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ВыборкаОбъекта.Клиент);
			StatusId = "25";
			
			мСтрока = "ApplicationId=" + ПараметрыСинхронизации.ИДБазы + "&Value=" + Json1 + "&ObjectId=" + ObjectId + "&ScreenId=202" + "&ActionName=Гарантия" + "&StatusId=" + StatusId;
			
			HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_СозданиеГарантии", ТекущаяДатаСеанса(), мСтрока);
			
			мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			ОтветHTTP = мРезультат.ПолучитьТелоКакСтроку();
			
			ЗаписатьИДEvent(ОтветHTTP, ОбъектСинхронизации, ПараметрыСинхронизации,Ложь);
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ОтветHTTP);
			
			Если мРезультат.КодСостояния = 200 Тогда
				ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
			Иначе
				ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
			КонецЕсли;
			
		Иначе
			//PUTUpdating the Event
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ВыборкаОбъекта = РезультатЗапроса[0].Выбрать();
			ВыборкаОбъекта.Следующий();
			ВыборкаВидаРабота = РезультатЗапроса[1].Выбрать();
			
			ИДбазы = ПараметрыСинхронизации.ИДбазы;
			EventID = Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации);
			StatusId = "25";
			мАрес = "/" + EventID;
			
			Если РезультатЗапроса.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			СтруктураТелаЗапроса =  Новый Структура;
			СтруктураТелаЗапроса.Вставить("ApplicationId", ИДбазы);
			
			Структура = Новый Структура;
			Структура.Вставить("идКвартиры", XMLСтрока(ВыборкаОбъекта.Объект));  
			Структура.Вставить("видОбъекта", Строка(ВыборкаОбъекта.ВидНедвижимости));  
			Структура.Вставить("район", Строка(ВыборкаОбъекта.ЖК));  
			Структура.Вставить("дом", Строка(ВыборкаОбъекта.Дом));  
			Структура.Вставить("подъезд", Строка(ВыборкаОбъекта.Подъезд));  
			Структура.Вставить("квартира", Строка(ВыборкаОбъекта.Квартира));  
			Структура.Вставить("клиент", Строка(ВыборкаОбъекта.Клиент));  
			Структура.Вставить("идЗаявки", XMLСтрока(ВыборкаОбъекта.Ссылка));  
			Структура.Вставить("номерЗаявки", Строка(ВыборкаОбъекта.Номер));  
			Структура.Вставить("статусЗаявки", Строка(ВыборкаОбъекта.Статус));
			Структура.Вставить("фиоОтветственного", Строка(ВыборкаОбъекта.ОтветственныйФизическоеЛицо));
			Структура.Вставить("идОтветственного", XMLСтрока(ВыборкаОбъекта.ОтветственныйСсылка));
			Структура.Вставить("ДатаВыполненияЗаявки", Строка(ВыборкаОбъекта.ДатаВыполненияЗаявки));

			
			Инд = 1;
			Пока Инд <= 10 Цикл 
				Если ВыборкаВидаРабота.Следующий() Тогда
					Ключ = "видРабот" + Инд;
					Значение = Строка(ВыборкаВидаРабота.ВидГарантийныхРабот);
					Структура.Вставить(Ключ, Значение);
					Ключ = "описание" + Инд;
					Значение = Строка(ВыборкаВидаРабота.Описание);
					Структура.Вставить(Ключ, Значение);
					Ключ = "комментарий" + Инд;
					Значение = Строка(ВыборкаВидаРабота.Комментарий);
					Структура.Вставить(Ключ, Значение); 
					Ключ = "статус" + Инд;
					Значение = Строка(ВыборкаВидаРабота.Статус);
					Структура.Вставить(Ключ, Значение); 
					Ключ = "фото" + Инд;
					Если НЕ Mobsted_ВызовСервера.ПолучитьИдентификаторОбъекта(ОбъектСинхронизации) = Неопределено Тогда
						Значение = Mobsted_ВызовСервера.ВернутьСсылкуПрисоединенногоФайла(ПараметрыСинхронизации, Инд);
					Иначе
						Значение = "";
					КонецЕсли; 
					Структура.Вставить(Ключ, Значение);
					Ключ = "фиоРаботника" + Инд;
					Значение = ?(ЗначениеЗаполнено(ВыборкаВидаРабота.ПодрядчикОсновноеКонтактноеЛицо), Строка(ВыборкаВидаРабота.ПодрядчикОсновноеКонтактноеЛицо), "");
					Структура.Вставить(Ключ, Значение);
					Ключ = "идРаботника" + Инд;
					Значение = ?(ЗначениеЗаполнено(ВыборкаВидаРабота.ПодрядчикСсылка), XMLСтрока(ВыборкаВидаРабота.ПодрядчикСсылка), "");
					Структура.Вставить(Ключ, Значение); 
					
				Иначе	
					Ключ = "видРабот" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение);
					Ключ = "описание" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение);
					Ключ = "комментарий" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение); 
					Ключ = "статус" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение); 
					Ключ = "фото" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение);
					Ключ = "фиоРаботника" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение);
					Ключ = "идРаботника" + Инд;
					Значение = "";
					Структура.Вставить(Ключ, Значение); 
					
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
			
			СтруктураТелаЗапроса.Вставить("Value", Структура); 
			СтруктураТелаЗапроса.Вставить("ActionName", "Гарантия");
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, СтруктураТелаЗапроса);
			Json1 = Запись.Закрыть();
			
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()); 
			HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
			HTTPЗапрос = Новый HTTPЗапрос("api/v8/events" + мАрес);
			HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			
			//мСтрока = "ApplicationId=" + ПараметрыСинхронизации.ИДБазы + "&Value=" + Json1 + "&ActionName=Гарантия";
			//HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 
			мСтрока = СтрЗаменить(Json1,Символы.ПС,"");
			HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
			мРезультат =  HTTPСоединение.Записать(HTTPЗапрос); 
			ОтветHTTP = мРезультат.ПолучитьТелоКакСтроку();
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеГарантии", ТекущаяДатаСеанса(), мСтрока);
			ОтветHTTP = мРезультат.ПолучитьТелоКакСтроку();
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ОтветHTTP); 
			
			Если мРезультат.КодСостояния = 200 Тогда
				ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации);
				Прервать;
			Иначе
				ВызватьИсключение "Не удалось синхронизоваться с Тенантом";
			КонецЕсли;
			
			
		КонецЕсли;
		
		Сч = Сч +1;	
	КонецЦикла;
КонецПроцедуры
//-Никонов 

Функция Гуид(ОбъектСинхронизации) 	
	Возврат XMLСтрока(ОбъектСинхронизации);
КонецФункции

Функция ПолучитьКоличествоКомнатСтрокой(Количество, ТипПланировки, ТипНедвижимости)
	
	Если ТипПланировки = Перечисления.УПДК_ТипыПланировок.Студия Тогда
		Возврат "С";
	ИначеЕсли ТипПланировки = Перечисления.УПДК_ТипыПланировок.КухняГостинная Тогда
		
		Строкаа = СтрокА(Количество) + "+";
		Возврат Строкаа;
		
	ИначеЕсли ТипПланировки = Перечисления.УПДК_ТипыПланировок.КухняНиша Тогда
		
		Строкаа = СтрокА(Количество) + "н";
		Возврат Строкаа;
		
	ИначеЕсли ТипНедвижимости = Перечисления.УПДК_ТипыНедвижимости.ГаражПаркоМесто Тогда
		
		Возврат "п";
		
	ИначеЕсли ТипНедвижимости = Перечисления.УПДК_ТипыНедвижимости.Коммерческая Тогда
		
		Возврат "н";
		
	ИначеЕсли ТипНедвижимости = Перечисления.УПДК_ТипыНедвижимости.Жилая ИЛИ ТипНедвижимости = Перечисления.УПДК_ТипыНедвижимости.Апартаменты Тогда
		
		Возврат СтрокА(Количество);
		
	Иначе 
		Возврат "-";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКоличествоКомнатЧислом(Количество, ТипПланировки)
	
	Если ТипПланировки = Перечисления.УПДК_ТипыПланировок.Студия Тогда
		Возврат 0;
	ИначеЕсли ТипПланировки = Перечисления.УПДК_ТипыПланировок.КухняГостинная Тогда
		
		Возврат Количество + 0.5;
	Иначе Возврат Количество;
	КонецЕсли;
	
КонецФункции

Процедура ОчиститьMobsted_ДанныеДляСинхронизации(ОбъектСинхронизации) Экспорт
	
	НаборЗаписей = РегистрыСведений.Mobsted_ДанныеДляСинхронизации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектСинхронизации.Установить(ОбъектСинхронизации);
	НаборЗаписей.Записать();		
	
КонецПроцедуры

//+Никонов ЗаписатьИДEvent
Процедура ЗаписатьИДEvent(ОтветHTTP, Событие, ПараметрыСинхронизации, ДобавитьВДругойТенант = Ложь)
	
	Начало = СтрНайти(ОтветHTTP, "id");
	Начало = Начало + 5;
	Точка = СтрНайти(ОтветHTTP, "attributes");
	Точка = Точка - 3;
	
	ИД = Число(Сред(ОтветHTTP, Начало, Точка - Начало));
	
	Если ЗначениеЗаполнено(ИД) Тогда
		
		Mobsted_ВызовСервера.УстановитьИдентификаторОбъекта(Событие, ИД);
		
		Если ДобавитьВДругойТенант Тогда
			
			ДобавитьВДругойТенантНаСервере(ПараметрыСинхронизации, ИД, ПараметрыСинхронизации.ИДБазыАгентов);	
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры
//-Никонов

Процедура ЗаписатьИД(response, Объект, ПараметрыСинхронизации, ДобавитьВДругойТенант = Ложь)
	
	Начало = СтрНайти(response, "ID = ");
	Начало = Начало + 5;
	Точка = СтрНайти(response, ".");
	
	ИД = Число(Сред(response, Начало, Точка - Начало));
	
	Если ЗначениеЗаполнено(ИД) Тогда
		
		Mobsted_ВызовСервера.УстановитьИдентификаторОбъекта(Объект, ИД);
		
		Если ДобавитьВДругойТенант Тогда
			
			ДобавитьВДругойТенантНаСервере(ПараметрыСинхронизации, ИД, ПараметрыСинхронизации.ИДБазыАгентов);	
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьВДругойТенантНаСервере(ПараметрыСинхронизации, ObjectId, ИДБазы)
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("api/v4/appobjects/createupdate"); 
	
	HTTPЗапрос.Заголовки.Вставить("Authorization", ПараметрыСинхронизации.Authorization); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
	
	Структура = Новый Структура;
	Структура.Вставить("ApplicationId", ИДБазы);
	Структура.Вставить("ObjectId", ObjectId);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть();
	
	Структура = Новый Структура;
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();	
	
	мСтрока = "create=" + Json1 + "&update=" + Json2;	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ДобавлениеВДругойТенант", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();   	
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
	
КонецПроцедуры

Процедура ДобавитьКОбмену(Ссылка) Экспорт
	
	Попытка
		
		Если УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("Mobsted_ИспользоватьОбмен") Тогда
			
			НаборЗаписей = РегистрыСведений.Mobsted_ДанныеДляСинхронизации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектСинхронизации.Установить(Ссылка);
			
			Запись = НаборЗаписей.Добавить();
			Запись.ОбъектСинхронизации = Ссылка;
			
			НаборЗаписей.Записать();		
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ОбработатьГуидГарантии(СтруктураГарантии) Экспорт
	
	СтруктураГарантии.idClients = Прав(СтруктураГарантии.idClients, 36);
	СтруктураГарантии.Iddistrict = Прав(СтруктураГарантии.Iddistrict, 36);
	СтруктураГарантии.idhouse = Прав(СтруктураГарантии.idhouse, 36);
	СтруктураГарантии.Apartment = Прав(СтруктураГарантии.Apartment, 36);
	Для каждого ТекВидГР Из СтруктураГарантии.Task Цикл
		ТекВидГР.typeservice = Прав(ТекВидГР.typeservice, 36);
	КонецЦикла;
	
КонецПроцедуры

#Область МобильноеПриложение

Функция ОбработатьЗапросСПриложения(Запрос, ПараметрыОбработчика) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ответ", Неопределено);
	
	ТелоКакСтрока = Запрос.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(ТелоКакСтрока); 		
	СтруктураЗапроса = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();  
	
	//ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_Обработказапроса", ТекущаяДатаСеанса(), ЗначениеВСтрокуВнутр(СтруктураЗапроса));
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_Обработказапроса", ТекущаяДатаСеанса(), ТелоКакСтрока);
	
	СтруктураЗапроса.Вставить("ИДбазы", Константы.Mobsted_ИДБазы.Получить()); 
	СтруктураЗапроса.Вставить("Mobsted_HTTPServer", Константы.Mobsted_HTTPServer.Получить());
	СтруктураЗапроса.Вставить("AuthorizationK", "Basic " + Константы.Mobsted_Authorization.Получить());
	СтруктураЗапроса.Вставить("ТекущаяДата", ТекущаяДата());
	СтруктураЗапроса.Вставить("ЗаписьЖурнала", ЗаписьЖурнала);
	
	ОбработатьЗапросПоТипу(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
	
	Возврат СтруктураОтвета;
	
КонецФункции 

Процедура ОбработатьЗапросПоТипу(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета) 
	
	ТипЗапроса = НРег(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "request_type", ""));
	СтруктураЗапроса.Вставить("ТипЗапроса", ТипЗапроса);
	
	Если  ТипЗапроса = "" тогда 
		Ответ = Новый HTTPСервисОтвет(405);  
		ТекстОшибки = "не верно указан request_type";
		Ответ.УстановитьТелоИзСтроки(ТекстОшибки); 
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 405, ТекстОшибки);
		
	КонецЕсли;   
	
	
	Если ТипЗапроса = "addorder" Тогда
		
		СоздатьБронь(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "addpreorder" Тогда
		
		СоздатьПредБронь(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "agentaddtaskorder" Тогда
		
		ЗадачаНаБронирование(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "agentaddshow" Тогда
		
		ЗадачаНаПоказАгенту(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "addcustomer" Тогда
		
		СоздатьКлиента(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "deleteorder" Тогда
		
		УдалитьБронь(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета); 
		
	ИначеЕсли ТипЗапроса = "deleteorderm" Тогда
		
		УдалитьБроньМенеджер(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета); 
		
	ИначеЕсли ТипЗапроса = "addshow" Тогда
		
		ЗадачаНаПоказ(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "deleteshow" Тогда
		
		ОтменитьПоказ(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета); 
		
	ИначеЕсли ТипЗапроса = "addcallback" Тогда
		
		ЗадачаНаОбратныйЗвонок(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета); 
		
	ИначеЕсли ТипЗапроса = "extendorderm" Тогда
		
		ПродлитьБронь(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "extendorder" Тогда
		
		ПродлитьБроньКлиент(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "addevent" Или ТипЗапроса = "updateevent" Тогда
		
		СоздатьСобытие(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "addtask" Или ТипЗапроса = "updatetask" Тогда	
		
		СоздатьЗадачу(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета); 
		
	ИначеЕсли ТипЗапроса = "adddeal" Тогда	
		
		СоздатьСделку(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "updatedeal" Тогда	
		
		ОбновитьСделку(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "closedeal" Тогда	
		
		ЗакрытьСделку(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	ИначеЕсли ТипЗапроса = "paymentmethod" Тогда	
		
		ИзменитьСпособОплатыБрони(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета);
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОпределитьКлиентаПоВходящимДанным(СтруктураЗапроса, ДанныеЗаполнения)
	
	НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(СтруктураЗапроса.customer_phone);
	
	МассивЗвонящих = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(НомерТелефона);
	
	Если МассивЗвонящих.Количество() Тогда
		
		ВладелецТелефона = МассивЗвонящих[0];
		
		Если ТипЗнч(ВладелецТелефона) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			мКлиент = Справочники.ФизическиеЛица.ПолучитьПартнера(ВладелецТелефона,,,Истина);
		Иначе
			мКлиент = ВладелецТелефона;
		КонецЕсли;
		
	Иначе
		
		ФИО = СтруктураЗапроса.customer_fio;
		НомерТелефона = СтруктураЗапроса.customer_phone;
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФИО, " ");
		
		КоличествоСлов = МассивПодстрок.Количество();
		
		Фамилия = "";
		Имя = "";
		Отчество = "";
		
		Если КоличествоСлов > 0 Тогда		
			Фамилия = МассивПодстрок[0]; 		
		КонецЕсли;
		
		Если КоличествоСлов > 1 Тогда		
			Имя = МассивПодстрок[1]; 		
		КонецЕсли;
		
		Если КоличествоСлов > 2 Тогда
			
			Отчество = "";
			
			Для Счетчик = 2 по КоличествоСлов-1 Цикл
				Отчество = Отчество + " " + МассивПодстрок[Счетчик];
			КонецЦикла;
			
			Отчество = СокрЛП(Отчество);
			
		КонецЕсли;
		
		НовФизлицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		УправлениеКонтактнойИнформацией.ДобавитьНовыйТелефон(НовФизлицо, НомерТелефона);
		НовФизлицо.Фамилия = Фамилия;
		НовФизлицо.Имя = Имя;
		НовФизлицо.Отчество = Отчество; 	
		НовФизлицо.Наименование = ФИО;
		НовФизлицо.Записать(); 
		
		НовКонтакт = Справочники.Партнеры.СоздатьЭлемент();
		НовКонтакт.ДатаРегистрации = ТекущаяДатаСеанса();
		НовКонтакт.Наименование = ФИО;
		НовКонтакт.CRM_ФизЛицо = Истина;
		НовКонтакт.ВидПартнера = Перечисления.ВидПартнера.ЧастноеЛицо;				
		НовКонтакт.ОсновноеКонтактноеЛицо = НовФизлицо.Ссылка;
		
		НовКЛ = НовКонтакт.КонтактныеЛица.Добавить();
		НовКл.ФизЛицо = НовФизлицо.Ссылка;
		НовКл.ПравоПодписи = Истина;
		
		
		НовКонтакт.MobstedId = СтруктураЗапроса.objectid;
		
		НовКонтакт.Записать();
		
		Mobsted_ВызовСервера.УстановитьИдентификаторОбъекта(НовКонтакт.Ссылка, СтруктураЗапроса.objectid);
		
		РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(НовКонтакт.Ссылка, Перечисления.СтатусыКлиента.Контакт);
		
		мКлиент = НовКонтакт.Ссылка; 
		
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
		
		HTTPСоединение = Новый HTTPСоединение(СтруктураЗапроса.Mobsted_HTTPServer,,,,,,ssl);
		
		//https:///
		HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate"); 
		
		HTTPЗапрос.Заголовки.Вставить("Authorization", СтруктураЗапроса.AuthorizationK); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		Структура = Новый Структура;
		Структура.Вставить("ApplicationId", СтруктураЗапроса.ИДбазы);
		Структура.Вставить("ID_Клиента", Строка(мКлиент.УникальныйИдентификатор()));
		Структура.Вставить("Тип_Объекта", "Клиент");
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		Структура = Новый Структура;
		
		Структура.Вставить("Фамилия", Фамилия);
		Структура.Вставить("Имя", Имя);
		Структура.Вставить("Отчество", Отчество);
		Структура.Вставить("Телефон", НомерТелефона);
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();	
		
		мСтрока = "create=" + Json1 + "&update=" + Json2;
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_AddOrder_Customer", ТекущаяДатаСеанса(), мСтрока);
		
		Результат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть(); 
		
		Попытка
			
			response = СтруктураЗаявки.response;		
			СпрОбъект = мКлиент.ПолучитьОбъект();
			
			Начало = СтрНайти(response, "ID = ");
			Начало = Начало + 5;
			Точка = СтрНайти(response, ".");
			
			СпрОбъект.MobstedId = Число(Сред(response, Начало, Точка - Начало)); 		
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект); 
			
		Исключение
			
		КонецПопытки;	
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
	КонецЕсли; 
	
	ДанныеЗаполнения.Вставить("Клиент", мКлиент);
	ДанныеЗаполнения.Вставить("ОсновноеКонтактноеЛицо", мКлиент.ОсновноеКонтактноеЛицо);
	
КонецПроцедуры

// +Никонов Оригинал СоздатьСделку
Процедура СоздатьСделку1(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	ДанныеЗаполнения = Новый Структура; 
	НачатьТранзакцию();
	
	Попытка
		
		Если СтруктураЗапроса.Свойство("customer") Тогда
			ОшибкаПолученияСсылки = Истина; 
			мКлиент = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "customer", Справочники.Партнеры, ОшибкаПолученияСсылки); 
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Имеет не верный формат GUID ""Клиент"" (customer).");
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли;
		ИначеЕсли СтруктураЗапроса.Свойство("customer_phone") Тогда
			ДанныеЗаполнения.Вставить("Телефон", СтруктураЗапроса.customer_phone); 
			ОпределитьКлиентаПоВходящимДанным(СтруктураЗапроса, ДанныеЗаполнения);
		Иначе
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Клиент"" (customer) или (customer_phone, customer_fio).");
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
		КонецЕсли;
		
		//Готовим структуру заполнения 
				
		ДанныеЗаполнения.Вставить("КонтактноеЛицо",	мКлиент);
		
		//Агент сделки ++
		Если СтруктураЗапроса.Свойство("agent") Тогда
			
			ОшибкаПолученияСсылки = Истина;
			
			мАгент = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "agent", Справочники.ФизическиеЛица, ОшибкаПолученияСсылки);;
			
			Если ОшибкаПолученияСсылки Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Агент"" (agent).");
				
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;
			
			ДанныеЗаполнения.Вставить("Агент", мАгент);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПартнерыКонтактныеЛица.Ссылка КАК Агентство
			|ИЗ
			|	Справочник.Партнеры.КонтактныеЛица КАК ПартнерыКонтактныеЛица
			|ГДЕ
			|	ПартнерыКонтактныеЛица.ФизЛицо = &мАгент";
			
			Запрос.УстановитьПараметр("мАгент", мАгент);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий(); 	
			
			ДанныеЗаполнения.Вставить("АгентствоНедвижимости", ВыборкаДетальныеЗаписи.Агентство);
			
			
		КонецЕсли;
		//Агент сделки --
		
		
		//Автор сделки ++
		ОшибкаПолученияСсылки = Истина;
		мАвтор = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "manager", Справочники.Пользователи, ОшибкаПолученияСсылки);;
		Если ОшибкаПолученияСсылки Тогда
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Автор"" (manager).");
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
			
		КонецЕсли;
		ДанныеЗаполнения.Вставить("Ответственный",						мАвтор);
		//Автор сделки --
		
		//Проект сделки ++
		Если СтруктураЗапроса.Свойство("project") Тогда 
			ОшибкаПолученияСсылки = Истина;  
			мПроект = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "project", Справочники.УПДК_Проекты, ОшибкаПолученияСсылки);		
			//мПроект = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "project", Справочники.УПДК_РайоныСтроительства, ОшибкаПолученияСсылки);
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Проект"" (project).");
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли; 
			ДанныеЗаполнения.Вставить("Проект",						мПроект);
		КонецЕсли;	
		//Проект сделки --  
		
		Если СтруктураЗапроса.Свойство("date") Тогда
			ДанныеЗаполнения.Вставить("Дата",	XMLЗначение(Тип("Дата"), СтруктураЗапроса.date));
		Иначе 
			//ДанныеЗаполнения.Вставить("Дата",	СтруктураЗапроса.ТекущаяДата);
			ДанныеЗаполнения.Вставить("Дата",	ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("closed") Тогда
			ДанныеЗаполнения.Вставить("Закрыта",	СтруктураЗапроса.closed);
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("successfully_closed") Тогда
			ДанныеЗаполнения.Вставить("УспешностьЗакрытия",	СтруктураЗапроса.successfully_closed);
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("amount") Тогда
			ДанныеЗаполнения.Вставить("Сумма",	СтруктураЗапроса.amount);
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("rent") Тогда
			ДанныеЗаполнения.Вставить("Аренда",	СтруктураЗапроса.rent);
		КонецЕсли;
		
		
		//Инструмент интереса
		Если СтруктураЗапроса.Свойство("interest_tool") Тогда 
			ОшибкаПолученияСсылки = Истина;
			мИнструмент = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "interest_tool", ПланыВидовХарактеристик.КаналыРекламныхВоздействий, ОшибкаПолученияСсылки);				
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан верно или имеет не верный формат GUID ""Инструмент интереса"" (interest_tool).");
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;  
			ДанныеЗаполнения.Вставить("КаналПервичногоИнтереса",						мИнструмент);	
		КонецЕсли; 
		
		//Канал интереса
		Если СтруктураЗапроса.Свойство("interest_channel") Тогда 
			
			ОшибкаПолученияСсылки = Истина;           
			
			мКанал = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "interest_channel", Справочники.КаналыИнтереса, ОшибкаПолученияСсылки);						
			
			Если ОшибкаПолученияСсылки Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				
				Ответ.УстановитьТелоИзСтроки("Не указан верно или имеет не верный формат GUID ""Канал интереса"" (interest_channel).");
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;  
			
			ДанныеЗаполнения.Вставить("КаналИнтереса",						мКанал);	
			
		КонецЕсли;
		
		//источник интереса
		Если СтруктураЗапроса.Свойство("interest_source") Тогда 
			ОшибкаПолученияСсылки = Истина;
			мИсточник = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "interest_source", Справочники.ИсточникиИнтереса, ОшибкаПолученияСсылки);								
			Если ОшибкаПолученияСсылки Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан верно или имеет не верный формат GUID ""Источник интереса"" (interest_source).");
				
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;  
			ДанныеЗаполнения.Вставить("ИсточникИнтереса",						мИсточник);	
		КонецЕсли;
		
		мСделка = Документы.Сделка.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(мСделка, ДанныеЗаполнения);
		//мСделка.Заполнить(ДанныеЗаполнения);
		
		
		//Добавим потребность
		НовПотребность = мСделка.Потребности.Добавить();
		Новпотребность.ВидПотребности = ПланыВидовХарактеристик.ПотребностиКлиентов.Проекты;
		
		НовПотребность.Значение = мПроект;
		
		
		мСделка.Записать();
		
		//Добавим этап сделки
		stage_id = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "stage_id");
		ЭтапВоронки = Справочники.Ф_ЭтапыВоронкиПродаж.ПолучитьСсылку(Новый УникальныйИдентификатор(stage_id));
		

		
		//Запишем интересы по сделке
		НаборИнтересы = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		//НаборИнтересы.Отбор.Партнер.Установить(мКлиент);
		//НаборИнтересы.Отбор.Партнер.Установить(мСделка.Ссылка);
		ЗаписьИнтересы = НаборИнтересы.Добавить();
		ЗаписьИнтересы.Партнер = мКлиент;
		ЗаписьИнтересы.Сделка = мСделка.Ссылка;
		ЗаписьИнтересы.Период = ТекущаяДатаСеанса();
		ЗаполнитьЗначенияСвойств(ЗаписьИнтересы, ДанныеЗаполнения);
		НаборИнтересы.Записать();
		
		Mobsted_ВызовСервера.ЗаписатьЭтапСделки(мСделка.Ссылка, ЭтапВоронки, ДанныеЗаполнения); 
		ЗафиксироватьТранзакцию();
		
		Ответ = Новый HTTPСервисОтвет(200);
		
		Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("ID_Сделки", xmlСтрока(мСделка.Ссылка)));
		
		Ответ.УстановитьТелоИзСтроки(Json);
		Ответ.Заголовки.Вставить("Content-Type", " application/json"); 
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, Json);
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ответ = Новый HTTPСервисОтвет(520);
		Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 520, ТекстОшибки); 
		
	КонецПопытки;
	
КонецПроцедуры

//+Никонов Копия СоздатьСделку. Если работает, то оригинал можно удалить
Процедура СоздатьСделку(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	ДанныеЗаполнения = Новый Структура; 
	НачатьТранзакцию();
	
	Попытка
		
		Если СтруктураЗапроса.Свойство("customer") Тогда
			ОшибкаПолученияСсылки = Истина; 
			мКлиент = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "customer", Справочники.Партнеры, ОшибкаПолученияСсылки); 
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Ответ", "Не указан верно или имеет не верный формат GUID ""Инструмент интереса"""));
				Mobsted_ВызовСервера.ПолучитьОтветДляЗапроса(Ответ,Json);
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли;
		ИначеЕсли СтруктураЗапроса.Свойство("customer_phone") Тогда
			ДанныеЗаполнения.Вставить("Телефон", СтруктураЗапроса.customer_phone); 
			ОпределитьКлиентаПоВходящимДанным(СтруктураЗапроса, ДанныеЗаполнения);
		Иначе
			Ответ = Новый HTTPСервисОтвет(520);
			Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Ответ", "Не указан или имеет не верный формат GUID ""Клиент"" (customer) или (customer_phone, customer_fio)."));
			Mobsted_ВызовСервера.ПолучитьОтветДляЗапроса(Ответ,Json);
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
		КонецЕсли;
		
		//Готовим структуру заполнения 
		ДанныеЗаполнения.Вставить("Клиент",	мКлиент);
		
		//Агент сделки ++
		Если СтруктураЗапроса.Свойство("agent") Тогда
			
			ОшибкаПолученияСсылки = Истина;
			
			мАгент = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "agent", Справочники.ФизическиеЛица, ОшибкаПолученияСсылки);;
			
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Ответ", "Не указан или имеет не верный формат GUID ""Агент"" (agent)."));
				Mobsted_ВызовСервера.ПолучитьОтветДляЗапроса(Ответ,Json);
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли;
			
			ДанныеЗаполнения.Вставить("Агент", мАгент);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПартнерыКонтактныеЛица.Ссылка КАК Агентство
			|ИЗ
			|	Справочник.Партнеры.КонтактныеЛица КАК ПартнерыКонтактныеЛица
			|ГДЕ
			|	ПартнерыКонтактныеЛица.ФизЛицо = &мАгент";
			
			Запрос.УстановитьПараметр("мАгент", мАгент);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий(); 	
			ДанныеЗаполнения.Вставить("АгентствоНедвижимости", ВыборкаДетальныеЗаписи.Агентство);
		КонецЕсли;
		//Агент сделки --
		
		//Автор сделки ++
		ОшибкаПолученияСсылки = Истина;
		мАвтор = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "manager", Справочники.Пользователи, ОшибкаПолученияСсылки);;
		Если ОшибкаПолученияСсылки Тогда
			Ответ = Новый HTTPСервисОтвет(520);
			Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Ответ", "Не указан или имеет не верный формат GUID ""Автор"" (manager)."));
			Mobsted_ВызовСервера.ПолучитьОтветДляЗапроса(Ответ,Json);
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
			
		КонецЕсли;
		ДанныеЗаполнения.Вставить("Ответственный",						мАвтор);
		//Автор сделки --
		
		Если СтруктураЗапроса.Свойство("date") Тогда
			ДанныеЗаполнения.Вставить("Дата",	XMLЗначение(Тип("Дата"), СтруктураЗапроса.date));
		Иначе 
			ДанныеЗаполнения.Вставить("Дата",	ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("closed") Тогда
			ДанныеЗаполнения.Вставить("Закрыта",	СтруктураЗапроса.closed);
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("successfully_closed") Тогда
			ДанныеЗаполнения.Вставить("УспешностьЗакрытия",	СтруктураЗапроса.successfully_closed);
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("amount") Тогда
			ДанныеЗаполнения.Вставить("Сумма",	СтруктураЗапроса.amount);
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("rent") Тогда
			ДанныеЗаполнения.Вставить("Аренда",	СтруктураЗапроса.rent);
		КонецЕсли;
		
		
		//Инструмент интереса
		Если СтруктураЗапроса.Свойство("interest_tool") Тогда 
			ОшибкаПолученияСсылки = Истина;
			мИнструмент = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "interest_tool", ПланыВидовХарактеристик.КаналыРекламныхВоздействий, ОшибкаПолученияСсылки);				
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Ответ", "Не указан верно или имеет не верный формат GUID ""Инструмент интереса"""));
				Mobsted_ВызовСервера.ПолучитьОтветДляЗапроса(Ответ,Json);
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли;  
			ДанныеЗаполнения.Вставить("КаналПервичногоИнтереса",						мИнструмент);	
		КонецЕсли; 
		
		//Канал интереса
		Если СтруктураЗапроса.Свойство("interest_channel") Тогда 
			ОшибкаПолученияСсылки = Истина;           
			мКанал = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "interest_channel", Справочники.КаналыИнтереса, ОшибкаПолученияСсылки);						
			
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Ответ", "Не указан верно или имеет не верный формат GUID ""Канал интереса"" (interest_channel)."));
				Mobsted_ВызовСервера.ПолучитьОтветДляЗапроса(Ответ,Json);
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли;  
			ДанныеЗаполнения.Вставить("КаналИнтереса",						мКанал);	
		КонецЕсли;
		
		//источник интереса
		Если СтруктураЗапроса.Свойство("interest_source") Тогда 
			ОшибкаПолученияСсылки = Истина;
			мИсточник = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "interest_source", Справочники.ИсточникиИнтереса, ОшибкаПолученияСсылки);								
			
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Ответ", "Не указан верно или имеет не верный формат GUID ""Источник интереса"" (interest_source)."));
				Mobsted_ВызовСервера.ПолучитьОтветДляЗапроса(Ответ,Json);
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;  
			ДанныеЗаполнения.Вставить("ИсточникИнтереса",						мИсточник);	
		КонецЕсли;
		
		мСделка = Документы.Сделка.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(мСделка, ДанныеЗаполнения);
		
		//Добавим потребность
		СтруктураПотребностей = СтруктураЗапроса.needs;
		Для каждого Элемент Из СтруктураПотребностей Цикл
			Если Элемент.Ключ = "projects" Тогда
				Менеджер = Справочники.УПДК_Проекты;
			ИначеЕсли Элемент.Ключ = "type_estate" Тогда
				Менеджер = Справочники.УПДК_ВидыНедвижимости;
			ИначеЕсли Элемент.Ключ = "purchase_method" Тогда
				Менеджер = Справочники.УПДК_СпособыПриобретенияНедвижимости;
			ИначеЕсли Элемент.Ключ = "purchase_goals" Тогда
				Менеджер = Справочники.ЦелиПокупки;
			ИначеЕсли Элемент.Ключ = "client_interests" Тогда
				Менеджер = Справочники.ИнтересыКлиента;
			КонецЕсли;
			
			ЭлементПотребности = Элемент.Значение;
			Для n=0 По ЭлементПотребности.Количество() - 1 Цикл
				ТекущаяПотребность = ЭлементПотребности[n];
				ОшибкаПолученияСсылки = Истина; 
				СсылкаНаПотребность = ПолучитьСсылкуПоПараметру(Новый Структура(Элемент.Ключ,ТекущаяПотребность),Элемент.Ключ, Менеджер,ОшибкаПолученияСсылки); 
				
				НовПотребность = мСделка.Потребности.Добавить();
				Если Элемент.Ключ = "projects" Тогда
					Новпотребность.ВидПотребности = ПланыВидовХарактеристик.ПотребностиКлиентов.Проекты;
				ИначеЕсли Элемент.Ключ = "type_estate" Тогда
					Новпотребность.ВидПотребности = ПланыВидовХарактеристик.ПотребностиКлиентов.ВидыНедвижимости;
				ИначеЕсли Элемент.Ключ = "purchase_method" Тогда
					Новпотребность.ВидПотребности = ПланыВидовХарактеристик.ПотребностиКлиентов.СпособыПриобретения;
				ИначеЕсли Элемент.Ключ = "purchase_goals" Тогда
					Новпотребность.ВидПотребности = ПланыВидовХарактеристик.ПотребностиКлиентов.ЦелиПокупки;
				ИначеЕсли Элемент.Ключ = "client_interests" Тогда
					Новпотребность.ВидПотребности = ПланыВидовХарактеристик.ПотребностиКлиентов.ИнтересыКлиента;
				КонецЕсли;
				НовПотребность.Значение = СсылкаНаПотребность;
			КонецЦикла; 
			
		КонецЦикла;
		
		мСделка.Записать();
		
		//Добавим этап сделки
		stage_id = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "stage_id");
		ЭтапВоронки = Справочники.Ф_ЭтапыВоронкиПродаж.ПолучитьСсылку(Новый УникальныйИдентификатор(stage_id));
		
		//Запишем интересы по сделке
		НаборИнтересы = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборИнтересы.Отбор.Партнер.Установить(мКлиент);
		НаборИнтересы.Отбор.Сделка.Установить(мСделка.Ссылка);
		ЗаписьИнтересы = НаборИнтересы.Добавить();
		ЗаписьИнтересы.Партнер = мКлиент;
		ЗаписьИнтересы.Сделка = мСделка.Ссылка;
		ЗаписьИнтересы.Период = ТекущаяДатаСеанса();
		ЗаполнитьЗначенияСвойств(ЗаписьИнтересы, ДанныеЗаполнения);
		НаборИнтересы.Записать();
		
		Mobsted_ВызовСервера.ЗаписатьЭтапСделки(мСделка.Ссылка, ЭтапВоронки, ДанныеЗаполнения); 
		ЗафиксироватьТранзакцию();
		
		Ответ = Новый HTTPСервисОтвет(200);
		
		Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("ID_Сделки", xmlСтрока(мСделка.Ссылка)));
		
		Ответ.УстановитьТелоИзСтроки(Json);
		Ответ.Заголовки.Вставить("Content-Type", " application/json"); 
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, Json);
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ответ = Новый HTTPСервисОтвет(520);
		Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 520, ТекстОшибки); 
		
	КонецПопытки;
	
КонецПроцедуры

//+ Никонов по задаче MOBILE4DEV-44
Процедура ЗакрытьСделку(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	НачатьТранзакцию();
	Попытка
		
		Если СтруктураЗапроса.Свойство("ID_Сделки") Тогда
			ОшибкаПолученияСсылки = Истина; 
			мСделка = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "ID_Сделки", Документы.Сделка, ОшибкаПолученияСсылки); 
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Имеет не верный формат GUID ""Сдлека"" (ID_Сделки).");
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли;
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(мСделка,"Закрыта") Тогда
				Ответ = Новый HTTPСервисОтвет(200);
				JsonОтвет = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Состояние","Сделка уже закрыта"));
				Ответ.УстановитьТелоИзСтроки(JsonОтвет);
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("stage_id") Тогда
			ОшибкаПолученияСсылки = Истина; 
			мЭтапЗакрытия = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "stage_id", Справочники.Ф_ЭтапыВоронкиПродаж, ОшибкаПолученияСсылки); 
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Имеет не верный формат GUID ""ЭтапЗакрытия"" (stage_id).");
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("reason") Тогда
			ОшибкаПолученияСсылки = Истина; 
			мПричина = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "reason", Справочники.CRM_ПричиныОтказов, ОшибкаПолученияСсылки); 
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Имеет не верный формат GUID ""Причины отказа"" (reason).");
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("closed") Тогда
			Если Число(СтруктураЗапроса.closed) = 1 Тогда 
				Закрыто = Истина;
			Иначе
				Закрыто = Ложь;
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Ответ = Новый HTTPСервисОтвет(200);
				JsonОтвет = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Состояние","Сделка не закрыта"));
				Ответ.УстановитьТелоИзСтроки(JsonОтвет);
				СтруктураОтвета.Вставить("Ответ", Ответ);
				РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 520, JsonОтвет); 
				
			КонецЕсли;
		КонецЕсли;
		
		СделкаОбъект = мСделка.ПолучитьОбъект();
		СделкаОбъект.Закрыта = Закрыто;
		СделкаОбъект.ПричинаОтказа = мПричина;
		СделкаОбъект.Записать(); 
		
		КонтактноеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(мСделка,"Клиент");
		Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(мСделка, "Ответственный");
		ДанныеЗаполнения = Новый Структура("КонтактноеЛицо, Ответственный", КонтактноеЛицо, Ответственный);
		
		Mobsted_ВызовСервера.ЗаписатьЭтапСделки(мСделка, мЭтапЗакрытия, ДанныеЗаполнения);
		ЗафиксироватьТранзакцию();
		
		Ответ = Новый HTTPСервисОтвет(200);
		СтруктураJson = Новый Структура;
		СтруктураJson.Вставить("ID_Сделки",СтруктураЗапроса.ID_Сделки);
		СтруктураJson.Вставить("СтатусСделки","Закрыта");
		
		Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(СтруктураJson);
		
		Ответ.УстановитьТелоИзСтроки(Json);
		Ответ.Заголовки.Вставить("Content-Type", " application/json"); 
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, Json);
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ответ = Новый HTTPСервисОтвет(520);
		СтруктураJson = Новый Структура("Ответ",ТекстОшибки);
		Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(СтруктураJson);
		Ответ.УстановитьТелоИзСтроки(Json);
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 520, ТекстОшибки); 
	КонецПопытки;
	
КонецПроцедуры
//- Никонов

//+Никонов Копия СоздатьСделку. СоздатьСделку2 - оригинал
Процедура СоздатьСделку2(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	ДанныеЗаполнения = Новый Структура; 
	НачатьТранзакцию();
	
	Попытка
		
		Если СтруктураЗапроса.Свойство("customer") Тогда
			ОшибкаПолученияСсылки = Истина; 
			мКлиент = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "customer", Справочники.Партнеры, ОшибкаПолученияСсылки); 
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Имеет не верный формат GUID ""Клиент"" (customer).");
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли;
		ИначеЕсли СтруктураЗапроса.Свойство("customer_phone") Тогда
			ДанныеЗаполнения.Вставить("Телефон", СтруктураЗапроса.customer_phone); 
			ОпределитьКлиентаПоВходящимДанным(СтруктураЗапроса, ДанныеЗаполнения);
			мКлиент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Клиент")
		Иначе
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Клиент"" (customer) или (customer_phone, customer_fio).");
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
		КонецЕсли;
		
		//Готовим структуру заполнения 
				
		КонтактноеЛицо = мКлиент;
		
		//Агент сделки ++
		Если СтруктураЗапроса.Свойство("agent") Тогда
			
			ОшибкаПолученияСсылки = Истина;
			
			мАгент = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "agent", Справочники.ФизическиеЛица, ОшибкаПолученияСсылки);;
			
			Если ОшибкаПолученияСсылки Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Агент"" (agent).");
				
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;
			
			Агент = мАгент;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПартнерыКонтактныеЛица.Ссылка КАК Агентство
			|ИЗ
			|	Справочник.Партнеры.КонтактныеЛица КАК ПартнерыКонтактныеЛица
			|ГДЕ
			|	ПартнерыКонтактныеЛица.ФизЛицо = &мАгент";
			
			Запрос.УстановитьПараметр("мАгент", мАгент);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий(); 	
			
			АгентствоНедвижимости = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Агентство), ВыборкаДетальныеЗаписи.Агентство, "") ;
		КонецЕсли;
		//Агент сделки --
		
		
		//Автор сделки ++
		ОшибкаПолученияСсылки = Истина;
		мАвтор = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "manager", Справочники.Пользователи, ОшибкаПолученияСсылки);;
		Если ОшибкаПолученияСсылки Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Автор"" (manager).");
			
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
			
		КонецЕсли;
		Ответственный = мАвтор;
		//Автор сделки --
		
		//Проект сделки ++
		Если СтруктураЗапроса.Свойство("project") Тогда 
			ОшибкаПолученияСсылки = Истина;  
			//мПроект = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "project", Справочники.УПДК_Проекты, ОшибкаПолученияСсылки);		
			мПроект = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "project", Справочники.УПДК_РайоныСтроительства, ОшибкаПолученияСсылки);
			Если ОшибкаПолученияСсылки Тогда
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Проект"" (project).");
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
			КонецЕсли; 
			Проект = мПроект;
		КонецЕсли;	
		//Проект сделки --  
		
		Если СтруктураЗапроса.Свойство("date") Тогда
			Дата = XMLЗначение(Тип("Дата"), СтруктураЗапроса.date);
		Иначе 
			Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("closed") Тогда
			Закрыта = СтруктураЗапроса.closed;
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("successfully_closed") Тогда
			УспешностьЗакрытия = СтруктураЗапроса.successfully_closed;
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("amount") Тогда
			Сумма = СтруктураЗапроса.amount;
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("rent") Тогда
			Аренда = СтруктураЗапроса.rent;
		КонецЕсли;
		
		
		//Инструмент интереса
		Если СтруктураЗапроса.Свойство("interest_tool") Тогда 
			ОшибкаПолученияСсылки = Истина;
			мИнструмент = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "interest_tool", ПланыВидовХарактеристик.КаналыРекламныхВоздействий, ОшибкаПолученияСсылки);				
			Если ОшибкаПолученияСсылки Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан верно или имеет не верный формат GUID ""Инструмент интереса"" (interest_tool).");
				
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;  
			КаналПервичногоИнтереса =	мИнструмент;	
		КонецЕсли; 
		
		//Канал интереса
		Если СтруктураЗапроса.Свойство("interest_channel") Тогда 
			
			ОшибкаПолученияСсылки = Истина;           
			
			мКанал = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "interest_channel", Справочники.КаналыИнтереса, ОшибкаПолученияСсылки);						
			
			Если ОшибкаПолученияСсылки Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан верно или имеет не верный формат GUID ""Канал интереса"" (interest_channel).");
				
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;  
			
			КаналИнтереса =	мКанал;	
			
		КонецЕсли;
		
		//источник интереса
		Если СтруктураЗапроса.Свойство("interest_source") Тогда 
			ОшибкаПолученияСсылки = Истина;
			мИсточник = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "interest_source", Справочники.ИсточникиИнтереса, ОшибкаПолученияСсылки);								
			Если ОшибкаПолученияСсылки Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан верно или имеет не верный формат GUID ""Источник интереса"" (interest_source).");
				
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;  
			ИсточникИнтереса =	мИсточник;	
		КонецЕсли;
		
		мСделка = Документы.Сделка.СоздатьДокумент();
		//мСделка.Заполнить(ДанныеЗаполнения);
		мСделка.Клиент = КонтактноеЛицо;
		мСделка.Агент = Агент;
		мСделка.АгентствоНедвижимости = АгентствоНедвижимости;
		мСделка.Ответственный = Ответственный;
		мСделка.Проект = Проект;
		мСделка.Дата = Дата;
		мСделка.Закрыта = Закрыта;
		мСделка.УспешностьЗакрытия = УспешностьЗакрытия;
		мСделка.Сумма = Сумма;
		мСделка.Аренда = Аренда;
		мСделка.КаналПервичногоИнтереса = КаналПервичногоИнтереса;
		мСделка.Записать();
		
		//Запишем интересы по сделке
		НаборИнтересы = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		ЗаписьИнтересы = НаборИнтересы.Добавить();
		ЗаписьИнтересы.Партнер = мКлиент;
		ЗаписьИнтересы.Сделка = мСделка.Ссылка;
		ЗаписьИнтересы.Период = Дата;
		ЗаписьИнтересы.КаналПервичногоИнтереса = КаналПервичногоИнтереса;
		ЗаписьИнтересы.КаналИнтереса = КаналИнтереса;
		ЗаписьИнтересы.ИсточникИнтереса = ИсточникИнтереса;
		НаборИнтересы.Записать();
		
		
		ЗафиксироватьТранзакцию();
		
		Ответ = Новый HTTPСервисОтвет(200);
		
		
		
			//Запись = Новый ЗаписьJSON;
			//Запись.УстановитьСтроку();
			//ЗаписатьJSON(Запись, Новый Структура("status, data", xmlСтрока(Выборка.Статус), Формат(Выборка.КрайнийСрок, "ДЛФ=D")));
			//Json1 = Запись.Закрыть();
			
	
	//Ответ.УстановитьТелоИзСтроки(Json1);
	//Ответ.Заголовки.Вставить("Content-Type", " application/json"); 
	//РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, Json
	//	
	//	
	//	СтруктураОтвета.Вставить("Ответ", Ответ);
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ответ = Новый HTTPСервисОтвет(520);
		Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 520, ТекстОшибки); 
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьСделку(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	ДанныеЗаполнения = Новый Структура;
	
	ОшибкаПолученияСсылки = Истина;
	
	мСделка = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "deal_id", Документы.Сделка, ОшибкаПолученияСсылки); 
	
	Если ОшибкаПолученияСсылки Тогда
		
		Ответ = Новый HTTPСервисОтвет(520);
		Ответ.УстановитьТелоИзСтроки("Имеет не верный формат GUID ""Сделки"" (deal_id).");
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		Возврат;
		
	КонецЕсли;
	
	СделкаОбъект = мСделка.ПолучитьОбъект(); 
	
	//Агент сделки ++
	
	Если СтруктураЗапроса.Свойство("agent") Тогда
		
		ОшибкаПолученияСсылки = Истина;
		
		мАгент = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "agent", Справочники.ФизическиеЛица, ОшибкаПолученияСсылки);;
		
		Если ОшибкаПолученияСсылки Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Агент"" (agent).");
			
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("Агент", мАгент);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПартнерыКонтактныеЛица.Ссылка КАК Агентство
		|ИЗ
		|	Справочник.Партнеры.КонтактныеЛица КАК ПартнерыКонтактныеЛица
		|ГДЕ
		|	ПартнерыКонтактныеЛица.ФизЛицо = &мАгент";
		
		Запрос.УстановитьПараметр("мАгент", мАгент);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий(); 	
		
		ДанныеЗаполнения.Вставить("АгентствоНедвижимости", ВыборкаДетальныеЗаписи.Агентство);
		
		
	КонецЕсли;
	
	//Агент сделки --
	
	
	//Ответственный за текущий этап сделки ++
	
	ОшибкаПолученияСсылки = Истина;
	
	мТекущийОтветственный = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "current_manager", Справочники.Пользователи, ОшибкаПолученияСсылки);;
	
	Если ОшибкаПолученияСсылки Тогда
		
		Ответ = Новый HTTPСервисОтвет(520);
		Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Текущий ответственный"" (current_manager).");
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		Возврат;
		
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ОтветственныйЗаТекущийЭтап",						мТекущийОтветственный);
	
	//Автор сделки --
	
	//Проект сделки ++
	
	Если СтруктураЗапроса.Свойство("project") Тогда 
		
		ОшибкаПолученияСсылки = Истина;  
		
		мПроект = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "project", Справочники.УПДК_Проекты, ОшибкаПолученияСсылки);		
		
		Если ОшибкаПолученияСсылки Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Проект"" (project).");
			
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
			
		КонецЕсли; 
		
		ДанныеЗаполнения.Вставить("Проект",						мПроект);
		
		
	КонецЕсли;	
	
	//Проект сделки -- 
	
	Если СтруктураЗапроса.Свойство("closed") Тогда
		ДанныеЗаполнения.Вставить("Закрыта",	СтруктураЗапроса.closed);
	КонецЕсли;
	
	Если СтруктураЗапроса.Свойство("successfully_closed") Тогда
		ДанныеЗаполнения.Вставить("УспешностьЗакрытия",	СтруктураЗапроса.successfully_closed);
	КонецЕсли;
	
	Если СтруктураЗапроса.Свойство("amount") Тогда
		ДанныеЗаполнения.Вставить("Сумма",	СтруктураЗапроса.amount);
	КонецЕсли;
	
	Если СтруктураЗапроса.Свойство("rent") Тогда
		ДанныеЗаполнения.Вставить("Аренда",	СтруктураЗапроса.rent);
	КонецЕсли;    
	
	ЗаполнитьЗначенияСвойств(СделкаОбъект, ДанныеЗаполнения);
	
	СделкаОбъект.Записать();
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
	
КонецПроцедуры
//+Никонов Оригинал  СоздатьБронь, в случае успеха копии удалить эту процедуру
Процедура СоздатьБронь1(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	ДанныеЗаполнения = Новый Структура;
	
	ОпределитьКлиентаПоВходящимДанным(СтруктураЗапроса, ДанныеЗаполнения);
	мКлиент = ДанныеЗаполнения.Клиент;
	
	//Добавить обработку фото паспорта.
	
	ДанныеЗаполнения.Вставить("ОбъектНедвижимости", Справочники.УПДК_ОбъектыНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.flat,36)))); 
	ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	
	purchase_method = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "purchase_method");
	
	Если purchase_method = "Ипотека" Тогда
		ДанныеЗаполнения.Вставить("СпособПриобретения", ПредопределенноеЗначение("Справочник.УПДК_СпособыПриобретенияНедвижимости.Ипотека"));
	ИначеЕсли purchase_method = "Рассрочка" Тогда 
		ДанныеЗаполнения.Вставить("СпособПриобретения", ПредопределенноеЗначение("Справочник.УПДК_СпособыПриобретенияНедвижимости.Рассрочка"));
	ИначеЕсли purchase_method = "Стопроцентная оплата" Тогда
		ДанныеЗаполнения.Вставить("СпособПриобретения", ПредопределенноеЗначение("Справочник.УПДК_СпособыПриобретенияНедвижимости.СтопроцентнаяОплата"));
	КонецЕсли;
	
	мОрганизация = УПДК_Недвижимость.СобственникНедвижимостиНаДату(ДанныеЗаполнения.ОбъектНедвижимости, ТекущаяДатаСеанса());
	
	Если ТипЗнч(мОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		ДанныеЗаполнения.Организация = мОрганизация;
	КонецЕсли;
	
	Если СтруктураЗапроса.Свойство("agency")  и  СтруктураЗапроса.Свойство("agent") Тогда
		Если ЗначениеЗаполнено(СтруктураЗапроса.agency) И ЗначениеЗаполнено(СтруктураЗапроса.agent) Тогда
			
			ДанныеЗаполнения.Вставить("АгентствоНедвижимости", Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.agency,36)))); 
			ДанныеЗаполнения.Вставить("Агент", Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.agent,36)))); 
			
		КонецЕсли;
	КонецЕсли;	
	
	Бронь = Документы.УПДК_ЗаказКлиента.СоздатьДокумент();
	Бронь.Заполнить(ДанныеЗаполнения);
	Бронь.Дата = ТекущаяДатаСеанса();
	Бронь.Комментарий = "Создано в мобильном приложении";
	
	Если ЗначениеЗаполнено(СтруктураЗапроса.manager) Тогда
		
		Бронь.Ответственный =  Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.manager,36)));
		
	КонецЕсли;
	
	Попытка
		
		НачатьТранзакцию();
		
		Бронь.Записать(РежимЗаписиДокумента.Проведение);
		
		//После записи брони установим сделку если таковая существует
		
		ОшибкаПолученияСсылки = Истина;                    
		ПривязыватьКСделке = Ложь;
		
		ПривязыватьКСделке = СтруктураЗапроса.Свойство("deal_id");	
		мСделка = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "deal_id", Документы.Сделка, ОшибкаПолученияСсылки);
		
		Если ПривязыватьКСделке Тогда
			
			Если ОшибкаПолученияСсылки Тогда
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Сделки"" (deal_id).");
				
			КонецЕсли;
			
			Если мСделка.Дата > Бронь.Дата Тогда
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Дата сделки (deal) к которой будет привязана бронь не может быть больше документа брони.");
				
			КонецЕсли;
			
			Если мСделка.Клиент <> Бронь.Клиент Тогда
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Клиент документа брони должен совпадать с клиентом по сделке (deal).");
				
			КонецЕсли;
			
			РегистрыКИзменению = Новый Массив;
			РегистрыКИзменению.Добавить("Сделки");
			РегистрыКИзменению.Добавить("СделкиАктивные");
			РегистрыКИзменению.Добавить("СделкиИстория");
			РегистрыКИзменению.Добавить("СделкиОбщая");
			
			Для Каждого РегистрИмя Из РегистрыКИзменению Цикл
				
				//Регистр "Сделки"
				НаборСделки = РегистрыСведений[РегистрИмя].СоздатьНаборЗаписей();
				
				НаборСделки.Отбор.РегистраторСделки.Установить(мСделка);
				НаборСделки.Прочитать();
				
				Для Каждого мЗапись Из НаборСделки Цикл
					мЗапись.Сделка = мСделка;
				КонецЦикла;
				
				НаборСделки.Записать();
				
			КонецЦикла;
			
			
		КонецЕсли;
		
		///////////////////////////////////////////////////////
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки("Квартира свободна");
		
		//Обновляем статус квартиры в мобилке.
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()); 
		
		HTTPСоединение = Новый HTTPСоединение(СтруктураЗапроса.Mobsted_HTTPServer,,,,,,ssl);
		
		//https:///
		HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate");		
		HTTPЗапрос.Заголовки.Вставить("Authorization", СтруктураЗапроса.AuthorizationK); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		Структура = Новый Структура;
		Структура.Вставить("ApplicationId", СтруктураЗапроса.ИДбазы);
		Структура.Вставить("Id_Квартиры", СтруктураЗапроса.flat); 		
		//Demokva4fa5a9c-e34f-11e8-a9ae-000d3a2709a2
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		
		Структура = Новый Структура;
		Структура.Вставить("Статус_Квартиры", Строка("Бронь"));
		Структура.Вставить("Дата_изменения_статуса_кв", Формат(Бронь.Дата,"ДФ=yyyy-MM-dd"));
		Структура.Вставить("Срок_бронирования", Формат(Бронь.СрокБронирования,"ДФ=yyyy-MM-dd"));
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();
		
		
		мСтрока = "create=" + Json1 + "&update=" + Json2;
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	 		
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_AddOrder_statusflat", ТекущаяДатаСеанса(), мСтрока);
		
		Результат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();   	
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
		Если Результат.КодСостояния <> 200 Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки(СтрШаблон("Не удалось обновить статус квартиры в мобильном приложении, по причине: %1", Результат.ПолучитьТелоКакСтроку()));
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
		
		//https:///
		HTTPЗапрос = Новый HTTPЗапрос("api/v4/events"); 
		
		HTTPЗапрос.Заголовки.Вставить("Authorization", СтруктураЗапроса.AuthorizationK); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		Структура = Новый Структура;
		
		Структура.Вставить("customer_fio", СтруктураЗапроса.customer_fio); 
		Структура.Вставить("customer_phone", СтруктураЗапроса.customer_phone); 
		//Структура.Вставить("customer_id", Строка(СтруктураЗапроса.ИДбазы) + "klient" + Строка(мКлиент.УникальныйИдентификатор())); 
		Структура.Вставить("customer_id", Строка(мКлиент.УникальныйИдентификатор()));
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();
		
		мСтрока =  "ApplicationId=1&ObjectId=" + СтруктураЗапроса.objectid + "&ScreenId=0&Value=" + Json2; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_AddOrder", ТекущаяДатаСеанса(), мСтрока);
		
		Результат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();   	
		
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
		
		Если Результат.КодСостояния <> 200 Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки(СтрШаблон("Не удалось создать событие ""Бронь"", по причине: %1", Результат.ПолучитьТелоКакСтроку()));
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПДК_НедвижимостьСрезПоследних.Период КАК Период,
		|	УПДК_НедвижимостьСрезПоследних.СтатусНедвижимости КАК СтатусНедвижимости,
		|	ЕСТЬNULL(УПДК_НедвижимостьСрезПоследних.ЗаказКлиента.СрокБронирования, """") КАК СрокБронирования
		|ИЗ
		|	РегистрСведений.УПДК_Недвижимость.СрезПоследних(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_НедвижимостьСрезПоследних";
		
		Запрос.УстановитьПараметр("ОбъектНедвижимости", ДанныеЗаполнения.ОбъектНедвижимости);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			//Обновляем статус квартиры в мобилке.
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()); 
			
			HTTPСоединение = Новый HTTPСоединение(СтруктураЗапроса.Mobsted_HTTPServer,,,,,,ssl);
			
			//https:///
			HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate");		
			HTTPЗапрос.Заголовки.Вставить("Authorization", СтруктураЗапроса.AuthorizationK); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			
			
			Структура = Новый Структура;
			Структура.Вставить("ApplicationId",СтруктураЗапроса.ИДбазы);
			Структура.Вставить("Id_Квартиры", СтруктураЗапроса.flat); 		
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json1 = Запись.Закрыть();
			
			
			Структура = Новый Структура;
			Структура.Вставить("Статус_Квартиры", Строка(ВыборкаДетальныеЗаписи.СтатусНедвижимости));
			Структура.Вставить("Дата_изменения_статуса_кв", Формат(ВыборкаДетальныеЗаписи.Период,"ДФ=yyyy-MM-dd"));
			Структура.Вставить("Срок_бронирования", Формат(ВыборкаДетальныеЗаписи.СрокБронирования,"ДФ=yyyy-MM-dd"));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json2 = Запись.Закрыть();		
			
			мСтрока = "create=" + Json1 + "&update=" + Json2;
			
			HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_AddOrder_StatusFlat", ТекущаяДатаСеанса(), мСтрока);
			
			Результат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			
			ЧтениеJSON	= Новый ЧтениеJSON;	
			ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку()); 		
			СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
			ЧтениеJSON.Закрыть();   	
			
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
			
			
			Если Результат.КодСостояния <> 200 Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки(СтрШаблон("Не удалось обновить статус квартиры в мобильном приложении, по причине: %1", Результат.ПолучитьТелоКакСтроку()));
				
			КонецЕсли;
			
		КонецЦикла;
		
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки("Квартира занята");
		
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
КонецПроцедуры 

//+Никонов Копия Создать бронь, в случае успех оставить эту и удалить оригинал
Процедура СоздатьБронь(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	ДанныеЗаполнения = Новый Структура;
	
	ОпределитьКлиентаПоВходящимДанным(СтруктураЗапроса, ДанныеЗаполнения);
	мКлиент = ДанныеЗаполнения.Клиент;
	
	//Добавить обработку фото паспорта.
	
	ДанныеЗаполнения.Вставить("ОбъектНедвижимости", Справочники.УПДК_ОбъектыНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.flat,36)))); 
	ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	
	purchase_method = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "purchase_method");
	Если СтруктураЗапроса.Свойство("purchase_method")Тогда
		ОшибкаПолученияСсылки = Истина; 
		СпособОплаты = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "purchase_method", Справочники.УПДК_СпособыПриобретенияНедвижимости, ОшибкаПолученияСсылки); 
		Если ОшибкаПолученияСсылки Тогда
			Ответ = Новый HTTPСервисОтвет(520);
			Json = Mobsted_ВызовСервера.СтруктураЗаписьJson(Новый Структура("Ответ", "Не указан верно или имеет не верный формат GUID ""Способ оплаты"""));
			Mobsted_ВызовСервера.ПолучитьОтветДляЗапроса(Ответ,Json);
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ДанныеЗаполнения.Вставить("СпособПриобретения",СпособОплаты);
	
	мОрганизация = УПДК_Недвижимость.СобственникНедвижимостиНаДату(ДанныеЗаполнения.ОбъектНедвижимости, ТекущаяДатаСеанса());
	
	Если ТипЗнч(мОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		ДанныеЗаполнения.Организация = мОрганизация;
	КонецЕсли;
	
	Если СтруктураЗапроса.Свойство("agency")  и  СтруктураЗапроса.Свойство("agent") Тогда
		Если ЗначениеЗаполнено(СтруктураЗапроса.agency) И ЗначениеЗаполнено(СтруктураЗапроса.agent) Тогда
			ДанныеЗаполнения.Вставить("АгентствоНедвижимости", Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.agency,36)))); 
			ДанныеЗаполнения.Вставить("Агент", Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.agent,36)))); 
		КонецЕсли;
	КонецЕсли;	
	
	Бронь = Документы.УПДК_ЗаказКлиента.СоздатьДокумент();
	Бронь.Заполнить(ДанныеЗаполнения);
	Бронь.Дата = ТекущаяДатаСеанса();
	Бронь.Комментарий = "Создано в мобильном приложении";
	
	Если ЗначениеЗаполнено(СтруктураЗапроса.manager) Тогда
		
		Бронь.Ответственный =  Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.manager,36)));
		
	КонецЕсли;
	
	Попытка
		
		НачатьТранзакцию();
		
		Бронь.Записать(РежимЗаписиДокумента.Проведение);
		
		//После записи брони установим сделку если таковая существует
		
		ОшибкаПолученияСсылки = Истина;                    
		ПривязыватьКСделке = Ложь;
		
		ПривязыватьКСделке = СтруктураЗапроса.Свойство("deal_id");	
		мСделка = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "deal_id", Документы.Сделка, ОшибкаПолученияСсылки);
		
		Если ПривязыватьКСделке Тогда
			
			Если ОшибкаПолученияСсылки Тогда
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Сделки"" (deal_id).");
				
			КонецЕсли;
			
			Если мСделка.Дата > Бронь.Дата Тогда
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Дата сделки (deal) к которой будет привязана бронь не может быть больше документа брони.");
				
			КонецЕсли;
			
			Если мСделка.Клиент <> Бронь.Клиент Тогда
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Клиент документа брони должен совпадать с клиентом по сделке (deal).");
				
			КонецЕсли;
			
			РегистрыКИзменению = Новый Массив;
			РегистрыКИзменению.Добавить("Сделки");
			РегистрыКИзменению.Добавить("СделкиАктивные");
			РегистрыКИзменению.Добавить("СделкиИстория");
			РегистрыКИзменению.Добавить("СделкиОбщая");
			
			Для Каждого РегистрИмя Из РегистрыКИзменению Цикл
				
				//Регистр "Сделки"
				НаборСделки = РегистрыСведений[РегистрИмя].СоздатьНаборЗаписей();
				
				НаборСделки.Отбор.РегистраторСделки.Установить(мСделка);
				НаборСделки.Прочитать();
				
				Для Каждого мЗапись Из НаборСделки Цикл
					мЗапись.Сделка = мСделка;
				КонецЦикла;
				
				НаборСделки.Записать();
				
			КонецЦикла;
			
			
		КонецЕсли;
		
		///////////////////////////////////////////////////////
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки("Квартира свободна");
		
		//Обновляем статус квартиры в мобилке.
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()); 
		
		HTTPСоединение = Новый HTTPСоединение(СтруктураЗапроса.Mobsted_HTTPServer,,,,,,ssl);
		
		//https:///
		HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate");		
		HTTPЗапрос.Заголовки.Вставить("Authorization", СтруктураЗапроса.AuthorizationK); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		Структура = Новый Структура;
		Структура.Вставить("ApplicationId", СтруктураЗапроса.ИДбазы);
		Структура.Вставить("Id_Квартиры", СтруктураЗапроса.flat); 		
		//Demokva4fa5a9c-e34f-11e8-a9ae-000d3a2709a2
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		
		Структура = Новый Структура;
		Структура.Вставить("Статус_Квартиры", Строка("Бронь"));
		Структура.Вставить("Дата_изменения_статуса_кв", Формат(Бронь.Дата,"ДФ=yyyy-MM-dd"));
		Структура.Вставить("Срок_бронирования", Формат(Бронь.СрокБронирования,"ДФ=yyyy-MM-dd"));
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();
		
		
		мСтрока = "create=" + Json1 + "&update=" + Json2;
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	 		
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_AddOrder_statusflat", ТекущаяДатаСеанса(), мСтрока);
		
		Результат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();   	
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
		Если Результат.КодСостояния <> 200 Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки(СтрШаблон("Не удалось обновить статус квартиры в мобильном приложении, по причине: %1", Результат.ПолучитьТелоКакСтроку()));
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
		
		//https:///
		HTTPЗапрос = Новый HTTPЗапрос("api/v4/events"); 
		
		HTTPЗапрос.Заголовки.Вставить("Authorization", СтруктураЗапроса.AuthorizationK); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		Структура = Новый Структура;
		
		Структура.Вставить("customer_fio", СтруктураЗапроса.customer_fio); 
		Структура.Вставить("customer_phone", СтруктураЗапроса.customer_phone); 
		//Структура.Вставить("customer_id", Строка(СтруктураЗапроса.ИДбазы) + "klient" + Строка(мКлиент.УникальныйИдентификатор())); 
		Структура.Вставить("customer_id", Строка(мКлиент.УникальныйИдентификатор()));
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();
		
		мСтрока =  "ApplicationId=1&ObjectId=" + СтруктураЗапроса.objectid + "&ScreenId=0&Value=" + Json2; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_AddOrder", ТекущаяДатаСеанса(), мСтрока);
		
		Результат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку()); 		
		СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();   	
		
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
		
		
		Если Результат.КодСостояния <> 200 Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки(СтрШаблон("Не удалось создать событие ""Бронь"", по причине: %1", Результат.ПолучитьТелоКакСтроку()));
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПДК_НедвижимостьСрезПоследних.Период КАК Период,
		|	УПДК_НедвижимостьСрезПоследних.СтатусНедвижимости КАК СтатусНедвижимости,
		|	ЕСТЬNULL(УПДК_НедвижимостьСрезПоследних.ЗаказКлиента.СрокБронирования, """") КАК СрокБронирования
		|ИЗ
		|	РегистрСведений.УПДК_Недвижимость.СрезПоследних(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_НедвижимостьСрезПоследних";
		
		Запрос.УстановитьПараметр("ОбъектНедвижимости", ДанныеЗаполнения.ОбъектНедвижимости);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			//Обновляем статус квартиры в мобилке.
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()); 
			
			HTTPСоединение = Новый HTTPСоединение(СтруктураЗапроса.Mobsted_HTTPServer,,,,,,ssl);
			
			//https:///
			HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate");		
			HTTPЗапрос.Заголовки.Вставить("Authorization", СтруктураЗапроса.AuthorizationK); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			
			
			Структура = Новый Структура;
			Структура.Вставить("ApplicationId",СтруктураЗапроса.ИДбазы);
			Структура.Вставить("Id_Квартиры", СтруктураЗапроса.flat); 		
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json1 = Запись.Закрыть();
			
			
			Структура = Новый Структура;
			Структура.Вставить("Статус_Квартиры", Строка(ВыборкаДетальныеЗаписи.СтатусНедвижимости));
			Структура.Вставить("Дата_изменения_статуса_кв", Формат(ВыборкаДетальныеЗаписи.Период,"ДФ=yyyy-MM-dd"));
			Структура.Вставить("Срок_бронирования", Формат(ВыборкаДетальныеЗаписи.СрокБронирования,"ДФ=yyyy-MM-dd"));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json2 = Запись.Закрыть();		
			
			мСтрока = "create=" + Json1 + "&update=" + Json2;
			
			HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_AddOrder_StatusFlat", ТекущаяДатаСеанса(), мСтрока);
			
			Результат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			
			ЧтениеJSON	= Новый ЧтениеJSON;	
			ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку()); 		
			СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
			ЧтениеJSON.Закрыть();   	
			
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 
			
			
			Если Результат.КодСостояния <> 200 Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки(СтрШаблон("Не удалось обновить статус квартиры в мобильном приложении, по причине: %1", Результат.ПолучитьТелоКакСтроку()));
				
			КонецЕсли;
			
		КонецЦикла;
		
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки("Квартира занята");
		
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
КонецПроцедуры 

//Клиент отправляет заявку менеджеру на изменение формы оплаты брони
//
Процедура ИзменитьСпособОплатыБрони(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	КартаМаршрута = ПараметрыОбработчика.КартаМаршрутаПерезвонить;
	ТочкаСтарта = ПараметрыОбработчика.ТочкаСтартаПерезвонить;
	
	Автор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.IDmanager,36)));
	ТелефонКлиента = СтруктураЗапроса.customer_phone;
	ОбъектНедвижимости = Справочники.УПДК_ОбъектыНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.flat,36))); 
	СпособПриобретения = Справочники.УПДК_СпособыПриобретенияНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.purchase_method,36)));
	Бронь = Документы.УПДК_ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.order_id,36)));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_ЗаказКлиента.Ссылка КАК Ссылка,
	|	УПДК_ЗаказКлиента.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	УПДК_ЗаказКлиента.Клиент КАК Клиент
	|ИЗ
	|	Документ.УПДК_ЗаказКлиента КАК УПДК_ЗаказКлиента
	|ГДЕ
	|	УПДК_ЗаказКлиента.Ссылка = &Ссылка
	|	И УПДК_ЗаказКлиента.ОбъектНедвижимости = &ОбъектНедвижимости";
	
	Запрос.УстановитьПараметр("ОбъектНедвижимости", ОбъектНедвижимости);
	Запрос.УстановитьПараметр("Ссылка", Бронь);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Клиент = Выборка.Клиент; 
		
		Попытка
			НачатьТранзакцию();
			
			БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			БизнесПроцесс.КартаМаршрута = КартаМаршрута;
			БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
			БизнесПроцесс.Наименование = "Изменить сспособ оплаты брони";
			БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
			БизнесПроцесс.Дата = ТекущаяДатаСеанса();
			БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
			БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
			БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
			БизнесПроцесс.Автор = Автор;	
			БизнесПроцесс.Партнер = Клиент;	
			БизнесПроцесс.ОбъектНедвижимости = ОбъектНедвижимости;
			БизнесПроцесс.Предмет = Бронь;
			БизнесПроцесс.Описание = СтрШаблон("По объекту недвижимости %1, 
			|клиент желает изменить форму оплаты брони
			|Новая форма оплаты:%2 
			|Телефон для связи:%3", ОбъектНедвижимости, СпособПриобретения, ТелефонКлиента);
			БизнесПроцесс.Записать();
			БизнесПроцесс.Старт();
			
			//СтруктураЗапроса.Заметка.Предмет = БизнесПроцесс.Ссылка;
			//СтруктураЗапроса.Заметка.Записать(); 
			
			ЗафиксироватьТранзакцию();
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки("Заявка отправлена, ожидайте звонка");
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
			
		КонецПопытки;
		
	Иначе
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки("Объект недвижимости не соответствует брони клиента");
		
	КонецЕсли; 
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
КонецПроцедуры

Процедура СоздатьПредБронь(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	//objectid
	//flat
	
	КартаМаршрута = ПараметрыОбработчика.КартаМаршрутаПредБронь;
	ТочкаСтарта = ПараметрыОбработчика.ТочкаСтартаПредБронь;
	Автор = ПараметрыОбработчика.Автор;
	
	//Не обязатаельно чтобы квартира была свободной чтобы оформить предбронь...
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Mobsted_ИдентификаторыОбъектов КАК Mobsted_ИдентификаторыОбъектов
	|		ПО (Mobsted_ИдентификаторыОбъектов.Объект = Партнеры.Ссылка)
	|ГДЕ
	|	Mobsted_ИдентификаторыОбъектов.Идентификатор = &MobstedId";
	
	Запрос.УстановитьПараметр("MobstedId", Число(СтруктураЗапроса.objectid));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКлиент = РезультатЗапроса.Выбрать();
	
	Если ВыборкаКлиент.Следующий() Тогда
		
		Клиент = ВыборкаКлиент.Ссылка;
		
		ОбъектНедвижимости = Справочники.УПДК_ОбъектыНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.flat,36)));
		СпособПриобретения = Справочники.УПДК_СпособыПриобретенияНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.purchase_method,36)));
		
		Запрос = Новый Запрос;	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПДК_НедвижимостьСрезПоследних.Период КАК Период,
		|	УПДК_НедвижимостьСрезПоследних.СтатусНедвижимости КАК СтатусНедвижимости,
		|	ЕСТЬNULL(УПДК_НедвижимостьСрезПоследних.ЗаказКлиента.СрокБронирования, """") КАК СрокБронирования
		|ИЗ
		|	РегистрСведений.УПДК_Недвижимость.СрезПоследних(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_НедвижимостьСрезПоследних";
		
		Запрос.УстановитьПараметр("ОбъектНедвижимости", ОбъектНедвижимости);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() И ВыборкаДетальныеЗаписи.СтатусНедвижимости = Перечисления.УПДК_СтатусыНедвижимости.Свободно Тогда
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Клиент", Клиент); 
			ДанныеЗаполнения.Вставить("ОбъектНедвижимости", ОбъектНедвижимости);  
			ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			ДанныеЗаполнения.Вставить("СпособПриобретения", СпособПриобретения);
			
			мОрганизация = УПДК_Недвижимость.СобственникНедвижимостиНаДату(ДанныеЗаполнения.ОбъектНедвижимости, ТекущаяДатаСеанса());
			Если ТипЗнч(мОрганизация) = Тип("СправочникСсылка.Организации") Тогда
				ДанныеЗаполнения.Организация = мОрганизация;
			КонецЕсли;	
			
			Бронь = Документы.УПДК_ПредварительныйЗаказКлиента.СоздатьДокумент();
			Бронь.Заполнить(ДанныеЗаполнения);
			
			Бронь.ОбъектНедвижимости = ДанныеЗаполнения.ОбъектНедвижимости;
			Бронь.Клиент = ДанныеЗаполнения.Клиент;
			Бронь.Организация = ДанныеЗаполнения.Организация;
			Бронь.СпособПриобретения = ДанныеЗаполнения.СпособПриобретения;
			Бронь.Дата = ТекущаяДатаСеанса();
			Бронь.Комментарий = "Создано в мобильном приложении";
			
			Попытка
				
				НачатьТранзакцию();
				
				Бронь.Записать(РежимЗаписиДокумента.Проведение);
				
				БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
				
				БизнесПроцесс.КартаМаршрута = КартаМаршрута;
				БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
				БизнесПроцесс.Наименование = "Подтвердить предбронь";
				БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
				БизнесПроцесс.Дата = ТекущаяДатаСеанса();
				БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
				БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
				БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
				БизнесПроцесс.Автор = Автор;	
				БизнесПроцесс.Партнер = Клиент;	
				БизнесПроцесс.Основание = ОбъектНедвижимости;
				БизнесПроцесс.Предмет = Бронь.Ссылка; 			 	
				БизнесПроцесс.Описание = "Подтвердить предбронь созданную в мобильном приложении и перевести ее в бронь"; 
				
				БизнесПроцесс.Записать();
				БизнесПроцесс.Старт();	
				
				//СтруктураЗапроса.Заметка.Предмет = БизнесПроцесс.Ссылка;
				//СтруктураЗапроса.Заметка.Записать();
				ДобавитьПаспортИСнилс(Клиент,СтруктураЗапроса);
				ЗафиксироватьТранзакцию();
				
				Ответ = Новый HTTPСервисОтвет(200); 
				ТекстОшибки = "Ожидайте подтверждения";
				Ответ.УстановитьТелоИзСтроки(ТекстОшибки);  
				
				РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, ТекстОшибки);
			Исключение
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
				
				РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 520, ОписаниеОшибки());
			КонецПопытки; 
			
			
			
		Иначе
			
			//Обновляем статус квартиры в мобилке.
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()); 
			
			HTTPСоединение = Новый HTTPСоединение(СтруктураЗапроса.Mobsted_HTTPServer,,,,,,ssl);
			
			//https:///
			HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate");		
			HTTPЗапрос.Заголовки.Вставить("Authorization", СтруктураЗапроса.AuthorizationK); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
			
			
			Структура = Новый Структура;
			Структура.Вставить("ApplicationId",СтруктураЗапроса.ИДбазы);
			Структура.Вставить("Id_Квартиры", СтруктураЗапроса.flat); 		
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json1 = Запись.Закрыть();
			
			
			Структура = Новый Структура;
			Структура.Вставить("Статус_Квартиры", Строка(ВыборкаДетальныеЗаписи.СтатусНедвижимости));
			Структура.Вставить("Дата_изменения_статуса_кв", Формат(ВыборкаДетальныеЗаписи.Период,"ДФ=yyyy-MM-dd"));
			Структура.Вставить("Срок_бронирования", Формат(ВыборкаДетальныеЗаписи.СрокБронирования,"ДФ=yyyy-MM-dd"));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json2 = Запись.Закрыть();		
			
			мСтрока = "create=" + Json1 + "&update=" + Json2;
			
			HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
			
			Результат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); 		
			
			Если Результат.КодСостояния <> 200 Тогда
				
				Ответ = Новый HTTPСервисОтвет(520); 
				ТекстОшибки = СтрШаблон("Не удалось обновить статус квартиры в мобильном приложении, по причине: %1", Результат.ПолучитьТелоКакСтроку());
				Ответ.УстановитьТелоИзСтроки(ТекстОшибки); 
				
				РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 520, ТекстОшибки);
			КонецЕсли; 		
			
			Ответ = Новый HTTPСервисОтвет(200);
			ТекстОшибки = "Квартира занята";
			Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, ТекстОшибки);
			
		КонецЕсли;
		
	Иначе
		
		Ответ = Новый HTTPСервисОтвет(405);  
		ТекстОшибки = "Клиент не найден";
		Ответ.УстановитьТелоИзСтроки(ТекстОшибки);  
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ТекстОшибки);
		
	КонецЕсли; 
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
КонецПроцедуры

Процедура СоздатьСобытие(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	ДанныеЗаполнения = Новый Структура; 
	
	НачатьТранзакцию();
	
	Попытка
		
		ОпределитьКлиентаПоВходящимДанным(СтруктураЗапроса, ДанныеЗаполнения);
		
		//Готовим структуру заполнения
		
		ДанныеЗаполнения.Вставить("Партнер", ДанныеЗаполнения.Клиент);
		
		ДанныеЗаполнения.Вставить("КонтактноеЛицо", ДанныеЗаполнения.ОсновноеКонтактноеЛицо);
		
		//Вид события
		
		ОшибкаПолученияСсылки = Истина;
		
		мВидСобытия = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "event_type", Справочники.Проекты, ОшибкаПолученияСсылки); 
		
		Если ОшибкаПолученияСсылки Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Вида события"" (event_type).");
			
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
			
		КонецЕсли;
		
		
		//Автор документа
		
		ОшибкаПолученияСсылки = Истина; 
		
		мАвтор = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "manager", Справочники.Пользователи, ОшибкаПолученияСсылки);
		
		Если ОшибкаПолученияСсылки Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Автор"" (manager).");
			
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("Проект", мВидСобытия);
		
		ДанныеЗаполнения.Вставить("Автор", мАвтор);
		
		ДанныеЗаполнения.Вставить("Ответственный", мАвтор);
		
		ДанныеЗаполнения.Вставить("Место", СтруктураЗапроса.customer_phone); 
		
		//Агент сделки ++
		
		Если СтруктураЗапроса.Свойство("agent") Тогда
			
			ОшибкаПолученияСсылки = Истина;
			
			мАгент = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "agent", Справочники.ФизическиеЛица, ОшибкаПолученияСсылки);
			
			Если ОшибкаПолученияСсылки Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Имеет не верный формат GUID ""Агент"" (agent).");
				
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;
			
			ДанныеЗаполнения.Вставить("УПДК_Агент", мАгент);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПартнерыКонтактныеЛица.Ссылка КАК Агентство
			|ИЗ
			|	Справочник.Партнеры.КонтактныеЛица КАК ПартнерыКонтактныеЛица
			|ГДЕ
			|	ПартнерыКонтактныеЛица.ФизЛицо = &мАгент";
			
			Запрос.УстановитьПараметр("мАгент", мАгент);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий(); 	
			
			ДанныеЗаполнения.Вставить("УПДК_АгентствоНедвижимости", ВыборкаДетальныеЗаписи.Агентство);
			
			
		КонецЕсли;
		
		//Агент сделки --
		
		//Создаем Событие или получаем его
		
		Если СтруктураЗапроса.ТипЗапроса = "updateevent" Тогда
			
			мСобытиеСсылка = Документы.CRM_Событие.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗапроса.event_id));
			мСобытие = мСобытиеСсылка.ПолучитьОбъект();
			
		Иначе
			
			мСобытие = Документы.CRM_Событие.СоздатьДокумент();
			
		КонецЕсли;
		
		мСобытие.Заполнить(ДанныеЗаполнения);
		
		//Тема события
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "event_theme") <> Неопределено Тогда
			
			мСобытие.Тема = СтруктураЗапроса.event_theme;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "date") <> Неопределено Тогда
			
			мСобытие.Дата = XMLЗначение(Тип("Дата"), СтруктураЗапроса.date);
			мСобытие.ОкончаниеСобытия = мСобытие.Дата;
			
		Иначе
			
			мСобытие.Дата = СтруктураЗапроса.ТекущаяДата;
			мСобытие.ОкончаниеСобытия = мСобытие.Дата;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "all_day") <> Неопределено Тогда
			
			мСобытие.НаВесьДень = СтруктураЗапроса.all_day;	
			
		КонецЕсли;
		
		//Событие всегда будет запланированным
		мСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано;
		
		//Заполним проект
		
		ОшибкаПолученияСсылки = Истина;
		
		мПроект = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "project", Справочники.УПДК_Проекты, ОшибкаПолученияСсылки);
		
		Если ОшибкаПолученияСсылки Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""УПДК_Проект"" (project).");
			
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
			
		КонецЕсли;	
		
		мСобытие.УПДК_Проект = мПроект;
		
		//Добавим потребность
		НовПотребность = мСобытие.Потребности.Добавить();
		
		Новпотребность.ВидПотребности = ПланыВидовХарактеристик.ПотребностиКлиентов.Проекты;
		
		НовПотребность.Значение = мПроект;
		
		мСобытие.Записать();
		
		Если СтруктураЗапроса.Свойство("deal_id") Тогда
			
			ОшибкаПолученияСсылки = Истина;
			
			мСделка = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "deal_id", Документы.Сделка, ОшибкаПолученияСсылки);
			
			Если ОшибкаПолученияСсылки Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Сделки"" (deal_id).");
				
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;
			
			Документы.Сделка.ДобавитьДокументКСделке(мСобытие.Ссылка, мСделка); 
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сделки.Сделка КАК Сделка
			|ИЗ
			|	РегистрСведений.Сделки КАК Сделки
			|ГДЕ
			|	Сделки.РегистраторСделки = &мСобытие";
			
			Запрос.УстановитьПараметр("мСобытие", мСобытие.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда 
				
				Документы.Сделка.ДобавитьНовуюСделку(мСобытие.Ссылка);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
		Ответ = Новый HTTPСервисОтвет(200);
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ответ = Новый HTTPСервисОтвет(520);
		Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 520, ТекстОшибки); 
		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура СоздатьЗадачу(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	ДанныеЗаполнения = Новый Структура; 
	
	НачатьТранзакцию();
	
	Попытка
		
		Если СтруктураЗапроса.Свойство("customer_phone") Тогда
			
			ДанныеЗаполнения.Вставить("Телефон", СтруктураЗапроса.customer_phone); 
			
			ОпределитьКлиентаПоВходящимДанным(СтруктураЗапроса, ДанныеЗаполнения);
			
			//Готовим структуру заполнения
			
			ДанныеЗаполнения.Вставить("CRM_Партнер", ДанныеЗаполнения.Клиент);
			ДанныеЗаполнения.Вставить("КонтактноеЛицо",	ДанныеЗаполнения.ОсновноеКонтактноеЛицо);
			
			
		КонецЕсли;
		
		//+Никонов по задаче 4dev-707
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "date") <> Неопределено Тогда
			Попытка
				ДанныеЗаполнения.Вставить("Дата",	XMLЗначение(Тип("Дата"), СтруктураЗапроса.date));
				ДанныеЗаполнения.Вставить("ДатаНачала",	XMLЗначение(Тип("Дата"), СтруктураЗапроса.date));
			Исключение
				ДанныеЗаполнения.Вставить("Дата",	ТекущаяДата());
				ДанныеЗаполнения.Вставить("ДатаНачала",	ТекущаяДата());
			КонецПопытки;
		КонецЕсли;
		//-Никонов
		
		//Автор задачи ++
		
		ОшибкаПолученияСсылки = Истина;
		
		мАвтор = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "manager", Справочники.Пользователи, ОшибкаПолученияСсылки);  
		
		Если ОшибкаПолученияСсылки Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Автор"" (manager).");
			
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("Автор",						мАвтор);
		
		//Автор задачи --
		
		//Исполнитель задачи ++
		
		ОшибкаПолученияСсылки = Истина;
		
		мИсполнитель = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "responsible", Справочники.Пользователи, ОшибкаПолученияСсылки);  
		
		Если ОшибкаПолученияСсылки Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Исполнитель"" (responsible).");
			
			СтруктураОтвета.Вставить("Ответ", Ответ);
			Возврат;
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("Исполнитель",						мИсполнитель);
		
		//Исполнитель задачи --
		
		//Срок исполнения ++ //По умолчанию - 1 день
		
		//+Никонов по задаче 4dev-707
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "deadline") <> Неопределено Тогда
			Попытка
				ДанныеЗаполнения.Вставить("СрокИсполнения",	XMLЗначение(Тип("Дата"), СтруктураЗапроса.deadline));
			Исключение 
				ДанныеЗаполнения.Вставить("СрокИсполнения",	СтруктураЗапроса.ТекущаяДата + 86400);
			КонецПопытки;
		КонецЕсли;
		//-Никонов
		
		//Срок исполнения --
		
		//+Никонов
		//Если ДанныеЗаполнения.Свойство("CRM_Партнер") Тогда
		//	ДанныеЗаполнения.Вставить("Предмет",					ДанныеЗаполнения.CRM_Партнер);
		//	ДанныеЗаполнения.Вставить("ПредметСтрокой",				Строка(ДанныеЗаполнения.CRM_Партнер));					
		//КонецЕсли;
		//-Никонов
		
		//Тема задачи  ++ //По умолчанию - Задача из Mobsted
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "theme") <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("Наименование",	СтруктураЗапроса.theme);
		Иначе 
			ДанныеЗаполнения.Вставить("Наименование",	"Задача из Mobsted.");
		КонецЕсли;
		
		//Тема задачи --
		
		//Описание задачи  ++ //По умолчанию - Интеграция с Mobsted
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "description") <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("Описание",	СтруктураЗапроса.description);
		Иначе 
			ДанныеЗаполнения.Вставить("Описание",	"Интеграция с Mobsted.");
		КонецЕсли;
		
		//Описание задачи --
		
		ДанныеЗаполнения.Вставить("Важность",					ПредопределенноеЗначение("Перечисление.ВариантыВажностиЗадачи.Обычная"));
		
		//Проект ++
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "project") <> Неопределено Тогда
			
			ОшибкаПолученияСсылки = Истина;
			
			мПроект = ПолучитьСсылкуПоПараметру(СтруктураЗапроса, "project", Справочники.УПДК_ОбъектыНедвижимости, ОшибкаПолученияСсылки);  
			
			Если ОшибкаПолученияСсылки Тогда
				
				Ответ = Новый HTTPСервисОтвет(520);
				Ответ.УстановитьТелоИзСтроки("Не указан или имеет не верный формат GUID ""Проект"" (project).");
				
				СтруктураОтвета.Вставить("Ответ", Ответ);
				Возврат;
				
			КонецЕсли;
			//+Никонов по задаче 4dev-707
			ДанныеЗаполнения.Вставить("Предмет", 							мПроект);
			ДанныеЗаполнения.Вставить("ПредметСтрокой",				Строка(мПроект));					
			//-Никонов
		КонецЕсли;
		
		//Проект --
		
		ДанныеЗаполнения.Вставить("СостояниеБизнесПроцесса",	ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен"));
		ДанныеЗаполнения.Вставить("ПринятаКИсполнению",			Истина);
		ДанныеЗаполнения.Вставить("CRM_Личная",				    Истина);
		
		Если СтруктураЗапроса.ТипЗапроса = "updatetask" Тогда
			
			ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(Новый УникальныйИдентификатор("task_id"));
			ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
			
		Иначе 
			
			ЗадачаОбъект = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, ДанныеЗаполнения);
		ЗадачаОбъект.Записать();  
		
		ЗафиксироватьТранзакцию();
		
		Ответ = Новый HTTPСервисОтвет(200);
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ответ = Новый HTTPСервисОтвет(520);
		Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
		
		СтруктураОтвета.Вставить("Ответ", Ответ);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 520, ТекстОшибки); 
		
	КонецПопытки;
	
	
	
КонецПроцедуры

Процедура СоздатьКлиента(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	ФИО = СтруктураЗапроса.customer_fio;
	НомерТелефона = СтруктураЗапроса.customer_phone;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФИО, " ");
	
	КоличествоСлов = МассивПодстрок.Количество();
	
	Фамилия = "";
	Имя = "";
	Отчество = "";
	
	Если КоличествоСлов > 0 Тогда		
		Фамилия = МассивПодстрок[0]; 		
	КонецЕсли;
	
	Если КоличествоСлов > 1 Тогда		
		Имя = МассивПодстрок[1]; 		
	КонецЕсли;
	
	Если КоличествоСлов > 2 Тогда
		
		Отчество = "";
		
		Для Счетчик = 2 по КоличествоСлов-1 Цикл
			Отчество = Отчество + " " + МассивПодстрок[Счетчик];
		КонецЦикла;
		
		Отчество = СокрЛП(Отчество);
		
	КонецЕсли;
	
	НовФизлицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
	УправлениеКонтактнойИнформацией.ДобавитьНовыйТелефон(НовФизлицо, НомерТелефона);
	НовФизлицо.Фамилия = Фамилия;
	НовФизлицо.Имя = Имя;
	НовФизлицо.Отчество = Отчество; 	
	НовФизлицо.Наименование = ФИО;
	
	НовФизлицо.Записать(); 
	
	НовКонтакт = Справочники.Партнеры.СоздатьЭлемент();
	НовКонтакт.ДатаРегистрации = ТекущаяДатаСеанса();
	НовКонтакт.Наименование = ФИО;
	НовКонтакт.CRM_ФизЛицо = Истина;
	НовКонтакт.ВидПартнера = Перечисления.ВидПартнера.ЧастноеЛицо;				
	НовКонтакт.ОсновноеКонтактноеЛицо = НовФизлицо.Ссылка;
	
	НовКЛ = НовКонтакт.КонтактныеЛица.Добавить();
	НовКл.ФизЛицо = НовФизлицо.Ссылка;
	НовКл.ПравоПодписи = Истина; 	
	
	НачатьТранзакцию();
	
	НовКонтакт.Записать();
	
	Mobsted_ВызовСервера.УстановитьИдентификаторОбъекта(НовКонтакт.Ссылка, СтруктураЗапроса.objectid);
	
	РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(НовКонтакт.Ссылка, Перечисления.СтатусыКлиента.Контакт);
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	мКлиент = НовКонтакт.Ссылка; 
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураЗапроса.Mobsted_HTTPServer,,,,,,ssl);
	
	//https:///
	HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate"); 
	
	HTTPЗапрос.Заголовки.Вставить("Authorization", СтруктураЗапроса.AuthorizationK); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
	
	Структура = Новый Структура;
	Структура.Вставить("ApplicationId", Строка(СтруктураЗапроса.ИДбазы));
	Структура.Вставить("Phone", СтруктураЗапроса.customer_phone);	
	Структура.Вставить("Тип_Объекта", "Клиент");
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json1 = Запись.Закрыть();
	
	Структура = Новый Структура;
	
	Структура.Вставить("ID_Клиента", Строка(мКлиент.УникальныйИдентификатор())); 		
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Json2 = Запись.Закрыть();
	
	
	мСтрока = "create=" + Json1 + "&update=" + Json2;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Mobsted_ОбновлениеПолейПартнеры", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть(); 
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, ЗначениеВСтрокуВнутр(СтруктураЗаявки)); 

	Ответ = Новый HTTPСервисОтвет(200);
	//Ответ.УстановитьТелоИзСтроки("Клиент успешно создан");
	Ответ.УстановитьТелоИзСтроки(Json2);
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
КонецПроцедуры

Процедура ЗадачаНаПоказАгенту(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	ДанныеЗаполнения = Новый Структура;
	
	КартаМаршрута = ПараметрыОбработчика.КартаМаршрутаАгентПоказ;
	ТочкаСтарта = ПараметрыОбработчика.ТочкаСтартаАгентПоказ;
	//Автор = ПараметрыОбработчика.Автор;
	Автор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.IDmanager,36)));
	
	ОпределитьКлиентаПоВходящимДанным(СтруктураЗапроса, ДанныеЗаполнения);	
	
	Клиент = ДанныеЗаполнения.Клиент;
	
	ОбъектНедвижимости = Справочники.УПДК_ОбъектыНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.flat,36)));
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_НедвижимостьСрезПоследних.Период КАК Период,
	|	УПДК_НедвижимостьСрезПоследних.СтатусНедвижимости КАК СтатусНедвижимости,
	|	ЕСТЬNULL(УПДК_НедвижимостьСрезПоследних.ЗаказКлиента.СрокБронирования, """") КАК СрокБронирования
	|ИЗ
	|	РегистрСведений.УПДК_Недвижимость.СрезПоследних(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_НедвижимостьСрезПоследних";
	
	Запрос.УстановитьПараметр("ОбъектНедвижимости", ОбъектНедвижимости);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() И ВыборкаДетальныеЗаписи.СтатусНедвижимости = Перечисления.УПДК_СтатусыНедвижимости.Свободно Тогда
		
		
		АгентствоНедвижимости = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.agency,36))); 
		Агент = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.agent,36))); 
		
		Попытка
			
			НачатьТранзакцию();
			
			БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			
			БизнесПроцесс.КартаМаршрута = КартаМаршрута;
			БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
			БизнесПроцесс.Наименование = "Создать показ по заявке риелтора";
			БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
			БизнесПроцесс.Дата = ТекущаяДатаСеанса();
			БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
			БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
			БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
			БизнесПроцесс.Автор = Автор;	
			БизнесПроцесс.Партнер = Клиент;	
			БизнесПроцесс.Основание = ОбъектНедвижимости;
			БизнесПроцесс.Предмет = Агент; 			 	
			БизнесПроцесс.Описание = "Согласовать показ с риелтором"; 
			
			БизнесПроцесс.Записать();
			БизнесПроцесс.Старт();
			
			
			СтруктураЗапроса.Заметка.Предмет = БизнесПроцесс.Ссылка;
			СтруктураЗапроса.Заметка.Записать(); 
			
			ЗафиксироватьТранзакцию();
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки("Ожидайте подтверждения");
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
			
		КонецПопытки; 
		
		
		
	Иначе
		
		//Обновляем статус квартиры в мобилке.
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()); 
		
		HTTPСоединение = Новый HTTPСоединение(СтруктураЗапроса.Mobsted_HTTPServer,,,,,,ssl);
		
		//https:///
		HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate");		
		HTTPЗапрос.Заголовки.Вставить("Authorization", СтруктураЗапроса.AuthorizationK); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		
		Структура = Новый Структура;
		Структура.Вставить("ApplicationId",СтруктураЗапроса.ИДбазы);
		Структура.Вставить("Id_Квартиры", СтруктураЗапроса.flat); 		
		Структура.Вставить("Тип_Объекта", "Квартира");
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		
		Структура = Новый Структура;
		Структура.Вставить("Статус_Квартиры", Строка(ВыборкаДетальныеЗаписи.СтатусНедвижимости));
		Структура.Вставить("Дата_изменения_статуса_кв", Формат(ВыборкаДетальныеЗаписи.Период,"ДФ=yyyy-MM-dd"));
		Структура.Вставить("Срок_бронирования", Формат(ВыборкаДетальныеЗаписи.СрокБронирования,"ДФ=yyyy-MM-dd"));
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();		
		
		мСтрока = "create=" + Json1 + "&update=" + Json2;
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
		
		Результат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); 		
		
		Если Результат.КодСостояния <> 200 Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки(СтрШаблон("Не удалось обновить статус квартиры в мобильном приложении, по причине: %1", Результат.ПолучитьТелоКакСтроку()));
			
		КонецЕсли; 		
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки("Квартира занята");
		
		
	КонецЕсли;
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
КонецПроцедуры

Процедура ЗадачаНаПоказ(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	КартаМаршрута = ПараметрыОбработчика.КартаМаршрутаПоказ;
	ТочкаСтарта = ПараметрыОбработчика.ТочкаСтартаПоказ;
	//Автор = ПараметрыОбработчика.Автор;
	Автор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.IDmanager,36)));
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Партнеры.Ссылка КАК Ссылка,
	|	Mobsted_ИдентификаторыОбъектов.Объект КАК Объект
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Mobsted_ИдентификаторыОбъектов КАК Mobsted_ИдентификаторыОбъектов
	|		ПО (Mobsted_ИдентификаторыОбъектов.Объект = Партнеры.Ссылка)
	|ГДЕ
	|	Mobsted_ИдентификаторыОбъектов.Идентификатор = &MobstedId";
	
	Запрос.УстановитьПараметр("MobstedId", Число(СтруктураЗапроса.objectid));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКлиент = РезультатЗапроса.Выбрать();
	
	Если ВыборкаКлиент.Следующий() Тогда
		
		Клиент = ВыборкаКлиент.Ссылка;
		
		ОбъектНедвижимости = Справочники.УПДК_ОбъектыНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.flat,36)));
		
		Попытка
			
			НачатьТранзакцию();
			
			БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			
			БизнесПроцесс.КартаМаршрута = КартаМаршрута;
			БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
			БизнесПроцесс.Наименование = "Запись на просмотр";
			БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
			БизнесПроцесс.Дата = ТекущаяДатаСеанса();
			БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
			БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
			БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
			БизнесПроцесс.Автор = Автор;	
			БизнесПроцесс.Партнер = Клиент;	
			БизнесПроцесс.Основание = ОбъектНедвижимости;
			
			ДатаПоказа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "show_date");
			ВремяПоказа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "show_time");
			
			Если ДатаПоказа <> Неопределено И ВремяПоказа <> Неопределено Тогда
				БизнесПроцесс.Описание = СтрШаблон("Желательная дата и время показа %1 %2 ", ДатаПоказа, ВремяПоказа);
			КонецЕсли;			
			
			БизнесПроцесс.Описание = БизнесПроцесс.Описание + "Уточнить дату и время показа"; 	
			БизнесПроцесс.Записать();
			БизнесПроцесс.Старт();
			
			БизнесПроцесс.Предмет = БизнесПроцесс.Ссылка;
			БизнесПроцесс.Записать();
						
			ЗафиксироватьТранзакцию();
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки("квартира свободна");
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
			
		КонецПопытки; 
		
	Иначе
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки("Клиент не найден");
		
	КонецЕсли; 
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
	
КонецПроцедуры 

Процедура ОтменитьПоказ(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	КартаМаршрута = ПараметрыОбработчика.КартаМаршрутаОтменитьПоказ;
	ТочкаСтарта = ПараметрыОбработчика.ТочкаСтартаОтменитьПоказ;
	Автор = ПараметрыОбработчика.Автор;
	
	EventId = СтруктураЗапроса.EventId;
	Комментарий = СтруктураЗапроса.Comment;
	Событие = Документы.CRM_Событие.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(EventId,36)));
	Клиент = Событие.Партнер;
	
	Если СтрНайти(EventId, "EventAgent") Тогда
		Инициатор = "Агент";
	Иначе
		Инициатор = "Клиент";
	КонецЕсли; 
	
	Попытка
		
		НачатьТранзакцию();
		
		БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
		
		БизнесПроцесс.КартаМаршрута = КартаМаршрута;
		БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
		БизнесПроцесс.Наименование = "Отменить просмотр";
		БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
		БизнесПроцесс.Дата = ТекущаяДатаСеанса();
		БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
		БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
		БизнесПроцесс.Автор = Автор;	
		БизнесПроцесс.Партнер = Клиент;	
		БизнесПроцесс.Основание = Событие;
		
		БизнесПроцесс.Описание = СтрШаблон("Иницатор отмены:%1
		|Комментарий:%2 
		|Уточнить причину", Инициатор, Комментарий);
		БизнесПроцесс.Записать();
		БизнесПроцесс.Старт();
		
		СтруктураЗапроса.Заметка.Предмет = БизнесПроцесс.Ссылка;
		СтруктураЗапроса.Заметка.Записать(); 
		
		ЗафиксироватьТранзакцию();
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки("квартира свободна");
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
		
	КонецПопытки; 
	
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
	
КонецПроцедуры 

Процедура ЗадачаНаОбратныйЗвонок(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	КартаМаршрута = ПараметрыОбработчика.КартаМаршрутаПерезвонить;
	ТочкаСтарта = ПараметрыОбработчика.ТочкаСтартаПерезвонить;
	Автор = ПараметрыОбработчика.Автор;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Партнеры.Ссылка КАК Ссылка,
	|	Mobsted_ИдентификаторыОбъектов.Объект КАК Объект
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Mobsted_ИдентификаторыОбъектов КАК Mobsted_ИдентификаторыОбъектов
	|		ПО (Mobsted_ИдентификаторыОбъектов.Объект = Партнеры.Ссылка)
	|ГДЕ
	|	Mobsted_ИдентификаторыОбъектов.Идентификатор = &MobstedId";
	
	Запрос.УстановитьПараметр("MobstedId", Число(СтруктураЗапроса.objectid));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКлиент = РезультатЗапроса.Выбрать();
	
	Если ВыборкаКлиент.Следующий() Тогда
		
		Клиент = ВыборкаКлиент.Ссылка;
		
		Попытка
			ОбъектНедвижимости = Справочники.УПДК_ОбъектыНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.flat,36))); 			
		Исключение
			ОбъектНедвижимости = Неопределено;
		КонецПопытки;
		
		Попытка
			
			НачатьТранзакцию();
			
			БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			
			БизнесПроцесс.КартаМаршрута = КартаМаршрута;
			БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
			БизнесПроцесс.Наименование = "Перезвонить";
			БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
			БизнесПроцесс.Дата = ТекущаяДатаСеанса();
			БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
			БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
			БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
			БизнесПроцесс.Автор = Автор;	
			БизнесПроцесс.Партнер = Клиент;
			
			Если ОбъектНедвижимости <> Неопределено Тогда				
				БизнесПроцесс.Основание = ОбъектНедвижимости; 				
			КонецЕсли;
			
			БизнесПроцесс.Описание = "Перезвонить клиенту, заказан обратный звонок из мобильного приложения"; 	
			БизнесПроцесс.Записать();
			БизнесПроцесс.Старт();
			
			СтруктураЗапроса.Заметка.Предмет= БизнесПроцесс.Ссылка;
			СтруктураЗапроса.Заметка.Записать(); 
			
			ЗафиксироватьТранзакцию();
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки("Успешно");
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
			
		КонецПопытки; 
		
	Иначе
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки("Клиент не найден");
		
	КонецЕсли; 	
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
КонецПроцедуры

Процедура ПродлитьБронь(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	Попытка
		
		ДокументЗакрытия = Документы.УПДК_КорректировкаЗаказаКлиента.СоздатьДокумент();
		ДокументЗакрытия.Дата = ТекущаяДатаСеанса();
		ДокументЗакрытия.Заполнить(Документы.УПДК_ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.order,36))));
		ДокументЗакрытия.Ответственный = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.manager,36)));
		ДокументЗакрытия.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗакрытия.Ответственный, "ТекущееПодразделение");
		ДокументЗакрытия.Закрыт = Ложь;
		ДокументЗакрытия.Комментарий = НСтр("ru = 'Заказ-клиента продлен через Mobsted'"); 
		
		СрокБронирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "to_date");
		
		Если СрокБронирования <> Неопределено Тогда
			
			//+Никонов по задаче MOBILE4DEV-8
			Если ТипЗнч(СрокБронирования) = Тип("Строка") Тогда
				БронироватьДо = СтроковыеФункцииКлиентСервер.СтрокаВДату(СрокБронирования);
				//БронироватьДо = XMLЗначение(Тип("Дата"), КорректныйСрокБронирования);
			Иначе
				БронироватьДо = СрокБронирования;
			КонецЕсли;
			//-Никонов
			ДокументЗакрытия.СрокБронирования = БронироватьДо;
			
		КонецЕсли;
		
		ДокументЗакрытия.Записать(РежимЗаписиДокумента.Проведение);
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(XMLСтрока(ДокументЗакрытия.СрокБронирования));
		
	Исключение
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
		
	КонецПопытки;
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
КонецПроцедуры

Процедура ПродлитьБроньКлиент(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	Попытка
		
		ДокументЗакрытия = Документы.УПДК_КорректировкаЗаказаКлиента.СоздатьДокумент();
		ДокументЗакрытия.Дата = ТекущаяДатаСеанса();
		ДокументЗакрытия.Заполнить(Документы.УПДК_ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.order,36))));
		ДокументЗакрытия.Закрыт = Ложь;
		ДокументЗакрытия.Комментарий = НСтр("ru = 'Заказ-клиента продлен через Mobsted'");
		ДокументЗакрытия.Причина = Справочники.CRM_ПричиныОтказов.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.reason_extendorder,36))); 
		
		СрокБронирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "to_date");
		
		Если СрокБронирования <> Неопределено Тогда
			
			БронироватьДо = XMLЗначение(Тип("Дата"), СрокБронирования);
			ДокументЗакрытия.СрокБронирования = БронироватьДо;
			
		КонецЕсли;
		
		ДокументЗакрытия.Записать(РежимЗаписиДокумента.Проведение);
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(XMLСтрока(ДокументЗакрытия.СрокБронирования));
		
	Исключение
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
		
	КонецПопытки;
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
КонецПроцедуры

Процедура ЗадачаНаБронирование(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	ДанныеЗаполнения = Новый Структура;
	
	КартаМаршрута = ПараметрыОбработчика.КартаМаршрутаАгентБРонь;
	ТочкаСтарта = ПараметрыОбработчика.ТочкаСтартаАгентБРонь;
	Автор = ПараметрыОбработчика.Автор;
	
	ОпределитьКлиентаПоВходящимДанным(СтруктураЗапроса, ДанныеЗаполнения);	
	Клиент = ДанныеЗаполнения.Клиент;
	
	ДобавитьФотоПаспорта(Клиент, СтруктураЗапроса);
	
	ОбъектНедвижимости = Справочники.УПДК_ОбъектыНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.flat,36)));
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_НедвижимостьСрезПоследних.Период КАК Период,
	|	УПДК_НедвижимостьСрезПоследних.СтатусНедвижимости КАК СтатусНедвижимости,
	|	ЕСТЬNULL(УПДК_НедвижимостьСрезПоследних.ЗаказКлиента.СрокБронирования, """") КАК СрокБронирования
	|ИЗ
	|	РегистрСведений.УПДК_Недвижимость.СрезПоследних(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_НедвижимостьСрезПоследних";
	
	Запрос.УстановитьПараметр("ОбъектНедвижимости", ОбъектНедвижимости);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() И ВыборкаДетальныеЗаписи.СтатусНедвижимости = Перечисления.УПДК_СтатусыНедвижимости.Свободно Тогда
		
		АгентствоНедвижимости = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.agency,36))); 
		Агент = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.agent,36))); 
		
		Попытка
			
			НачатьТранзакцию();
			
			БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			
			БизнесПроцесс.КартаМаршрута = КартаМаршрута;
			БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
			БизнесПроцесс.Наименование = "Создать бронь по заявке Риелтора";
			БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
			БизнесПроцесс.Дата = ТекущаяДатаСеанса();
			БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
			БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
			БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
			БизнесПроцесс.Автор = Автор;	
			БизнесПроцесс.Партнер = Клиент;	
			БизнесПроцесс.Основание = ОбъектНедвижимости;
			БизнесПроцесс.Предмет = ОбъектНедвижимости;
			
			БизнесПроцесс.Агент = Агент;
			БизнесПроцесс.АгентствоНедвижимости = АгентствоНедвижимости;
			БизнесПроцесс.Описание = "Связаться с агентом и подтвердить бронь"; 
			
			БизнесПроцесс.Записать();
			БизнесПроцесс.Старт();
			
			СтруктураЗапроса.Заметка.Предмет = БизнесПроцесс.Ссылка;
			СтруктураЗапроса.Заметка.Записать(); 
			
			ЗафиксироватьТранзакцию();
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки("Ожидайте подтверждения");
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
			
		КонецПопытки; 
		
		
		
	Иначе
		
		//Обновляем статус квартиры в мобилке.
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()); 
		
		HTTPСоединение = Новый HTTPСоединение(СтруктураЗапроса.Mobsted_HTTPServer,,,,,,ssl);
		
		//https:///
		HTTPЗапрос = Новый HTTPЗапрос("api/v4/objects/createupdate");		
		HTTPЗапрос.Заголовки.Вставить("Authorization", СтруктураЗапроса.AuthorizationK); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", " application/x-www-form-urlencoded");
		
		
		Структура = Новый Структура;
		Структура.Вставить("ApplicationId",СтруктураЗапроса.ИДбазы);
		Структура.Вставить("Id_Квартиры", СтруктураЗапроса.flat); 		
		Структура.Вставить("Тип_Объекта", "Квартира");
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		
		Структура = Новый Структура;
		Структура.Вставить("Статус_Квартиры", Строка(ВыборкаДетальныеЗаписи.СтатусНедвижимости));
		Структура.Вставить("Дата_изменения_статуса_кв", Формат(ВыборкаДетальныеЗаписи.Период,"ДФ=yyyy-MM-dd"));
		Структура.Вставить("Срок_бронирования", Формат(ВыборкаДетальныеЗаписи.СрокБронирования,"ДФ=yyyy-MM-dd"));
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json2 = Запись.Закрыть();		
		
		мСтрока = "create=" + Json1 + "&update=" + Json2;
		
		HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока); 	
		
		Результат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); 		
		
		Если Результат.КодСостояния <> 200 Тогда
			
			Ответ = Новый HTTPСервисОтвет(520);
			Ответ.УстановитьТелоИзСтроки(СтрШаблон("Не удалось обновить статус квартиры в мобильном приложении, по причине: %1", Результат.ПолучитьТелоКакСтроку()));
			
		КонецЕсли; 		
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки("Квартира занята");
		
		
	КонецЕсли; 
	
	СтруктураОтвета.Вставить("Ответ", Ответ);
	
КонецПроцедуры

Процедура УдалитьБронь(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	КартаМаршрута = ПараметрыОбработчика.КартаМаршрутаОтменаБронирования;
	ТочкаСтарта = ПараметрыОбработчика.ТочкаСтартаОтменаБронирования;
	Автор = ПараметрыОбработчика.Автор;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Партнеры.Ссылка КАК Ссылка,
	|	Mobsted_ИдентификаторыОбъектов.Объект КАК Объект
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Mobsted_ИдентификаторыОбъектов КАК Mobsted_ИдентификаторыОбъектов
	|		ПО (Mobsted_ИдентификаторыОбъектов.Объект = Партнеры.Ссылка)
	|ГДЕ
	|	Mobsted_ИдентификаторыОбъектов.Идентификатор = &MobstedId";
	
	Запрос.УстановитьПараметр("MobstedId", Число(СтруктураЗапроса.objectid));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКлиент = РезультатЗапроса.Выбрать();
	
	Если ВыборкаКлиент.Следующий() Тогда
		
		Клиент = ВыборкаКлиент.Ссылка;
		
		ОбъектНедвижимости = Справочники.УПДК_ОбъектыНедвижимости.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(СтруктураЗапроса.flat,36)));
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПДК_НедвижимостьСрезПоследних.ЗаказКлиента КАК Ссылка,
		|	1 КАК Порядок
		|ИЗ
		|	РегистрСведений.УПДК_Недвижимость.СрезПоследних(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_НедвижимостьСрезПоследних
		|ГДЕ
		|	УПДК_НедвижимостьСрезПоследних.Клиент = &Клиент";
		//Предброни пока не используем.
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	УПДК_ОчередьНаНедвижимостьОстатки.ПредварительныйЗаказКлиента,
		//|	2
		//|ИЗ
		//|	РегистрНакопления.УПДК_ОчередьНаНедвижимость.Остатки(, ОбъектНедвижимости = &ОбъектНедвижимости) КАК УПДК_ОчередьНаНедвижимостьОстатки
		//|ГДЕ
		//|	УПДК_ОчередьНаНедвижимостьОстатки.ПредварительныйЗаказКлиента.Клиент = &Клиент
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Порядок";
		
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("ОбъектНедвижимости", ОбъектНедвижимости);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаПредмет = РезультатЗапроса.Выбрать(); 		
		
		Попытка
			
			НачатьТранзакцию();
			
			БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			
			БизнесПроцесс.КартаМаршрута = КартаМаршрута;
			БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
			БизнесПроцесс.Наименование = "Отменить бронь";
			БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
			БизнесПроцесс.Дата = ТекущаяДатаСеанса();
			БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
			БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
			БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
			БизнесПроцесс.Автор = Автор;	
			БизнесПроцесс.Партнер = Клиент;	
			БизнесПроцесс.Основание = ОбъектНедвижимости;
			
			Если ВыборкаПредмет.Следующий() Тогда
				БизнесПроцесс.Предмет = ВыборкаПредмет.Ссылка;
			КонецЕсли; 
			
			БизнесПроцесс.Описание = "Уточнить причину отказа и отменить бронь"; 	
			БизнесПроцесс.Записать();
			БизнесПроцесс.Старт();
			
			//СтруктураЗапроса.Заметка.Предмет= БизнесПроцесс.Ссылка;
			//СтруктураЗапроса.Заметка.Записать(); 
			
			ЗафиксироватьТранзакцию();
			
			Ответ = Новый HTTPСервисОтвет(200);
			ТекстОшибки = "Ожидайте подтверждения";
			Ответ.УстановитьТелоИзСтроки(ТекстОшибки);  
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, ТекстОшибки);
			
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			Ответ = Новый HTTPСервисОтвет(405);
			Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 405, ОписаниеОшибки());
			
		КонецПопытки; 
		
	Иначе
		
		Ответ = Новый HTTPСервисОтвет(405);
		
		ТекстОшибки = "Клиент не найден"; 
		Ответ.УстановитьТелоИзСтроки(ТекстОшибки);  
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(СтруктураЗапроса.ЗаписьЖурнала, ТекущаяДатаСеанса(), 405, ТекстОшибки);
		
		
		
	КонецЕсли; 	
	
	СтруктураОтвета.Вставить("Ответ", Ответ);	
	
КонецПроцедуры

Процедура УдалитьБроньМенеджер(СтруктураЗапроса, ПараметрыОбработчика, СтруктураОтвета)
	
	Попытка
		
		ДокументЗакрытия = Документы.УПДК_КорректировкаЗаказаКлиента.СоздатьДокумент();
		ДокументЗакрытия.Дата = ТекущаяДатаСеанса();
		ДокументЗакрытия.Заполнить(Документы.УПДК_ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗапроса.order)));
		ДокументЗакрытия.Ответственный = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗапроса.manager));
		ДокументЗакрытия.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗакрытия.Ответственный, "ТекущееПодразделение");
		ДокументЗакрытия.Закрыт = Истина;
		ДокументЗакрытия.Причина = Справочники.CRM_ПричиныОтказов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗапроса.reason));
		ДокументЗакрытия.Комментарий = НСтр("ru = 'Заказ-клиента закрыт через Mobsted'");
		ДокументЗакрытия.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки());
		
	КонецПопытки; 
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки()); 
	
	СтруктураОтвета.Вставить("Ответ", Ответ);	
	
КонецПроцедуры

Функция ПолучитьСсылкуПоПараметру(СтруктураЗапроса, ИмяПараметра, Менеджер, ОшибкаПолученияСсылки)
	
	мПараметр = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, ИмяПараметра) <> Неопределено Тогда
		
		ID_Параметра = СтруктураЗапроса[ИмяПараметра];
		
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ID_Параметра) Тогда
			
			мПараметр = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ID_Параметра));
			
			Если ЗначениеЗаполнено(мПараметр) Тогда
				ОшибкаПолученияСсылки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат мПараметр;
	
КонецФункции

Процедура ДобавитьФотоПаспорта(Клиент, СтруктураЗапроса)
	
	Адрес = СтруктураЗапроса.customer_foto;
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		
		ПозицияРасширение = СтрНайти(Адрес, ".", НаправлениеПоиска.СКонца);
		Если ПозицияРасширение > 0 Тогда
			
			Расширение = Сред(Адрес, ПозицияРасширение + 1);
			
		КонецЕсли; 
		
		ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
		НастройкиПолучения = Новый Структура;
		НастройкиПолучения.Вставить("ПутьДляСохранения", ИмяФайла);
		НастройкиПолучения.Вставить("Пользователь", "");
		НастройкиПолучения.Вставить("Пароль", "");
		НастройкиПолучения.Вставить("Порт", );
		НастройкиПолучения.Вставить("Таймаут", 10);
		НастройкиПолучения.Вставить("ЗащищенноеСоединение", Истина);
		НастройкиПолучения.Вставить("ПассивноеСоединение", Истина);
		НастройкиПолучения.Вставить("Заголовки", Новый Соответствие);
		НастройкиПолучения.Вставить("ИспользоватьАутентификациюОС", Ложь);
		
		НастройкаСохранения = Новый Соответствие;
		НастройкаСохранения.Вставить("МестоХранения", "Сервер");
		НастройкаСохранения.Вставить("Путь", ИмяФайла); 
		
		Ответ = ПолучениеФайловИзИнтернетаКлиентСервер.ПодготовитьПолучениеФайла(Адрес, НастройкиПолучения, НастройкаСохранения);
		
		Файл = Новый Файл(ИмяФайла);	
		ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл);
		
		АдресВременногоХранилищаТекста = ""; 	
		ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
		
		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		
		
		ДД = Новый ДвоичныеДанные(ИмяФайла);
		Адрес = ПоместитьВоВременноеХранилище(ДД);
		АдресВременногоХранилищаФайла = Адрес;
		
		ПрисоединенныйФайл = ПрисоединенныеФайлыСлужебныйВызовСервера.ДобавитьФайл(
		Клиент.ОсновноеКонтактноеЛицо,
		Файл.ИмяБезРасширения,
		ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение),
		,
		ВремяИзмененияУниверсальное,
		АдресВременногоХранилищаФайла,
		АдресВременногоХранилищаТекста);			
		
		
		Если ПрисоединенныйФайл <> Неопределено Тогда
			
			ФизлицоОбъект = Клиент.ОсновноеКонтактноеЛицо.ПолучитьОбъект();
			ФизлицоОбъект.СканПаспорта = ПрисоединенныйФайл;
			ФизлицоОбъект.Записать();
			
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайла);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьПаспортИСнилс(Клиент, СтруктураЗапроса)
	Для каждого Элемент Из СтруктураЗапроса Цикл
		Если Элемент.Ключ = "passport"  Тогда
			Адрес = СтруктураЗапроса.passport;
			ИмяДокумента = "Паспорт";
			Если ПроверкаНаличиеДокументов(Клиент, ИмяДокумента) Тогда
				ДобавитьДокументыДляПредброни(ИмяДокумента,Адрес,Клиент,СтруктураЗапроса);
			Иначе
				Продолжить;
			КонецЕсли; 
		ИначеЕсли  Элемент.Ключ = "snils" Тогда
			Адрес = СтруктураЗапроса.snils; 
			ИмяДокумента = "Снилс";
			Если ПроверкаНаличиеДокументов(Клиент, ИмяДокумента) Тогда
				ДобавитьДокументыДляПредброни(ИмяДокумента,Адрес,Клиент,СтруктураЗапроса);
			Иначе
				Продолжить;
			КонецЕсли; 
		Иначе
			Продолжить;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Функция ПроверкаНаличиеДокументов(Клиент, ИмяДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Партнеры.ОсновноеКонтактноеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Клиент";
	Запрос.УстановитьПараметр("Клиент", Клиент);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаФизЛица = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаФизЛица.Следующий() Цикл
		ВладелецФайла = ВыборкаФизЛица.ФизическоеЛицо;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаПрисоединенныеФайлы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ФизическиеЛицаПрисоединенныеФайлы КАК ФизическиеЛицаПрисоединенныеФайлы
	|ГДЕ
	|	ФизическиеЛицаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ФизическиеЛицаПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|	И ФизическиеЛицаПрисоединенныеФайлы.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("Наименование", ИмяДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции 

Процедура ДобавитьДокументыДляПредброни(ИмяДокумента, Адрес, Клиент, СтруктураЗапроса)
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		
		ПозицияРасширение = СтрНайти(Адрес, ".", НаправлениеПоиска.СКонца);
		Если ПозицияРасширение > 0 Тогда
			
			Расширение = Сред(Адрес, ПозицияРасширение + 1);
			
		КонецЕсли; 
		
		ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
		НастройкиПолучения = Новый Структура;
		НастройкиПолучения.Вставить("ПутьДляСохранения", ИмяФайла);
		НастройкиПолучения.Вставить("Пользователь", "");
		НастройкиПолучения.Вставить("Пароль", "");
		НастройкиПолучения.Вставить("Порт", );
		НастройкиПолучения.Вставить("Таймаут", 10);
		НастройкиПолучения.Вставить("ЗащищенноеСоединение", Истина);
		НастройкиПолучения.Вставить("ПассивноеСоединение", Истина);
		НастройкиПолучения.Вставить("Заголовки", Новый Соответствие);
		НастройкиПолучения.Вставить("ИспользоватьАутентификациюОС", Ложь);
		
		НастройкаСохранения = Новый Соответствие;
		НастройкаСохранения.Вставить("МестоХранения", "Сервер");
		НастройкаСохранения.Вставить("Путь", ИмяФайла); 
		
		Ответ = ПолучениеФайловИзИнтернетаКлиентСервер.ПодготовитьПолучениеФайла(Адрес, НастройкиПолучения, НастройкаСохранения);
		
		Файл = Новый Файл(ИмяФайла);	
		ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл);
		
		АдресВременногоХранилищаТекста = ""; 	
		ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
		
		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		
		ДД = Новый ДвоичныеДанные(ИмяФайла);
		АдресХранилища = ПоместитьВоВременноеХранилище(ДД);
		АдресВременногоХранилищаФайла = АдресХранилища;
		ПрисоединенныйФайл = ПрисоединенныеФайлыСлужебныйВызовСервера.ДобавитьФайл(
		Клиент.ОсновноеКонтактноеЛицо,
		ИмяДокумента,
		ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение),
		,
		ВремяИзмененияУниверсальное,
		АдресВременногоХранилищаФайла,
		АдресВременногоХранилищаТекста);			
		
		УдалитьФайлы(ИмяФайла);
		
	КонецЕсли;
КонецПроцедуры 



#КонецОбласти
