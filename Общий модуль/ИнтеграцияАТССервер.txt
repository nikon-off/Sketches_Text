////////////////////////////////////////////////////////////////////////////////
// Интеграция с виртуальными АТС (на данные момент реализована интеграция с Мегафон)
// Подробнее об API с Мегафон: 
// https://firma.megapbx.ru/SkinFiles/firma.megapbx.ru/Megafon3/crm_rest_api.pdf
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ИспользуетсяСистемаВзаимодействияАТСПроверкаПриЗапуске() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Константы.ИспользоватьИнтеграциюМегафон.Получить() ИЛИ Константы.RT_ИспользоватьОблачнуюАТС.Получить() ИЛИ Константы.Билайн_ИспользоватьОблачнуюАТС.Получить();
	
	Если Не Результат Тогда
		Возврат Ложь;
	КонецЕсли;  	
	
	Если Не ЗначениеЗаполнено(РегистрыСведений.ДанныеДоступаАТС.ПолучитьЛюбойЛогин()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);	
	
	#Если НЕ ВнешнееСоединение Тогда
		Результат = Результат И СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();	
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

Функция ИспользуетсяСистемаВзаимодействияАТС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Константы.ИспользоватьИнтеграциюМегафон.Получить() ИЛИ Константы.RT_ИспользоватьОблачнуюАТС.Получить() ИЛИ Константы.Билайн_ИспользоватьОблачнуюАТС.Получить(); 
	
	Если Не Результат Тогда
		Возврат Ложь;
	КонецЕсли;  	
	
	УстановитьПривилегированныйРежим(Ложь);	
	
	#Если НЕ ВнешнееСоединение Тогда
		Результат = Результат И СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();	
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторОбсужденияЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
	Если Не ИспользуетсяСистемаВзаимодействияАТС() Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	#Если НЕ ВнешнееСоединение Тогда
		Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
		
		Обсуждение = Неопределено;
		
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);  
		
		Если Обсуждение = Неопределено Тогда
			ОбсуждениеЖурналИдентификатор = СоздатьОбсуждениеЖурналЗвонков();
		Иначе
			ОбсуждениеЖурналИдентификатор = Обсуждение.Идентификатор;
		КонецЕсли;	
		
	#КонецЕсли
	
	Возврат ОбсуждениеЖурналИдентификатор;
	
КонецФункции

Функция КлючОбсужденияЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
	Если Не ИспользуетсяСистемаВзаимодействияАТС() Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	Обсуждение = Неопределено;
	Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
	#Если НЕ ВнешнееСоединение Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Поиск обсуждения Системы взаимодействия по ключу'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
	#КонецЕсли
	
	Если Обсуждение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

// Процедура отправляет оповещение пользователю через систему взаимодействия (с сервера на клиент)
//
// Параметры:
//  ТипОповещения		 - Строка - Завершен / Пропущен / ИсходящийНачало / ВходящийНачало
//  Пользователь		 - СправочникСсылка.Пользователи - Адресат сообщения
//  Телефон				 - Строка - Телефон контакта, с которым был телефонный разговор
//  Контакт				 - Строка - Строковое представление контакта
//  Дата				 - Дата - Дата звонка
//  НавигационнаяСсылка	 - Строка - Навигационная ссылка на событие (которое будет открыто при нажатии на оповещение) 
//
Процедура ОтправитьДанныеПользователюНаКлиент(ТипОповещения, Пользователь, Телефон, Контакт = "", Дата = Неопределено, Событие = Неопределено, Сделка = Неопределено, ГУИД_РазговорАТС = "", НаименованиеДействия = "", ОткрыватьУведомлениеОЗвонке = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		// определяем звонившего
		МассивНайденных = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(Телефон);
		Если МассивНайденных.Количество() <> 0 Тогда			
			КонтактПредставление = сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(МассивНайденных[0]);
		Иначе
			КонтактПредставление = НСтр("ru='!!!Не определен!!!'");
		КонецЕсли;
	Иначе	
		КонтактПредставление = Контакт;
	КонецЕсли;	
	
	ШаблонПредставления = "%1
	|Тел.: %2";
	Представление = СтрШаблон(ШаблонПредставления,
	КонтактПредставление,
	Телефон);
	
	Если ЗначениеЗаполнено(Дата) Тогда
		ПредставлениеДаты = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()),
		Формат(Дата, "ДФ=HH:mm"),
		Формат(Дата, "ДЛФ=DDT")
		);
		Представление = Представление + Символы.ПС + ПредставлениеДаты;
	КонецЕсли;
	
	// Если включена система взаимодействия - оповещаем через неё. Иначе - через обычные оповещения 
	// (которые вызываются обработчиком ожидания на клиенте)
	
	Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		
		#Если НЕ ВнешнееСоединение Тогда
			
			ЖурналЗвонков = ИдентификаторОбсужденияЖурналЗвонков();
			Если ЖурналЗвонков = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Событие) Тогда			
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Событие);
				ГУИД_События = XMLСтрока(Событие);
			Иначе
				НавигационнаяСсылка = "";
				ГУИД_События = "";
			КонецЕсли;   
			
			Если ЗначениеЗаполнено(Сделка) Тогда			
				ГУИД_Сделки = XMLСтрока(Сделка);
			Иначе
				ГУИД_Сделки = "";
			КонецЕсли;
			
			СообщениеЖурналЗвонков = СистемаВзаимодействия.СоздатьСообщение(ЖурналЗвонков);
			
			Попытка
				
				АктивныеСоединения = ПолучитьСеансыИнформационнойБазы();
				АктивныеПользователи = Новый Массив;
				Для Каждого ТекСоединение из АктивныеСоединения Цикл
					
					Если ТекСоединение.Пользователь <> Неопределено Тогда			
						АктивныеПользователи.Добавить(ТекСоединение.Пользователь.УникальныйИдентификатор);
					КонецЕсли;
					
				КонецЦикла;
				АктивныеПользователи = ОбщегоНазначенияКлиентСервер.СвернутьМассив(АктивныеПользователи);
				
				ПользовательИдентификаторПользователяИБ = Пользователь.ИдентификаторПользователяИБ;
				
				Для каждого ТекИдентификатор Из АктивныеПользователи Цикл
					
					Если ТекИдентификатор = ПользовательИдентификаторПользователяИБ Тогда						
						
						Получатель = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ТекИдентификатор); 
						СообщениеЖурналЗвонков.Получатели.Добавить(Получатель);
						
						СообщениеЖурналЗвонков.Данные = СтрШаблон(
						"ТипОповещения=""%1"";НавигационнаяСсылка=""%2"";Представление=""%3"";ГУИД_РазговорАТС=""%4"";ГУИД_События=""%5"";ГУИД_Сделки=""%6"";Получатель=""%7"";Действие=""%8"";Уведомление=""%9""",
						ТипОповещения,
						НавигационнаяСсылка,
						Представление,
						ГУИД_РазговорАТС,
						ГУИД_События, 
						ГУИД_Сделки,
						Строка(Получатель),
						НаименованиеДействия,
						ОткрыватьУведомлениеОЗвонке);
						
						СообщениеЖурналЗвонков.Записать(); 
						
						Прервать;
						
					КонецЕсли;					
					
				КонецЦикла;
				
			Исключение
			КонецПопытки;
			
		#КонецЕсли	
		
	Иначе
		Если ТипОповещения = "Завершен" Тогда
			Заголовок = "Завершён звонок (Виртуальная АТС)";
		ИначеЕсли ТипОповещения = "Пропущен" Тогда
			Заголовок = "Пропущен звонок (Виртуальная АТС)";			
		Иначе 
			Возврат;		
		КонецЕсли;
		
		Представление = СтрШаблон(ШаблонПредставления,
		Заголовок,
		Телефон
		);
		Если ЗначениеЗаполнено(Дата) Тогда
			Представление = Представление + Символы.ПС + ПредставлениеДаты;
		КонецЕсли;
		
		CRM_НапоминанияСервер.ДобавитьНапоминание(Событие, Представление);
		
	КонецЕсли;  	
	
КонецПроцедуры

// Функция возвращает адрес и токен облачной АТС Мегафон
// 
// Возвращаемое значение:
//  Структура - Содержит свойства:
//	  ТокенАТС  	- Строка - ключ доступа к облачной АТС
//	  ТокенБазы 	- Строка - ключ доступа, с которым АТС будет обращаться к CRM 4Dev
// 	  АдресАТС		- Строка - адрес облачной АТС, по которому CRM будет отправлять запросы
//
Функция ПолучитьДанныеДоступаМегафон() Экспорт
	
	ДанныеДоступа = Константы.ДанныеДоступаКМегафон.Получить().Получить();
	
	Если ДанныеДоступа = Неопределено Тогда
		ДанныеДоступа = Новый Структура("Адрес, ТокенАТС, ТокенБазы", "", "", Новый УникальныйИдентификатор());
	КонецЕсли;
	Возврат ДанныеДоступа;
КонецФункции // ПолучитьДанныеДоступаМегафон

Процедура ЗаписатьДанныеДоступа(Адрес, ТокенАТС, ТокенБазы) Экспорт
	
	ДанныеДоступа = Новый Структура("Адрес, ТокенАТС, ТокенБазы", Адрес, ТокенАТС, ТокенБазы);
	Константы.ДанныеДоступаКМегафон.Установить(Новый ХранилищеЗначения(ДанныеДоступа));  
	
КонецПроцедуры //ЗаписатьДанныеДоступа

// Функция возвращает адрес и токен облачной АТС УралМикро
// 
// Возвращаемое значение:
//  Структура - Содержит свойства:
//	  ТокенАТС  	- Строка - ключ доступа к облачной АТС
//	  ТокенБазы 	- Строка - ключ доступа, с которым АТС будет обращаться к CRM 4Dev
// 	  АдресАТС		- Строка - адрес облачной АТС, по которому CRM будет отправлять запросы
//
Функция ПолучитьДанныеДоступаУралМикро() Экспорт
	
	ДанныеДоступа = Константы.ДанныеДоступаКУралМикро.Получить().Получить();
	
	Если ДанныеДоступа = Неопределено Тогда
		ДанныеДоступа = Новый Структура("Адрес, ТокенАТС, ТокенБазы, ЗаписиЗвонковНаFTP, FTP", "", "", Новый УникальныйИдентификатор(), Ложь, Неопределено);
	КонецЕсли;   
	
	Если Не ДанныеДоступа.Свойство("ЗаписиЗвонковНаFTP") Тогда
		ДанныеДоступа.Вставить("ЗаписиЗвонковНаFTP", Ложь);
		ДанныеДоступа.Вставить("FTP", Неопределено);	
	КонецЕсли;
	
	Возврат ДанныеДоступа;   
	
КонецФункции // ПолучитьДанныеДоступаМегафон

Процедура ЗаписатьДанныеДоступаУралМикро(Адрес, ТокенАТС, ТокенБазы, ЗаписиЗвонковНаFTP, FTP) Экспорт   
	
	ДанныеДоступа = Новый Структура("Адрес, ТокенАТС, ТокенБазы, ЗаписиЗвонковНаFTP, FTP", Адрес, ТокенАТС, ТокенБазы, ЗаписиЗвонковНаFTP, FTP);
	Константы.ДанныеДоступаКУралМикро.Установить(Новый ХранилищеЗначения(ДанныеДоступа));   
	
КонецПроцедуры //ЗаписатьДанныеДоступа

// Функция проверяет, совпадает ли переданный токен с токеном базы, который указан в данных доступа Мегафон, УралМикро.
// Используется при получении HTTP запросов с АТС.
//
// Параметры:
//  ТокенБазы	 - Строка - Строковый GUID
// 	ТипАТС       - Строка.
// 
// Возвращаемое значение:
//  Булево - Истина, если токен совпадает с токеном записанном в базе.
//
Функция АТСТокенБазыДействителен(ТокенБазы, ТипАТС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);   
	
	Если ТипАТС = Перечисления.ВидыАТС.Мегафон Тогда
		
		ДанныеДоступа = Константы.ДанныеДоступаКМегафон.Получить().Получить();  
		
	ИначеЕсли ТипАТС = Перечисления.ВидыАТС.УралМикро Тогда   
		
		ДанныеДоступа = Константы.ДанныеДоступаКУралМикро.Получить().Получить();  
		
	КонецЕсли;
	
	
	Если ДанныеДоступа <> Неопределено Тогда
		
		Результат = ДанныеДоступа.ТокенБазы = ТокенБазы;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьТокенCRM(ТокенБазы)

// Функция - возвращает массив структур с описанием абонентов АТС
//
// Параметры:
//  АдресАТС - Строка - адрес облачной АТС Мегафон (можно получить в личном кабинете) 
//  Токен	 - Строка - токен облачной АТС Мегафон (можно получить в личном кабинете
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//	  Абоненты - Массив - массив структур с описанием абонентов:
//		email 		- Строка - email абонента АТС
//		ext 		- Строка - внутренний номер абонента АТС
//		name 		- Строка - логин абонента АТС
//		realName 	- Строка - ФИО абонента АТС
//		telnum 		- Строка - телефон абонента АТС
//    Ошибка - Строка - описание ошибки (если есть)
Функция ПолучитьСписокАбонентовАТС(Адрес, ТокенАТС) Экспорт
	
	ПолныйАдрес = Адрес 
	+ "?token=" + ТокенАТС 
	+ "&cmd=accounts";
	
	РезультатЗапроса = ВыполнитьЗапрос(ПолныйАдрес, "POST");
	
	Результат = Новый Структура("Абоненты, Ошибка");
	Результат.Ошибка = РезультатЗапроса.Ошибка;
	
	Если Не ЗначениеЗаполнено(Результат.Ошибка) Тогда
		Результат.Абоненты = ПолучитьЗначениеИзОтветаJSON(РезультатЗапроса.ФайлРезультата);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСписокАбонентовАТС(Адрес, Токен)

// Функция - возвращает массив структур с описанием абонентов АТС
//
// Параметры:
//  АдресАТС - Строка - адрес облачной АТС Мегафон (можно получить в личном кабинете) 
//  Токен	 - Строка - токен облачной АТС Мегафон (можно получить в личном кабинете
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//	  Абоненты - Массив - массив структур с описанием абонентов:
//		email 		- Строка - email абонента АТС
//		ext 		- Строка - внутренний номер абонента АТС
//		name 		- Строка - логин абонента АТС
//		realName 	- Строка - ФИО абонента АТС
//		telnum 		- Строка - телефон абонента АТС
//    Ошибка - Строка - описание ошибки (если есть)
Функция ПолучитьСписокАбонентовАТСУралМикро(Адрес, ТокенАТС) Экспорт
	
	Путь = СтрШаблон(Адрес); 	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Путь);
	Сервер = СтруктураURI.Хост;
	ПутьНаСервере = СтруктураURI.ПутьНаСервере;	
	
	Если СтрНайти(Адрес, "https") Тогда
		HTTPСоединение =  Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	ИначеЕсли ЗначениеЗаполнено(СтруктураURI.Порт) Тогда	
		HTTPСоединение =  Новый HTTPСоединение(Сервер, СтруктураURI.Порт); 
	Иначе
		HTTPСоединение =  Новый HTTPСоединение(Сервер);
	КонецЕсли;
	
	Заголовки = Новый Соответствие; 
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=utf-8"); // Формат, в котором передаем данные запросом
	
	HTTPЗапрос = Новый HTTPЗапрос(ПутьНаСервере, Заголовки);  
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрШаблон("cmd=accounts&token=%1", ТокенАТС));
	
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	
	Результат = Новый Структура("Абоненты, Ошибка");
	Если Ответ.КодСостояния = 200 Тогда 
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку()); 		
		Результат.Абоненты = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();
	Иначе    
		Результат.Ошибка = ОписаниеОшибкиПоКодуСостояния(Ответ.КодСостояния);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура вызывается в момент, когда АТС отправляет в CRM POST-запрос, уведомляющий о начале разговора (cmd=event,type=ACCEPTED).
// Эта процедура формирует событие и открывает его форму ответственному за звонок сотруднику
//
// Параметры:
//  ПараметрыТела - Структура - Содержит свойства:
//    callid 	- Строка - идентификатор звонка
//    type 		- Строка - тип события (incoming/outgoing/accepted/completed/cancelled)
//    user 		- Строка - идентификатор пользователя облачной	АТС	(необходим для	сопоставления на стороне CRM) 
//    phone 	- Строка - номер телефона клиента
//	  ext		- Строка - внутренний номер пользователя облачной АТС, если есть (необязательный параметр)
//    diversion - Строка - номер телефона, через который прошел звонок (необязательный параметр)
//	  telnum	- Строка - прямой телефонный номер пользователя облачной АТС (необязательный параметр)
//  Автор		  - СправочникСсылка.Пользователи - Пользователь, который будет назначен ответственным за сформированный тел.звонок и событие 
//
Процедура ОбработатьСобытиеЗвонка(ВидАТС, ПараметрыТела, ЗаписьЖурнала) Экспорт
	
	Автор = Справочники.Пользователи.Система;
	
	СтруктураЗвонка = ПолучитьСтруктуруДляЗаполненияЗвонка();
	
	// callid - идентификатор звонка
	СтруктураЗвонка.ИдентификаторЗвонка = ПараметрыТела.callid;
	
	// type  - тип события 
	СтруктураЗвонка.ВходящийЗвонок = Ложь;
	Если НРег(ПараметрыТела.type) = "incoming" Тогда
		ТипОповещения = "ВходящийНачало";
		СтруктураЗвонка.ВходящийЗвонок = Истина;
	ИначеЕсли НРег(ПараметрыТела.type) = "outgoing" Тогда
		ТипОповещения = "ИсходящийНачало";
		СтруктураЗвонка.ВходящийЗвонок = Ложь;
	ИначеЕсли НРег(ПараметрыТела.type) = "accepted" Тогда
		ТипОповещения = "НачалоРазговора";
		
		//direction - тип звонка in/out (входящий/исходящий)
		Если НРег(ПараметрыТела.direction) = "in" Тогда
			СтруктураЗвонка.ВходящийЗвонок = Истина;	
		КонецЕсли;
	ИначеЕсли НРег(ПараметрыТела.type) = "completed" Или НРег(ПараметрыТела.type) = "cancelled" Тогда
		ТипОповещения = "Завершен";   
		Если НРег(ПараметрыТела.direction) = "in" Тогда
			СтруктураЗвонка.ВходящийЗвонок = Истина;	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	// phone - номер клиента
	СтруктураЗвонка.ТелефонКонтакта = ПараметрыТела.phone;
	
	// user - логин сотрудника
	СтруктураЗвонка.Логин = ПараметрыТела.user; 
	
	// diversion - телефон сотрудника
	Если ПараметрыТела.Свойство("diversion") Тогда
		СтруктураЗвонка.ВнешнийНомер = ПараметрыТела.diversion;	
	ИначеЕсли ПараметрыТела.Свойство("telnum") Тогда
		СтруктураЗвонка.ВнешнийНомер = ПараметрыТела.telnum;
	КонецЕсли;
	
	Если ПараметрыТела.Свойство("ext") Тогда
		СтруктураЗвонка.ТелефонСотрудника = ПараметрыТела.ext;
	КонецЕсли;	
	
	Если ТипОповещения = "НачалоРазговора" Тогда
		СтруктураЗвонка.СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный;
	Иначе
		СтруктураЗвонка.СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный;
	КонецЕсли;
	
	СтруктураЗвонка.Дата = ТекущаяДатаСеанса();	
	СтруктураЗвонка.Автор = Автор; 
	СтруктураЗвонка.Ответственный = РегистрыСведений.ДанныеДоступаАТС.ПолучитьПользователяПоЛогину(ВидАТС, СтруктураЗвонка.Логин + "%");
	
	// Формируем звонок 
	ТелЗвонок = СоздатьИзменитьТелефонныйЗвонок(ВидАТС, СтруктураЗвонка, ЗаписьЖурнала); 
	РеквизитыЗвонка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТелЗвонок, "Ответственный,АбонентПредставление"); 
	
	// Формируем событие  
	Если ЗначениеЗаполнено(ТелЗвонок) Тогда
		СтруктураЗвонка.НовыйЗвонок = ТелЗвонок;   
		
		Первичный = Истина;
		Если ТипОповещения = "ВходящийНачало" Тогда //Создаем сделку сразу
			Сделка = СоздатьПолучитьСделку(ТелЗвонок);   
		ИначеЕсли ТипОповещения = "НачалоРазговора" Тогда //Создаем событие только в том случае, если разговор начался 
			Событие = СоздатьПолучитьСобытие(СтруктураЗвонка);		
			
			Если ЗначениеЗаполнено(Событие) Тогда	
				Дата = Событие.Дата;  
				Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(Событие);
			Иначе
				Дата = Неопределено;  
				Сделка = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сделка) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "Основание") <> Событие Тогда
				Первичный = Ложь;
			КонецЕсли; 
		Иначе
			Событие = Неопределено;
			Дата = Неопределено;  
			Сделка = Неопределено; 
		КонецЕсли; 
		
		Если СтруктураЗвонка.ВходящийЗвонок Тогда  
			Если ИспользоватьНовыйВариант() Тогда
				Если Первичный Тогда
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриПервичномВходящемЗвонке", РеквизитыЗвонка.Ответственный);
				Иначе	
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВторичномВходящемЗвонке", РеквизитыЗвонка.Ответственный);
				КонецЕсли;
			Иначе	
				НаименованиеДействия		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВходящемЗвонке", РеквизитыЗвонка.Ответственный);
			КонецЕсли;				
		Иначе	
			НаименованиеДействия			= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриИсходящемЗвонке", РеквизитыЗвонка.Ответственный);	
		КонецЕсли;
		ОткрыватьУведомлениеОЗвонке		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпОткрыватьУведомлениеОЗвонке", РеквизитыЗвонка.Ответственный);
		
		Если НЕ (НаименованиеДействия = "Открыть событие" Или НаименованиеДействия = "Открыть сделку" или ОткрыватьУведомлениеОЗвонке) Тогда
			Возврат;
		КонецЕсли;  
		
		Контакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЗвонка.НовыйЗвонок, "АбонентКонтакт");
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда				
			Партнер = Контакт;				
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда				
			Партнер = Справочники.ФизическиеЛица.ПолучитьПартнера(Контакт, Истина);				
		КонецЕсли;
		
		Если ВидАТС = Перечисления.ВидыАТС.Мегафон Тогда
			Период = УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ПериодОткрытияЗвонков_Мегафон") * 60 * 60;
		ИначеЕсли ВидАТС = Перечисления.ВидыАТС.УралМикро Тогда	
			Период = УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ПериодОткрытияЗвонков_УралМикро") * 60 * 60; 
		Иначе
			Период = 0;
		КонецЕсли;
		
		Если Период > 0 И ТипОповещения <> "ВходящийНачало" Тогда	
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	CRM_Событие.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.CRM_Событие КАК CRM_Событие
			|ГДЕ
			|	CRM_Событие.Партнер = &Партнер
			|	И CRM_Событие.Дата > &Дата
			|	И CRM_Событие.ВидСобытия = &ВидСобытия";
			
			Запрос.УстановитьПараметр("ВидСобытия", Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок);
			Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса() - Период);
			Запрос.УстановитьПараметр("Партнер", Партнер);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда				
				НаименованиеДействия = "Не " + НаименованиеДействия;				
			КонецЕсли;			
		КонецЕсли;
		
		Если ТипОповещения <> "ВходящийНачало" И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "ЭтоСотрудник") Тогда
			НаименованиеДействия = "Не " + НаименованиеДействия;
		КонецЕсли;	
		
		ОтправитьДанныеПользователюНаКлиент(
		ТипОповещения,
		РеквизитыЗвонка.Ответственный,
		СтруктураЗвонка.ТелефонКонтакта,
		РеквизитыЗвонка.АбонентПредставление,
		Дата,
		Событие,
		Сделка,
		СтруктураЗвонка.ИдентификаторЗвонка,
		НаименованиеДействия,
		ОткрыватьУведомлениеОЗвонке); 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Обработать завершение звонка
//
// Параметры:
//  ПараметрыТела - Структура - Содержит свойства:
//    type 		- Строка - тип	звонка in/out	(входящий/исходящий)
//    user 		- Строка - идентификатор пользователя облачной	АТС	(необходим для	сопоставления на стороне CRM) 
//	  ext		- Строка - внутренний номер пользователя облачной АТС, если есть (необязательный параметр)
//    phone 	- Строка - номер телефона клиента
//    diversion - Строка - номер телефона, через который прошел звонок (необязательный параметр)
//    start 	- Строка - время начала звонка в формате YYYYmmddTHHMMSSZ
//    duration 	- Число - длительность звонка (необязательный параметр)
//    callid 	- Строка - идентификатор звонка
//    link 		- Строка - ссылка на запись звонка, если запись включена в АТС (необязательный параметр)
//    status 	- Строка - Статус входящего звонка: missed - пропущенный, Success - успешный. Всё остальное можно не обрабатывать
//
Процедура ОбработатьЗавершениеЗвонка(ВидАТС, ПараметрыТела, ЗаписьЖурнала) Экспорт
	
	Автор = Справочники.Пользователи.Система;	
	
	СтруктураЗвонка = ПолучитьСтруктуруДляЗаполненияЗвонка();
	
	// callid - идентификатор звонка
	СтруктураЗвонка.ИдентификаторЗвонка = ПараметрыТела.callid;
	
	// type - тип	звонка in/out	(входящий/исходящий)
	Если ПараметрыТела.type = "in" Тогда
		СтруктураЗвонка.ВходящийЗвонок = Истина;  
	ИначеЕсли ПараметрыТела.type = "out" Тогда
		СтруктураЗвонка.ВходящийЗвонок = Ложь;
	КонецЕсли;
	
	//    status 	- Строка - Статус входящего звонка: missed - пропущенный, Success - успешный. Всё остальное можно не обрабатывать
	Если НРег(ПараметрыТела.status) = "success" Тогда
		СтруктураЗвонка.СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный;
		ТипОповещения = "ИсторияЗвонка";
	ИначеЕсли НРег(ПараметрыТела.status) = "missed" Тогда	
		СтруктураЗвонка.СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный;	
		ТипОповещения = "Пропущен";
		ОбработатьПропущенныйЗвонок(СтруктураЗвонка);
	Иначе
		Возврат;
	КонецЕсли;
	
	// phone - номер клиента
	СтруктураЗвонка.ТелефонКонтакта = ПараметрыТела.phone;
	
	// user - логин сотрудника
	СтруктураЗвонка.Логин = ПараметрыТела.user;
	
	// diversion - телефон сотрудника
	Если ПараметрыТела.Свойство("diversion") Тогда
		СтруктураЗвонка.ТелефонСотрудника = ПараметрыТела.diversion;	
	КонецЕсли;	
	
	// start - время начала звонка	в UTC 
	СтруктураЗвонка.Дата = ПолучитьДатуИзUTC(ПараметрыТела.start);
	
	// duration - длительность звонка (секунды)
	СтруктураЗвонка.Длительность = ПараметрыТела.duration;
	
	// link - ссылка на запись или имя файла  в случае Уралмикро
	СтруктураЗвонка.СсылкаНаЗапись = ПараметрыТела.link;
	
	СтруктураЗвонка.Автор = Автор; 
	СтруктураЗвонка.Ответственный = РегистрыСведений.ДанныеДоступаАТС.ПолучитьПользователяПоЛогину(ВидАТС, СтруктураЗвонка.Логин + "%");
	
	// Формируем звонок / дополняем существующий
	ТелЗвонок = СоздатьИзменитьТелефонныйЗвонок(ВидАТС, СтруктураЗвонка, ЗаписьЖурнала); 
	РеквизитыЗвонка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТелЗвонок, "Ответственный,АбонентПредставление");
	
	// Формируем событие
	Если ЗначениеЗаполнено(ТелЗвонок) Тогда
		СтруктураЗвонка.НовыйЗвонок = ТелЗвонок;
		
		// Создаем событие только в том случае, если разговор начался  
		Первичный = Истина;
		Сделка = СоздатьПолучитьСделку(ТелЗвонок);       
		Событие = СоздатьПолучитьСобытие(СтруктураЗвонка);
		Если ТипОповещения = "Завершен" Тогда   
			Если ЗначениеЗаполнено(Сделка) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "Основание") <> Событие Тогда
				Первичный = Ложь;
			КонецЕсли;
			Дата = Событие.Дата;
		Иначе     
			СделкаПропущеногоЗвонка = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("СделкаПропущеногоЗвонка", РеквизитыЗвонка.Ответственный);
			Если СделкаПропущеногоЗвонка = "Новая" Тогда  
				Документы.Сделка.ДобавитьНовуюСделку(Событие);
				СделкаНовая = Документы.Сделка.ПолучитьСделкуПоДокументу(Событие);
				Канбан.УбратьДокументИзСделки(Сделка, Событие); 
			КонецЕсли;
			Событие = Неопределено;
			Дата = Неопределено;  
			Сделка = Неопределено;
		КонецЕсли; 
		
		Если СтруктураЗвонка.ВходящийЗвонок Тогда  
			Если ИспользоватьНовыйВариант() Тогда
				Если Первичный Тогда
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриПервичномВходящемЗвонке", РеквизитыЗвонка.Ответственный);
				Иначе	
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВторичномВходящемЗвонке", РеквизитыЗвонка.Ответственный);
				КонецЕсли;
			Иначе	
				НаименованиеДействия		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВходящемЗвонке", РеквизитыЗвонка.Ответственный);
			КонецЕсли;				
		Иначе	
			НаименованиеДействия			= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриИсходящемЗвонке", РеквизитыЗвонка.Ответственный);	
		КонецЕсли;
		
		Если НЕ (НаименованиеДействия = "Открыть событие" Или НаименованиеДействия = "Открыть сделку" или НаименованиеДействия = "Открыть уведомление о звонке") Тогда
			Возврат;
		КонецЕсли;
		
		ОтправитьДанныеПользователюНаКлиент(
		ТипОповещения,
		РеквизитыЗвонка.Ответственный,
		СтруктураЗвонка.ТелефонКонтакта,
		РеквизитыЗвонка.АбонентПредставление,
		Дата,
		Событие,  
		Сделка,
		СтруктураЗвонка.ИдентификаторЗвонка,
		НаименованиеДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПропущенныйЗвонок(СтруктураЗвонка)  
	
	НайденныйЗвонок = Документы.ТелефонныйЗвонок.НайтиПоРеквизиту("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	Если ЗначениеЗаполнено(НайденныйЗвонок) Тогда	 
		ТелЗвонок = НайденныйЗвонок.ПолучитьОбъект();
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Константы.ИспользоватьБППропущенныеЗвонки.Получить()
		И ТелЗвонок.сфпСостояниеЗвонка = перечисления.сфпСостоянияЗвонков.Пропущенный 
		И ТелЗвонок.Входящий Тогда
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		Автор = Справочники.Пользователи.Система;
		Клиент = Справочники.ФизическиеЛица.ПолучитьПартнера(ТелЗвонок.АбонентКонтакт);
		
		КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПропущенныеЗвонки;
		СрокПовтроного = Константы.СрокПовторногоПропущенногоЗвонка.Получить();
		
		ТекЗВонок = ТелЗвонок.Ссылка;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|ГДЕ
		|	CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута
		|	И CRM_БизнесПроцесс.Партнер = &Партнер
		|	И CRM_БизнесПроцесс.ДатаСтарта > &ПериодПовтора 
		|	И НЕ CRM_БизнесПроцесс.Завершен";
		
		Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
		Запрос.УстановитьПараметр("Партнер", Клиент);
		Запрос.УстановитьПараметр("ПериодПовтора", ТекущаяДатаСеанса - СрокПовтроного*60);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			
			БизнесПроцесс.КартаМаршрута = КартаМаршрута;
			БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса;
			БизнесПроцесс.Наименование = "Пропущенный звонок";
			БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
			БизнесПроцесс.Дата = ТекущаяДатаСеанса;
			БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
			БизнесПроцесс.НомерВерсииКартыМаршрута = БизнесПроцесс.КартаМаршрута.НомерВерсии; 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
			|ГДЕ
			|	CRM_ТочкиМаршрутов.Владелец = &Владелец
			|	И CRM_ТочкиМаршрутов.Вид = &Вид
			|	И НЕ CRM_ТочкиМаршрутов.НеИспользуется
			|	И НЕ CRM_ТочкиМаршрутов.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Вид", Перечисления.CRM_ВидыТочекМаршрута.Старт);
			Запрос.УстановитьПараметр("Владелец", БизнесПроцесс.КартаМаршрута);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				БизнесПроцесс.ТочкаСтарта = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
			БизнесПроцесс.Автор = Автор;						
			БизнесПроцесс.Партнер = Клиент; 			
			БизнесПроцесс.Основание = ТелЗвонок.Ссылка;
			БизнесПроцесс.Предмет = ТелЗвонок.Ссылка;
			БизнесПроцесс.Описание = "Перезвонить на пропущенный звонок"; 			
			БизнесПроцесс.Записать();
			БизнесПроцесс.Старт(); 	
			
			Попытка
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|              ЗадачаИсполнителя.Ссылка
				|ИЗ
				|              Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|              ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
				
				ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();  
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					
					//Создаем Событие
					СвязанноеСобытие = Документы.CRM_Событие.СоздатьДокумент();
					
					ДанныеЗаполнения = Новый Структура;
					
					ПроектСобытия = КартаМаршрута.ВидСвязанногоСобытия;			
					
					ДанныеЗаполнения.Вставить("Партнер", 			БизнесПроцесс.Партнер);
					ДанныеЗаполнения.Вставить("КонтактноеЛицо", 	БизнесПроцесс.КонтактноеЛицо);
					ДанныеЗаполнения.Вставить("Проект", 			ПроектСобытия);
					ДанныеЗаполнения.Вставить("Автор", 				Автор);
					ДанныеЗаполнения.Вставить("Ответственный", 		Автор);
					ДанныеЗаполнения.Вставить("Место", 				БизнесПроцесс.Телефон);
					
					СвязанноеСобытие.Заполнить(ДанныеЗаполнения);
					
					СвязанноеСобытие.СвязаннаяЗадача = ЗадачаОбъект.Ссылка; 		
					СвязанноеСобытие.Описание = ЗадачаОбъект.Описание; 		
					СвязанноеСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано;
					СвязанноеСобытие.Записать();
					
					СтруктураИнтереса = УПДК_Маркетинг.ПолучитьСтруктуруИнтересаПоДокументу(ТекЗВонок);
					
					Если ЗначениеЗаполнено(СтруктураИнтереса.ИнструментИнтереса) Тогда
						
						НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Сделка.Установить(СвязанноеСобытие.Ссылка);
						
						Запись = НаборЗаписей.Добавить();
						Запись.Период = СвязанноеСобытие.Дата;
						Запись.Сделка = СвязанноеСобытие.Ссылка;
						Запись.Партнер = СвязанноеСобытие.Партнер;
						Запись.КаналПервичногоИнтереса = СтруктураИнтереса.ИнструментИнтереса;
						ЗаполнитьЗначенияСвойств(Запись, СтруктураИнтереса);
						
						НаборЗаписей.Записать();
						
					КонецЕсли;
					
					ЗадачаОбъект.СвязанноеСобытие = СвязанноеСобытие.Ссылка; 
					ЗадачаОбъект.Предмет 		= СвязанноеСобытие.Ссылка; 
					
					ЗадачаОбъект.Записать();
					
					БизнесПроцесс.Предмет 		= СвязанноеСобытие.Ссылка;
					БизнесПроцесс.Записать();
					
				КонецЦикла;  
				
			Исключение
				
				
			КонецПопытки;
			
		КонецЕсли; 		
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - сохраняет на диске запись, скачанную по ссылке и возвращаяет имя временного файла на диске
//
// Параметры:
//  СсылкаНаЗапись	 - Строка - ссылка на запись разговора
// 
// Возвращаемое значение:
//  Строка - адрес аудиофайла на диске 
//
Функция ПолучитьЗаписьЗвонка(СсылкаНаЗапись, Звонок = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Звонок) Тогда  
		ВидАТС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Звонок, "ВидАТС");
		Возврат ПолучитьЗаписьЗвонкаНовый(СсылкаНаЗапись, ВидАТС);
	КонецЕсли;  
	
	Если СтрНайти(СсылкаНаЗапись, "records.megapbx.ru") Тогда
		
		Результат = ВыполнитьЗапрос(СсылкаНаЗапись, "GET",, ".mp3");
		Если Результат.КодСостояния = 404 Тогда
			Результат.Ошибка = "Запись недоступна (возможно, файл удалён с сервера АТС)";	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.Ошибка) Тогда		
			Возврат Результат;		
		Иначе
			
			ДвоичныеДанные = Новый ДвоичныеДанные(Результат.ФайлРезультата);		
			Возврат Новый Структура ("Ошибка, ДвоичныеДанные", Результат.Ошибка, ДвоичныеДанные);
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(СсылкаНаЗапись, "beeline.ru") Тогда
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СсылкаНаЗапись, "_");
		
		Путь = СтрШаблон("https://cloudpbx.beeline.ru/apis/portal/v2/records/%1/%2/download", СтрЗаменить(МассивПодстрок[0], ":", "%3A"), СтрЗаменить(МассивПодстрок[1], "@", "%40"));  
		
		Результат = Новый Структура("КодСостояния, ФайлРезультата, Ошибка");
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Путь);
		Сервер = СтруктураURI.Хост;
		ПутьНаСервере = СтруктураURI.ПутьНаСервере;	
		
		HTTPСоединение =  Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
		
		Заголовки = Новый Соответствие; 
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", Константы.Билайн_Токен.Получить());
		
		HTTPЗапрос	= Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
		
		Попытка			
			Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);	
			
			КодСостояния = Ответ.КодСостояния;
			
			Если КодСостояния = 200 Тогда
				
				ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();		
				Возврат Новый Структура ("Ошибка, ДвоичныеДанные", Результат.Ошибка, ДвоичныеДанные);
				
			КонецЕсли;
			
			Результат.Ошибка  = Ответ.ПолучитьТелоКакСтроку();
			
		Исключение
			ОписаниеОшибки = СтрШаблон("Не удалось выполнить HTTP-запрос: %1", ОписаниеОшибки());		
			
			Результат.Ошибка = ОписаниеОшибки;	
		КонецПопытки;
		
		Возврат Результат; 
		
	ИначеЕсли СтрНайти(СсылкаНаЗапись, "app.uiscom.ru") Или СтрНайти(СсылкаНаЗапись, "records.secure.itoolabs.net") Тогда	
		
		Результат = Новый Структура("КодСостояния, ФайлРезультата, Ошибка");
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СсылкаНаЗапись);
		Сервер = СтруктураURI.Хост;
		ПутьНаСервере = СтруктураURI.ПутьНаСервере;	
		
		HTTPСоединение =  Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
		
		Заголовки = Новый Соответствие; 
		
		HTTPЗапрос	= Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
		
		Попытка			
			Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);	
			
			КодСостояния = Ответ.КодСостояния;
			
			Если КодСостояния = 200 Тогда
				
				ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();		
				Возврат Новый Структура ("Ошибка, ДвоичныеДанные", Результат.Ошибка, ДвоичныеДанные);
				
			КонецЕсли;
			
			Результат.Ошибка  = Ответ.ПолучитьТелоКакСтроку();
			
		Исключение
			ОписаниеОшибки = СтрШаблон("Не удалось выполнить HTTP-запрос: %1", ОписаниеОшибки());		
			
			Результат.Ошибка = ОписаниеОшибки;	
		КонецПопытки;
		
		Возврат Результат;  
		
	Иначе //Ростелеком. У Ростелекома в индентификаторе нет явного представления что это ростелеком, будет последним
		
		Результат = Новый Структура("КодСостояния, ФайлРезультата, Ошибка");
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI("https://api.cloudpbx.rt.ru/get_record");
		Сервер = СтруктураURI.Хост;
		ПутьНаСервере = СтруктураURI.ПутьНаСервере;	
		
		HTTPСоединение =  Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
		
		Заголовки = Новый Соответствие; 
		Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		
		Структура = Новый Структура;
		Структура.Вставить("session_id", СсылкаНаЗапись); 
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		ТелоСтрокой = Запись.Закрыть();
		
		Хэш=Новый ХешированиеДанных(ХешФункция.SHA256); 
		Хэш.Добавить(Константы.RT_УникальныйКодИдентификации.Получить());
		Хэш.Добавить(ТелоСтрокой); 
		Хэш.Добавить(Константы.RT_УникальныйКлючДляПодписи.Получить());
		
		ХешНормализованный = СтрЗаменить(НРЕГ(Хэш.ХешСумма)," ", "");
		
		Заголовки.Вставить("X-Client-ID", Константы.RT_УникальныйКодИдентификации.Получить()); 	
		Заголовки.Вставить("X-Client-Sign", ХешНормализованный);
		
		HTTPЗапрос	= Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
		Если ЗначениеЗаполнено(ТелоСтрокой) Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоСтрокой, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);		
		КонецЕсли;
		
		Попытка			
			Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);	
			
			КодСостояния = Ответ.КодСостояния;
			
			Если КодСостояния = 200 Тогда
				
				ЧтениеJSON	= Новый ЧтениеJSON;	
				ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку()); 		
				СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
				ЧтениеJSON.Закрыть();
				
			КонецЕсли;
			
			Если СтруктураЗаявки.result = "0" Тогда
				
				Результат = ВыполнитьЗапрос(СтруктураЗаявки.url, "GET",, ".mp3");
				
				Если Результат.КодСостояния = 404 Тогда
					Результат.Ошибка = "Запись недоступна (возможно, файл удалён с сервера АТС)";	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Результат.Ошибка) Тогда		
					Возврат Результат;		
				Иначе
					
					ДвоичныеДанные = Новый ДвоичныеДанные(Результат.ФайлРезультата);		
					Возврат Новый Структура ("Ошибка, ДвоичныеДанные", Результат.Ошибка, ДвоичныеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Результат.Ошибка  = СтруктураЗаявки.resultMessage;
			
		Исключение
			ОписаниеОшибки = СтрШаблон("Не удалось выполнить HTTP-запрос: %1", ОписаниеОшибки());		
			
			Результат.Ошибка = ОписаниеОшибки;	
		КонецПопытки;
		
		Возврат Результат; 
		
	КонецЕсли;
	
КонецФункции // ПолучитьЗаписьЗвонка(СсылкаНаЗапись)

// Функция - сохраняет на диске запись, скачанную по ссылке и возвращаяет имя временного файла на диске
//
// Параметры:
//  СсылкаНаЗапись	 - Строка - ссылка на запись разговора
// 
// Возвращаемое значение:
//  Строка - адрес аудиофайла на диске 
//
Функция ПолучитьЗаписьЗвонкаНовый(СсылкаНаЗапись, ВидАТС) Экспорт
	
	Если ВидАТС = Перечисления.ВидыАТС.Мегафон Или ВидАТС = Перечисления.ВидыАТС.УралМикро Тогда
		
		Если СтрНайти(СсылкаНаЗапись, "http") Тогда
			Результат = ВыполнитьЗапрос(СсылкаНаЗапись, "GET",, ".mp3");
			Если Результат.КодСостояния = 404 Тогда
				Результат.Ошибка = "Запись недоступна (возможно, файл удалён с сервера АТС)";	
			КонецЕсли;   
			
			Если ЗначениеЗаполнено(Результат.Ошибка) Тогда		
				Возврат Результат;		
			Иначе				
				ДвоичныеДанные = Новый ДвоичныеДанные(Результат.ФайлРезультата);		
				Возврат Новый Структура ("Ошибка, ДвоичныеДанные", Результат.Ошибка, ДвоичныеДанные);				
			КонецЕсли;
		ИначеЕсли ВидАТС = Перечисления.ВидыАТС.УралМикро Тогда
			//ищем на фтп  
			Данные = ИнтеграцияАТССервер.ПолучитьДанныеДоступаУралМикро();  
			Если Данные.ЗаписиЗвонковНаFTP И ЗначениеЗаполнено(Данные.FTP) Тогда  
				ДанныеFTP = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.FTP, "АдресFTPсервера, ЛогинFTPсервера, ПарольFTPсервера");
				Соединение = Новый FTPСоединение(ДанныеFTP.АдресFTPсервера, ,ДанныеFTP.ЛогинFTPсервера, ДанныеFTP.ПарольFTPсервера,,Истина, 30);
				
				ОписаниеОшибки = "";
				НастройкиПодключения = Новый Структура;
				Если НЕ ОбменССайтом.ПутьFTPРазобран(ДанныеFTP.АдресFTPсервера, НастройкиПодключения, ОписаниеОшибки) Тогда
					ВызватьИсключение ОписаниеОшибки;
				КонецЕсли;
				Попытка 
					Соединение.УстановитьТекущийКаталог(НастройкиПодключения.Каталог);
				Исключение   
					Возврат Новый Структура("Ошибка, ДвоичныеДанные", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось на FTP-сервере перейти в каталог %1.'"),
					НастройкиПодключения.Каталог));			
				КонецПопытки;
				
				Расширение = Сред(СсылкаНаЗапись, СтрНайти(СсылкаНаЗапись, ".", НаправлениеПоиска.СКонца));
				ИмяВрем = ПолучитьИмяВременногоФайла(Расширение);
				Соединение.Получить(СсылкаНаЗапись, ИмяВрем);
				
				ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВрем);		
				Возврат Новый Структура ("Ошибка, ДвоичныеДанные", "", ДвоичныеДанные);	
			Иначе
				Возврат Новый Структура("Ошибка, ДвоичныеДанные", "Не настроено фтп Уралмикро")
			КонецЕсли;  
		КонецЕсли;
		
	ИначеЕсли ВидАТС = Перечисления.ВидыАТС.Билайн Тогда
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СсылкаНаЗапись, "_");
		
		Путь = СтрШаблон("https://cloudpbx.beeline.ru/apis/portal/v2/records/%1/%2/download", СтрЗаменить(МассивПодстрок[0], ":", "%3A"), СтрЗаменить(МассивПодстрок[1], "@", "%40"));  
		
		Результат = Новый Структура("КодСостояния, ФайлРезультата, Ошибка");
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Путь);
		Сервер = СтруктураURI.Хост;
		ПутьНаСервере = СтруктураURI.ПутьНаСервере;	
		
		HTTPСоединение =  Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
		
		Заголовки = Новый Соответствие; 
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", Константы.Билайн_Токен.Получить());
		
		HTTPЗапрос	= Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
		
		Попытка			
			Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);	
			
			КодСостояния = Ответ.КодСостояния;
			
			Если КодСостояния = 200 Тогда
				
				ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();		
				Возврат Новый Структура ("Ошибка, ДвоичныеДанные", Результат.Ошибка, ДвоичныеДанные);
				
			КонецЕсли;
			
			Результат.Ошибка  = Ответ.ПолучитьТелоКакСтроку();
			
		Исключение
			ОписаниеОшибки = СтрШаблон("Не удалось выполнить HTTP-запрос: %1", ОписаниеОшибки());		
			
			Результат.Ошибка = ОписаниеОшибки;	
		КонецПопытки;
		
		Возврат Результат; 
		
	ИначеЕсли ВидАТС = Перечисления.ВидыАТС.Ростелеком Тогда
		
		Результат = Новый Структура("КодСостояния, ФайлРезультата, Ошибка");
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI("https://api.cloudpbx.rt.ru/get_record");
		Сервер = СтруктураURI.Хост;
		ПутьНаСервере = СтруктураURI.ПутьНаСервере;	
		
		HTTPСоединение =  Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
		
		Заголовки = Новый Соответствие; 
		Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		
		Структура = Новый Структура;
		Структура.Вставить("session_id", СсылкаНаЗапись); 
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		ТелоСтрокой = Запись.Закрыть();
		
		Хэш=Новый ХешированиеДанных(ХешФункция.SHA256); 
		Хэш.Добавить(Константы.RT_УникальныйКодИдентификации.Получить());
		Хэш.Добавить(ТелоСтрокой); 
		Хэш.Добавить(Константы.RT_УникальныйКлючДляПодписи.Получить());
		
		ХешНормализованный = СтрЗаменить(НРЕГ(Хэш.ХешСумма)," ", "");
		
		Заголовки.Вставить("X-Client-ID", Константы.RT_УникальныйКодИдентификации.Получить()); 	
		Заголовки.Вставить("X-Client-Sign", ХешНормализованный);
		
		HTTPЗапрос	= Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
		Если ЗначениеЗаполнено(ТелоСтрокой) Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоСтрокой, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);		
		КонецЕсли;
		
		Попытка			
			Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);	
			
			КодСостояния = Ответ.КодСостояния;
			
			Если КодСостояния = 200 Тогда
				
				ЧтениеJSON	= Новый ЧтениеJSON;	
				ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку()); 		
				СтруктураЗаявки = ПрочитатьJSON(ЧтениеJSON);		
				ЧтениеJSON.Закрыть();
				
			КонецЕсли;
			
			Если СтруктураЗаявки.result = "0" Тогда
				
				Результат = ВыполнитьЗапрос(СтруктураЗаявки.url, "GET",, ".mp3");
				
				Если Результат.КодСостояния = 404 Тогда
					Результат.Ошибка = "Запись недоступна (возможно, файл удалён с сервера АТС)";	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Результат.Ошибка) Тогда		
					Возврат Результат;		
				Иначе
					
					ДвоичныеДанные = Новый ДвоичныеДанные(Результат.ФайлРезультата);		
					Возврат Новый Структура ("Ошибка, ДвоичныеДанные", Результат.Ошибка, ДвоичныеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Результат.Ошибка  = СтруктураЗаявки.resultMessage;
			
		Исключение
			ОписаниеОшибки = СтрШаблон("Не удалось выполнить HTTP-запрос: %1", ОписаниеОшибки());		
			
			Результат.Ошибка = ОписаниеОшибки;	
		КонецПопытки;
		
		Возврат Результат; 
		
	ИначеЕсли СтрНайти(СсылкаНаЗапись, "app.uiscom.ru") Или СтрНайти(СсылкаНаЗапись, "records.secure.itoolabs.net") Тогда	
		
		Результат = Новый Структура("КодСостояния, ФайлРезультата, Ошибка");
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СсылкаНаЗапись);
		Сервер = СтруктураURI.Хост;
		ПутьНаСервере = СтруктураURI.ПутьНаСервере;	
		
		HTTPСоединение =  Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
		
		Заголовки = Новый Соответствие; 
		
		HTTPЗапрос	= Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
		
		Попытка			
			Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);	
			
			КодСостояния = Ответ.КодСостояния;
			
			Если КодСостояния = 200 Тогда
				
				ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();		
				Возврат Новый Структура ("Ошибка, ДвоичныеДанные", Результат.Ошибка, ДвоичныеДанные);
				
			КонецЕсли;
			
			Результат.Ошибка  = Ответ.ПолучитьТелоКакСтроку();
			
		Исключение
			ОписаниеОшибки = СтрШаблон("Не удалось выполнить HTTP-запрос: %1", ОписаниеОшибки());		
			
			Результат.Ошибка = ОписаниеОшибки;	
		КонецПопытки;
		
		Возврат Результат;  
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = ";") Экспорт    
	
	Результат = Новый Структура;
	
	ОписаниеПараметра = "";
	НайденоНачалоСтроки = Ложь;
	НомерПоследнегоСимвола = СтрДлина(СтрокаПараметров);
	Для НомерСимвола = 1 По НомерПоследнегоСимвола Цикл
		Символ =Сред(СтрокаПараметров, НомерСимвола, 1);
		Если Символ = """" Тогда
			НайденоНачалоСтроки = Не НайденоНачалоСтроки;
		КонецЕсли;
		Если Символ <> Разделитель Или НайденоНачалоСтроки Тогда
			ОписаниеПараметра = ОписаниеПараметра + Символ;
		КонецЕсли;
		Если Символ = Разделитель И Не НайденоНачалоСтроки Или НомерСимвола = НомерПоследнегоСимвола Тогда
			Позиция = СтрНайти(ОписаниеПараметра, "=");
			Если Позиция > 0 Тогда
				ИмяПараметра = СокрЛП(Лев(ОписаниеПараметра, Позиция - 1));
				ЗначениеПараметра = СокрЛП(Сред(ОписаниеПараметра, Позиция + 1));
				ЗначениеПараметра = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(ЗначениеПараметра);
				Попытка
					Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
				Исключение
				КонецПопытки;
			КонецЕсли;
			ОписаниеПараметра = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;   
	
КонецФункции

#Область Ростелеком

Процедура RT_ОбработатьСобытиеЗвонка(ЗаписьЖурналаЗвонковВАТС) Экспорт
	
	Попытка
		
		ДатаЗвонка = ЗаписьЖурналаЗвонковВАТС.ДатаЗапроса;
		Автор = Справочники.Пользователи.Система;
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(ЗаписьЖурналаЗвонковВАТС.ТелоЗапроса); 		
		ПараметрыТела = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();	
		
		ПараметрыТела.Вставить("phone", RT_ПолучитьНомерТелефона(ПараметрыТела));
		ПараметрыТела.Вставить("user", RT_ПолучитьПользователя(ПараметрыТела));
		ПараметрыТела.Вставить("diversion", RT_ПолучитьВнутреннийНомер(ПараметрыТела));
		ПараметрыТела.Вставить("callid", ПараметрыТела.session_id);
		
		СтруктураЗвонка = ПолучитьСтруктуруДляЗаполненияЗвонка();
		
		СтруктураЗвонка.ВходящийЗвонок = Ложь;
		
		// phone - номер клиента
		СтруктураЗвонка.ТелефонКонтакта = ПараметрыТела.phone;
		
		// user - логин сотрудника
		СтруктураЗвонка.Логин = ПараметрыТела.user; 	
		
		// diversion - телефон сотрудника
		Если ПараметрыТела.Свойство("diversion") Тогда
			СтруктураЗвонка.ТелефонСотрудника = ПараметрыТела.diversion;	
		ИначеЕсли ПараметрыТела.Свойство("telnum") Тогда
			СтруктураЗвонка.ТелефонСотрудника = ПараметрыТела.telnum;
		ИначеЕсли ПараметрыТела.Свойство("ext") Тогда
			СтруктураЗвонка.ТелефонСотрудника = ПараметрыТела.ext;
		КонецЕсли;
		
		Если ПараметрыТела.state <> "new" И ПараметрыТела.state <> "end" Тогда
			
			Если ЗначениеЗаполнено(СтруктураЗвонка.ТелефонСотрудника) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
				|ГДЕ
				|	ПользователиКонтактнаяИнформация.Вид = &Вид
				|	И ПользователиКонтактнаяИнформация.Представление = &Представление";
				
				Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ВнутреннийТелефонМегафонПользователя);
				Запрос.УстановитьПараметр("Представление", СтруктураЗвонка.ТелефонСотрудника);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					СтруктураЗвонка.Ответственный = ВыборкаДетальныеЗаписи.Ссылка;
				Иначе
					Возврат;  //Прекращаем обработку если нет пользователя которого будем оповещать о звонке. (допустим звонок в бухгалтерию)
				КонецЕсли;
				
			Иначе
				
				СтруктураЗвонка.Ответственный = РегистрыСведений.ДанныеДоступаАТС.ПолучитьПользователяПоЛогину(Перечисления.ВидыАТС.Ростелеком, СтруктураЗвонка.Логин + "%");  
				Если Не ЗначениеЗаполнено(СтруктураЗвонка.Ответственный) Тогда
					Возврат;  //Прекращаем обработку если нет пользователя которого будем оповещать о звонке. (допустим звонок в бухгалтерию)
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// callid - идентификатор звонка
		СтруктураЗвонка.ИдентификаторЗвонка = ПараметрыТела.callid;
		
		Если НРег(ПараметрыТела.type) = "incoming" Тогда
			
			СтруктураЗвонка.ВходящийЗвонок = Истина;
			
			Если ПараметрыТела.state = "new" Тогда 
				СтруктураЗвонка.ВнешнийНомер = RT_ПолучитьВнешнийНомерТелефона(ПараметрыТела);
			КонецЕсли;
			
		КонецЕсли;
		
		// type  - тип события
		Если НРег(ПараметрыТела.type) = "incoming" И ПараметрыТела.state = "calling" Тогда
			
			ТипОповещения = "ВходящийНачало";
			СтруктураЗвонка.ВходящийЗвонок = Истина;
			
		ИначеЕсли НРег(ПараметрыТела.type) = "outbound" И ПараметрыТела.state = "calling" Тогда
			
			ТипОповещения = "ИсходящийНачало";
			СтруктураЗвонка.ВходящийЗвонок = Ложь;
			
		ИначеЕсли ПараметрыТела.state = "connected" Тогда 
			
			ТипОповещения = "НачалоРазговора";  
			
		ИначеЕсли ПараметрыТела.state = "disconnected" Тогда     
			
			ТипОповещения = "Завершен";
			
		Иначе  
			
			ТипОповещения = "";   
			
		КонецЕсли;
		
		Если ТипОповещения = "НачалоРазговора" Тогда
			СтруктураЗвонка.СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный;
		Иначе
			СтруктураЗвонка.СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный;
		КонецЕсли;
		
		СтруктураЗвонка.Дата = ДатаЗвонка;	
		СтруктураЗвонка.Автор = Автор;
		
		
		Если ПараметрыТела.state = "new" Тогда 
			
			ТелЗвонок = RT_СоздатьТелефонныйЗвонок(СтруктураЗвонка);
			
		ИначеЕсли ПараметрыТела.state = "calling" Тогда		
			
			ТелЗвонок = RT_ИзменитьТелефонныйЗвонок(СтруктураЗвонка);
			
		ИначеЕсли ПараметрыТела.state = "connected" Тогда
			
			СтруктураЗвонка.СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный;			
			ТелЗвонок = RT_ИзменитьТелефонныйЗвонок(СтруктураЗвонка); 
			
		ИначеЕсли ПараметрыТела.state = "disconnected" Тогда
			
			ТелЗвонок = RT_ЗавершитьТелефонныйЗвонок(СтруктураЗвонка);				
			
		ИначеЕсли ПараметрыТела.state = "end" Тогда
			
			RT_ЗавершитьТелефонныйЗвонокТранк(СтруктураЗвонка);	
			
		КонецЕсли;
		
		// Формируем событие
		Если ЗначениеЗаполнено(ТелЗвонок) Тогда
			
			СтруктураЗвонка.НовыйЗвонок = ТелЗвонок; 
			
			Первичный = Истина;
			Если ТипОповещения = "ВходящийНачало" Тогда //Создаем сделку сразу
				Сделка = СоздатьПолучитьСделку(ТелЗвонок);   
			ИначеЕсли ТипОповещения = "НачалоРазговора" Тогда //Создаем событие только в том случае, если разговор начался
				Событие = RT_СоздатьПолучитьСобытие(СтруктураЗвонка);
				Дата = Событие.Дата;
				Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(Событие);
				
				Если ЗначениеЗаполнено(Сделка) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "Основание") <> Событие Тогда
					Первичный = Ложь;
				КонецЕсли; 
			Иначе
				Событие = Неопределено;
				Дата = Неопределено;  
				Сделка = Неопределено; 
			КонецЕсли; 
			
			Если СтруктураЗвонка.ВходящийЗвонок Тогда  
				Если ИспользоватьНовыйВариант() Тогда
					Если Первичный Тогда
						НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриПервичномВходящемЗвонке", ТелЗвонок.Ответственный);
					Иначе	
						НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВторичномВходящемЗвонке", ТелЗвонок.Ответственный);
					КонецЕсли;
				Иначе	
					НаименованиеДействия		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВходящемЗвонке", ТелЗвонок.Ответственный);
				КонецЕсли;				
			Иначе	
				НаименованиеДействия			= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриИсходящемЗвонке", ТелЗвонок.Ответственный);	
			КонецЕсли;
			
			Если НЕ (НаименованиеДействия = "Открыть событие" Или НаименованиеДействия = "Открыть сделку" или НаименованиеДействия = "Открыть уведомление о звонке") Тогда
				Возврат;
			КонецЕсли;
			
			Контакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЗвонка.НовыйЗвонок, "АбонентКонтакт");
			Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда				
				Партнер = Контакт;				
			ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда				
				Партнер = Справочники.ФизическиеЛица.ПолучитьПартнера(Контакт, Истина);				
			КонецЕсли;
			
			Период = УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ПериодОткрытияЗвонков_Ростелеком") * 60 * 60;
			
			Если Период > 0 Тогда	
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	CRM_Событие.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.CRM_Событие КАК CRM_Событие
				|ГДЕ
				|	CRM_Событие.Партнер = &Партнер
				|	И CRM_Событие.Дата > &Дата
				|	И CRM_Событие.ВидСобытия = &ВидСобытия";
				
				Запрос.УстановитьПараметр("ВидСобытия", Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок);
				Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса() - Период);
				Запрос.УстановитьПараметр("Партнер", Партнер);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда				
					НаименованиеДействия = "Не " + НаименованиеДействия;				
				КонецЕсли;			
			КонецЕсли;
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "ЭтоСотрудник") Тогда
				НаименованиеДействия = "Не " + НаименованиеДействия;
			КонецЕсли;    					
			
			ИнтеграцияАТССервер.ОтправитьДанныеПользователюНаКлиент(
			ТипОповещения,
			СтруктураЗвонка.Ответственный,
			СтруктураЗвонка.ТелефонКонтакта,
			ТелЗвонок.АбонентПредставление,
			Дата,
			Событие,  
			Сделка,
			СтруктураЗвонка.ИдентификаторЗвонка,
			НаименованиеДействия); 		
			
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурналаЗвонковВАТС.УникальныйИдентификатор, ТекущаяДатаСеанса(), 500, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Билайн

Процедура Билайн_ОбработатьСобытиеЗвонка(ЗаписьЖурналаЗвонковВАТС) Экспорт
	
	
	Попытка //Оборачиваем все в попытку, так как если не вернуть код 200 то Билайн отпишется от оповещений.
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Билайн", ЗаписьЖурналаЗвонковВАТС.ДатаЗапроса, ЗаписьЖурналаЗвонковВАТС.ТелоЗапроса); 	
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрЗаменить(ЗаписьЖурналаЗвонковВАТС.ТелоЗапроса, " countryCode=""7""", "")); //Ошибка десерелазиации, не парсится телефон.
		ПараметрыТела = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		Если СтрНайти(ЗаписьЖурналаЗвонковВАТС.ТелоЗапроса, "SubscriptionTerminatedEvent") Тогда
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL();
			
			HTTPСоединение = Новый HTTPСоединение("cloudpbx.beeline.ru",,,,,,ssl);
			HTTPЗапрос = Новый HTTPЗапрос("apis/portal/subscription"); 
			HTTPЗапрос.Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", Константы.Билайн_Токен.Получить()); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
			
			url = Константы.ВнешнийАдресДляИнтеграций.Получить();
			Если НЕ ЗначениеЗаполнено(url) Тогда
				ВызватьИсключение "Не заполнен внешний адрес для интеграций";
			КонецЕсли;
			
			url = url + ?(Прав(url, 1) = "/","","/") + "hs/extint/beeline";
			
			Структура = Новый Структура;
			Структура.Вставить("pattern", ПараметрыТела.targetId);
			Структура.Вставить("expires", 86400); 		
			Структура.Вставить("subscriptionType", "BASIC_CALL");
			Структура.Вставить("url", url);
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json1 = Запись.Закрыть();
			
			ЗаписьЖурнала2 = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Билайн_ПодписатьсяНаСобытия", ТекущаяДатаСеанса(), Json1);
			
			HTTPЗапрос.УстановитьТелоИзСтроки(Json1); 		
			Результат = HTTPСоединение.Записать(HTTPЗапрос);
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала2, ТекущаяДатаСеанса(), Результат.КодСостояния, Результат.ПолучитьТелоКакСтроку());
			
			Попытка
				
				Если Результат.КодСостояния = 200 Тогда
					
					РезультатТелоКакСтрока = Результат.ПолучитьТелоКакСтроку();
					JsonОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(РезультатТелоКакСтрока);
					
					Пользователь = РегистрыСведений.ДанныеДоступаАТС.ПолучитьПользователяПоЛогину(Перечисления.ВидыАТС.Билайн, ПараметрыТела.targetId);
					РегистрыСведений.Билайн_ТекущиеПодписки.УстановитьПодписку(Пользователь, JsonОтвета.subscriptionId); 
					
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
			Возврат;
			
		КонецЕсли; 
		
		
		ДатаЗвонка = ЗаписьЖурналаЗвонковВАТС.ДатаЗапроса;
		
		Попытка
			СостояниеЗвонкка = НРег(ПараметрыТела.eventData.call.state);
		Исключение
			Возврат;
		КонецПопытки;
		
		
		СтруктураЗвонка = ПолучитьСтруктуруДляЗаполненияЗвонка();
		СтруктураЗвонка.ВходящийЗвонок = Ложь;
		СтруктураЗвонка.ИдентификаторЗвонка = ПараметрыТела.eventData.call.extTrackingId;
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ТелефонныйЗвонок");
		ЭлементБлокировки.УстановитьЗначение("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
		Блокировка.Заблокировать(); 	
		
		
		СтруктураЗвонка.НовыйЗвонок = Документы.ТелефонныйЗвонок.НайтиПоРеквизиту("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
		
		Попытка
			СтруктураЗвонка.ТелефонСотрудника = Лев(ПараметрыТела.targetId, 10);
		Исключение
		КонецПопытки;
		
		
		Если НРег(ПараметрыТела.eventData.call.personality) = "click-to-dial" Тогда //Входящий звонок при натиии исходщего звонка из CRM.
			Возврат;
		КонецЕсли;
		
		Если СостояниеЗвонкка = "alerting" И НРег(ПараметрыТела.eventData.call.personality) = "terminator" Тогда 
			
			ТипОповещения = "ВходящийНачало";
			СтруктураЗвонка.ВходящийЗвонок = Истина;
			СтруктураЗвонка.ВнешнийНомер = Лев(ПараметрыТела.targetId, 10);
			
			//В случае группового звонка, определяем внешний номер из номера группы
			Попытка
				
				ИмяГруппы = ПараметрыТела.eventData.call.remoteParty.name;
				
				Если ТипЗнч(ПараметрыТела.eventData.call.redirections.redirection) = тип("СписокXDTO") Тогда
					
					Для Каждого ТекГруппа из ПараметрыТела.eventData.call.redirections.redirection Цикл
						
						Если ТекГруппа.party.name = ИмяГруппы Тогда						
							
							СтруктураЗвонка.ВнешнийНомер = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ТекГруппа.party.address), 10);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла; 				
					
				Иначе 
					
					ТекГруппа = ПараметрыТела.eventData.call.redirections.redirection;
					Если ТекГруппа.party.name = ИмяГруппы Тогда						
						СтруктураЗвонка.ВнешнийНомер = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ТекГруппа.party.address), 10); 			            
					КонецЕсли; 
					
				КонецЕсли; 
				
			Исключение
			КонецПопытки;
			
		ИначеЕсли СостояниеЗвонкка = "alerting" И НРег(ПараметрыТела.eventData.call.personality) = "originator" Тогда 
			
			ТипОповещения = "ИсходящийНачало";
			СтруктураЗвонка.ВходящийЗвонок = Ложь;
			
		ИначеЕсли СостояниеЗвонкка = "active" Тогда
			
			ТипОповещения = "НачалоРазговора";
			СтруктураЗвонка.СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный;
			
		ИначеЕсли СостояниеЗвонкка = "released" Тогда   
			
			ТипОповещения = "Завершен";  
			
		Иначе       
			
			ТипОповещения = ""; 
			
		КонецЕсли;
		
		// phone - номер клиента
		Попытка //У некоторых событий иногда телефон отсутствует, заполняем из найденного звонка
			СтруктураЗвонка.ТелефонКонтакта = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ПараметрыТела.eventData.call.remoteParty.address), 10);
			
			Если СтрДлина(СтруктураЗвонка.ТелефонКонтакта) < 5 Тогда  //Внутренний звонок
				Возврат;
			КонецЕсли;
			
		Исключение
			
			Если ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
				СтруктураЗвонка.ТелефонКонтакта = Прав(СтруктураЗвонка.НовыйЗвонок.АбонентКакСвязаться, 10);
			Иначе
				Возврат;
			КонецЕсли;
		КонецПопытки;
		
		// user - логин сотрудника
		СтруктураЗвонка.Логин = Билайн_ПолучитьПользователя(ПараметрыТела);
		
		СтруктураЗвонка.Дата = ДатаЗвонка;	
		СтруктураЗвонка.Автор = Справочники.Пользователи.Система; 	
		СтруктураЗвонка.Ответственный = РегистрыСведений.ДанныеДоступаАТС.ПолучитьПользователяПоЛогину(Перечисления.ВидыАТС.Билайн, СтруктураЗвонка.Логин);  
		
		ПрерватьВыполнение = Ложь;
		
		Билайн_ОбработатьСобытиеЗвонкаПереопределяемый(ПрерватьВыполнение, СтруктураЗвонка, ПараметрыТела);
		
		Если ПрерватьВыполнение Тогда
			Возврат;
		КонецЕсли;		
		
		Если СостояниеЗвонкка = "alerting" ИЛИ СостояниеЗвонкка = "active" Тогда		
			
			ТелЗвонок = Билайн_СоздатьИзменитьТелефонныйЗвонок(СтруктураЗвонка); 
			
		ИначеЕсли СостояниеЗвонкка = "released" Тогда
			
			ТелЗвонок = Билайн_ЗавершитьТелефонныйЗвонок(СтруктураЗвонка);	
			
		Иначе
			Возврат;
		КонецЕсли;
		
		// Формируем событие
		Если ЗначениеЗаполнено(ТелЗвонок) Тогда
			
			СтруктураЗвонка.НовыйЗвонок = ТелЗвонок;
			
			Если ТелЗвонок.Входящий Тогда
				НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВходящемЗвонке", СтруктураЗвонка.Ответственный);	
			Иначе	
				НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриИсходящемЗвонке", СтруктураЗвонка.Ответственный);	
			КонецЕсли; 
			
			Первичный = Истина;
			Если ТипОповещения = "ВходящийНачало" Тогда //Создаем сделку сразу
				Сделка = СоздатьПолучитьСделку(ТелЗвонок);   
			ИначеЕсли ТипОповещения = "НачалоРазговора" Тогда //Создаем событие только в том случае, если разговор начался
				Событие = Билайн_СоздатьПолучитьСобытие(СтруктураЗвонка);
				Дата = Событие.Дата;
				Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(Событие);
				
				Если ЗначениеЗаполнено(Сделка) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "Основание") <> Событие Тогда
					Первичный = Ложь;
				КонецЕсли; 
			Иначе
				Событие = Неопределено;
				Дата = Неопределено;  
				Сделка = Неопределено; 
			КонецЕсли; 
			
			Контакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЗвонка.НовыйЗвонок, "АбонентКонтакт");
			Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда				
				Партнер = Контакт;				
			ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда				
				Партнер = Справочники.ФизическиеЛица.ПолучитьПартнера(Контакт, Истина);				
			КонецЕсли;
			
			Период = УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ПериодОткрытияЗвонков_Билайн") * 60 * 60;
			
			Если Период > 0 Тогда	
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	CRM_Событие.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.CRM_Событие КАК CRM_Событие
				|ГДЕ
				|	CRM_Событие.Партнер = &Партнер
				|	И CRM_Событие.Дата > &Дата
				|	И CRM_Событие.ВидСобытия = &ВидСобытия";
				
				Запрос.УстановитьПараметр("ВидСобытия", Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок);
				Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса() - Период);
				Запрос.УстановитьПараметр("Партнер", Партнер);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда				
					НаименованиеДействия = "Не " + НаименованиеДействия;				
				КонецЕсли;			
			КонецЕсли;
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "ЭтоСотрудник") Тогда
				НаименованиеДействия = "Не " + НаименованиеДействия;
			КонецЕсли;      
			
			ИнтеграцияАТССервер.ОтправитьДанныеПользователюНаКлиент(
			ТипОповещения,
			СтруктураЗвонка.Ответственный,
			СтруктураЗвонка.ТелефонКонтакта,
			ТелЗвонок.АбонентПредставление,
			Дата,
			Событие,   
			Сделка,
			СтруктураЗвонка.ИдентификаторЗвонка,
			НаименованиеДействия);
			
		КонецЕсли;
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, ПолучитьНавигационнуюСсылку(ТелЗвонок));
		
		ЗафиксироватьТранзакцию();	
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Билайн_ПодписатьсяНаСобытия(ИдентификаторРегламентногоЗадания = Неопределено) Экспорт
	
	Если НЕ Константы.Билайн_ИспользоватьОблачнуюАТС.Получить() Тогда
		ВызватьИсключение "Интеграция с виртуальной АТС Билайн отключена";
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Билайн_ПодписатьсяНаСобытия);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДоступаАТС.ЛогинАбонентаВиртуальнойАТС КАК ЛогинАбонентаВиртуальнойАТС,
	|	ДанныеДоступаАТС.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ДанныеДоступаАТС КАК ДанныеДоступаАТС
	|ГДЕ
	|	НЕ ДанныеДоступаАТС.Пользователь.ПометкаУдаления
	|	И НЕ ДанныеДоступаАТС.Пользователь.Недействителен
	|	И ДанныеДоступаАТС.ВидАТС = ЗНАЧЕНИЕ(Перечисление.ВидыАТС.Билайн)"; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение("cloudpbx.beeline.ru",,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос("apis/portal/subscription"); 
	HTTPЗапрос.Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", Константы.Билайн_Токен.Получить()); 	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	url = Константы.ВнешнийАдресДляИнтеграций.Получить();
	Если НЕ ЗначениеЗаполнено(url) Тогда
		ВызватьИсключение "Не заполнен внешний адрес для интеграций";
	КонецЕсли;
	
	url = url + ?(Прав(url, 1) = "/","","/") + "hs/extint/beeline";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЛогинАбонентаВиртуальнойАТС) Тогда
			Продолжить;
		КонецЕсли;		
		
		Структура = Новый Структура;
		Структура.Вставить("pattern", ВыборкаДетальныеЗаписи.ЛогинАбонентаВиртуальнойАТС);
		Структура.Вставить("expires", 86400); 		
		Структура.Вставить("subscriptionType", "BASIC_CALL");
		Структура.Вставить("url", url);
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json1 = Запись.Закрыть();
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Билайн_ПодписатьсяНаСобытия", ТекущаяДатаСеанса(), Json1);
		
		HTTPЗапрос.УстановитьТелоИзСтроки(Json1); 		
		Результат = HTTPСоединение.Записать(HTTPЗапрос);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, Результат.ПолучитьТелоКакСтроку());
		
		Попытка
			
			Если Результат.КодСостояния = 200 Тогда
				
				РезультатТелоКакСтрока = Результат.ПолучитьТелоКакСтроку();
				JsonОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(РезультатТелоКакСтрока);
				
				РегистрыСведений.Билайн_ТекущиеПодписки.УстановитьПодписку(ВыборкаДетальныеЗаписи.Пользователь, JsonОтвета.subscriptionId); 
				
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла; 	
	
КонецПроцедуры

Процедура Билайн_ПроверитьПодписатьсяНаСобытия(ИдентификаторРегламентногоЗадания = Неопределено) Экспорт
	
	Если НЕ Константы.Билайн_ИспользоватьОблачнуюАТС.Получить() Тогда
		ВызватьИсключение "Интеграция с виртуальной АТС Билайн отключена";
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Билайн_ПодписатьсяНаСобытия);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Билайн_ТекущиеПодписки.Пользователь КАК Пользователь,
	|	Билайн_ТекущиеПодписки.Идентификатор КАК Идентификатор,
	|	ДанныеДоступаАТС.ЛогинАбонентаВиртуальнойАТС КАК ЛогинАбонентаВиртуальнойАТС
	|ИЗ
	|	РегистрСведений.Билайн_ТекущиеПодписки КАК Билайн_ТекущиеПодписки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДоступаАТС КАК ДанныеДоступаАТС
	|		ПО (Билайн_ТекущиеПодписки.Пользователь = ДанныеДоступаАТС.Пользователь
	|				И ДанныеДоступаАТС.ВидАТС = ЗНАЧЕНИЕ(Перечисление.ВидыАТС.Билайн))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	
	
	HTTPСоединение = Новый HTTPСоединение("cloudpbx.beeline.ru",,,,,,ssl);
	
	url = Константы.ВнешнийАдресДляИнтеграций.Получить();
	Если НЕ ЗначениеЗаполнено(url) Тогда
		ВызватьИсключение "Не заполнен внешний адрес для интеграций";
	КонецЕсли;
	
	url = url + ?(Прав(url, 1) = "/","","/") + "hs/extint/beeline";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЛогинАбонентаВиртуальнойАТС) Тогда
			Продолжить;
		КонецЕсли;		
		
		HTTPСоединение = Новый HTTPСоединение("cloudpbx.beeline.ru",,,,,,ssl);
		HTTPЗапрос = Новый HTTPЗапрос(СтрШаблон("apis/portal/subscription?subscriptionId=%1",ВыборкаДетальныеЗаписи.Идентификатор));
		
		HTTPЗапрос.Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", Константы.Билайн_Токен.Получить()); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
		
		Результат = HTTPСоединение.Получить(HTTPЗапрос);
		
		Если Результат.КодСостояния <> 200 Тогда
			
			HTTPСоединение = Новый HTTPСоединение("cloudpbx.beeline.ru",,,,,,ssl);
			HTTPЗапрос = Новый HTTPЗапрос("apis/portal/subscription"); 
			HTTPЗапрос.Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", Константы.Билайн_Токен.Получить()); 	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
			
			url = Константы.ВнешнийАдресДляИнтеграций.Получить();
			Если НЕ ЗначениеЗаполнено(url) Тогда
				ВызватьИсключение "Не заполнен внешний адрес для интеграций";
			КонецЕсли;
			
			url = url + ?(Прав(url, 1) = "/","","/") + "hs/extint/beeline";
			
			Структура = Новый Структура;
			Структура.Вставить("pattern", ВыборкаДетальныеЗаписи.ЛогинАбонентаВиртуальнойАТС);
			Структура.Вставить("expires", 86400); 		
			Структура.Вставить("subscriptionType", "BASIC_CALL");
			Структура.Вставить("url", url);
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Структура);
			Json1 = Запись.Закрыть();
			
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Билайн_ПодписатьсяНаСобытия", ТекущаяДатаСеанса(), Json1);
			
			HTTPЗапрос.УстановитьТелоИзСтроки(Json1); 		
			Результат = HTTPСоединение.Записать(HTTPЗапрос);
			
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, Результат.ПолучитьТелоКакСтроку());
			
			Попытка
				
				Если Результат.КодСостояния = 200 Тогда
					
					РезультатТелоКакСтрока = Результат.ПолучитьТелоКакСтроку();
					JsonОтвета = УПДК_ОбщегоНазначенияКлиентСервер.ПрочитатьJsonИзСтроки(РезультатТелоКакСтрока);
					
					РегистрыСведений.Билайн_ТекущиеПодписки.УстановитьПодписку(ВыборкаДетальныеЗаписи.Ссылка, JsonОтвета.subscriptionId); 
					
				КонецЕсли;
				
			Исключение
			КонецПопытки; 			
			
		КонецЕсли; 		
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, Результат.ПолучитьТелоКакСтроку());
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура Билайн_ОбновитьОтветственного(Ответственный, Клиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Вид = &Вид
	|	И ПользователиКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ВнутреннийТелефонМегафонПользователя);
	Запрос.УстановитьПараметр("Ссылка", Ответственный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивJSON = Новый Массив;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		
		ВнутреннийНомер = Формат(ВыборкаДетальныеЗаписи.Представление, "ЧГ=0");
		
		Для Каждого ТекФЛ из Клиент.КонтактныеЛица Цикл
			
			ТекФизлицо = ТекФЛ.ФизЛицо;
			
			Для Каждого ТекСтр из ТекФизлицо.КонтактнаяИнформация Цикл
				
				Если ТекСтр.Тип <> Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					Продолжить;
				КонецЕсли;
				
				ОчищенныйНомер = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ТекСтр.Представление), 10);
				
				
				Если ЗначениеЗаполнено(ОчищенныйНомер) 
					И СтрДлина(ОчищенныйНомер) = 10 
					И Не ПустаяСтрока(ВнутреннийНомер) Тогда
					
					СтруктураJSON = Новый Структура;
					СтруктураJSON.Вставить("inboundNumber", ОчищенныйНомер);
					СтруктураJSON.Вставить("extension", ВнутреннийНомер); 		
					
					МассивJSON.Добавить(СтруктураJSON);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла; 	
		
	КонецЕсли;	
	
	Если МассивJSON.Количество() Тогда
		
		ssl = Новый ЗащищенноеСоединениеOpenSSL(); 
		
		HTTPСоединение = Новый HTTPСоединение("cloudpbx.beeline.ru",,,,,,ssl);
		HTTPЗапрос = Новый HTTPЗапрос("apis/portal/icr/route"); 
		HTTPЗапрос.Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", Константы.Билайн_Токен.Получить()); 	
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, МассивJSON);
		Json1 = Запись.Закрыть();
		
		ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Билайн_apis/portal/icr/route", ТекущаяДатаСеанса(), УПДК_ОбщегоНазначенияКлиентСервер.ЗаголовкиВСтроку(HTTPЗапрос.Заголовки) + Символы.ПС + Json1);
		
		HTTPЗапрос.УстановитьТелоИзСтроки(Json1); 		
		Результат = HTTPСоединение.ВызватьHTTPМетод("PUT", HTTPЗапрос);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Результат.КодСостояния, Результат.ПолучитьТелоКакСтроку());
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ВАТС

Процедура ВАТС_ОбработатьОчередьЗвонков(ИдентификаторРегламентногоЗадания = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВАТС_ОбработатьОчередьЗвонков);
	
	Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЖурналЗапросовВАТС.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ЖурналЗапросовВАТС.ДатаЗапроса КАК ДатаЗапроса,
		|	ЖурналЗапросовВАТС.ТелоЗапроса КАК ТелоЗапроса,
		|	ЖурналЗапросовВАТС.ВидАТС КАК ВидАТС,
		|	ЖурналЗапросовВАТС.ЗаписьЖурнала КАК ЗаписьЖурнала
		|ИЗ
		|	РегистрСведений.ЖурналЗапросовВАТС КАК ЖурналЗапросовВАТС
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЖурналЗапросовВАТС.УниверсальнаяДата";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			Прервать;
		КонецЕсли;
		
		Если Выборка.ВидАТС = Перечисления.ВидыАТС.Билайн Тогда			
			Билайн_ОбработатьСобытиеЗвонка(Выборка);			
		ИначеЕсли Выборка.ВидАТС = Перечисления.ВидыАТС.Ростелеком Тогда			
			RT_ОбработатьСобытиеЗвонка(Выборка);			 
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ЖурналЗапросовВАТС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(Выборка.УникальныйИдентификатор);
		НаборЗаписей.Записать();
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЦикла; 	
	
КонецПроцедуры

#КонецОбласти
//+Никонов по задаче D4-5
#Область UIS

Процедура УведомитьОВходящемЗвонке(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт
	
	ДанныеИзJSON = СтруктураЗвонка.ДанныеИзJSON; 
	Попытка
		
		utm_source   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзJSON, "utm_source", 		    Неопределено);
		Если utm_source = "{{utm_source}}" Тогда
			utm_source = Неопределено;
		КонецЕсли;
		utm_campaign = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзJSON, "utm_campaign", 		Неопределено);
		Если utm_campaign = "{{utm_campaign}}" Тогда
			utm_campaign = Неопределено;
		КонецЕсли;
		Источник 	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИзJSON, "advertising_campaign", Неопределено);	
		Если Источник = "{{campaign_name}}" Тогда
			Источник = Неопределено;
		КонецЕсли;
		НачатьТранзакцию();
		
		Если utm_campaign = Неопределено И Источник <> Неопределено Тогда
			//Подразумевается что тут статичный колл трэкинг и соответвие канала берется в источнике.
			ИсточникСсылка 		  = Справочники.ИсточникиИнтереса.НайтиСоздатьИсточник(Источник);
			КаналСсылка           = Справочники.КаналыИнтереса.ПустаяСсылка();
			
		Иначе
			
			Источник = "Прямые переходы на сайт";
			Если utm_campaign <> Неопределено И utm_campaign <> "" Тогда
				Источник = utm_campaign;
			КонецЕсли;
			
			Канал    = "Прямые переходы на сайт";
			Если utm_source <> Неопределено И utm_source <> "" Тогда
				Канал = utm_source;
			КонецЕсли;	
			
			СтруктураМеток = Новый Структура; 	
			СтруктураМеток.Вставить("utm_campaign", Источник);
			СтруктураМеток.Вставить("utm_source",   Канал);
			
			КаналИсточникИнтереса = УПДК_Маркетинг.НайтиСоздатьКаналИсточникИнтереса(СтруктураМеток);
			КаналСсылка 		  = КаналИсточникИнтереса.КаналИнтереса;	
			ИсточникСсылка 		  = КаналИсточникИнтереса.ИсточникИнтереса;
			
		КонецЕсли;
		
		НомерТелефона = ДанныеИзJSON.contact_info.contact_phone_number;
		Телефон = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона),10); 		
		
		НаборЗаписей = РегистрыСведений.ДанныеИсточникаЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Телефон.Установить(Телефон);
		НаборЗаписей.Отбор.Приоритет.Установить(2);
		
		Запись = НаборЗаписей.Добавить(); 	
		Запись.Телефон 				= Телефон;
		Запись.ИнструментИнтереса 	= ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CoMagic;
		Запись.Приоритет 			= 2;   	
		Запись.ДатаЗвонка 			= ТекущаяДатаСеанса();
		Запись.КаналИнтереса 		= КаналСсылка;	
		Запись.ИсточникИнтереса 	= ИсточникСсылка;
		
		ДанныеЗвонкаСтруктура = Новый Структура;	
		
		Если УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("Roistat_ИспользоватьИнтеграцию") Тогда
			
			Попытка
				
				Для Каждого ТекСвойство из ДанныеИзJSON.visitor_properties Цикл
					
					Если ТекСвойство.name = "roistat_visit" Тогда				
						
						ДанныеЗвонкаСтруктура.Вставить("roistat_id", ТекСвойство.value); 
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		ЕстьДанныеКонтекстнойРекламы = Ложь;
		Если НЕ utm_campaign = Неопределено Тогда
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_campaign", 	  ДанныеИзJSON.utm_campaign);	 ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_content", 	  ДанныеИзJSON.utm_content); 	 ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_medium", 	  ДанныеИзJSON.utm_medium);	 	 ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_term", 		  ДанныеИзJSON.utm_term);	 	 ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_source", 	  ДанныеИзJSON.utm_source);   	 ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("Домен", 		  ДанныеИзJSON.referrer_domain); ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("Реферер", 		  ДанныеИзJSON.referrer);        ЕстьДанныеКонтекстнойРекламы = Истина; Исключение КонецПопытки;  	
		Иначе
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_campaign", 	  "Прямые переходы на сайт");	 ЕстьДанныеКонтекстнойРекламы = Ложь; Исключение КонецПопытки;
			Попытка ДанныеЗвонкаСтруктура.Вставить("utm_content", 	  "Прямые переходы на сайт"); 	 ЕстьДанныеКонтекстнойРекламы = Ложь; Исключение КонецПопытки;
			
		КонецЕсли;
		
		ДанныеЗвонкаСтруктура.Вставить("ЕстьДанныеКонтекстнойРекламы", ЕстьДанныеКонтекстнойРекламы);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ДанныеЗвонкаСтруктура);
		Json = ЗаписьJSON.Закрыть();
		
		Запись.ДанныеЗвонкаJSON = Json;
		
		НаборЗаписей.Записать();
		
		//Перезапишем последний звонок по этому номеру, чтобы подхватить данные звонка, что пришли позже	
		ПерезаписатьПоследнийЗвонок(Телефон);
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, "Успешно");	
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УведомитьОНачалаеРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт
	
	НовыйЗвонок = СтруктураЗвонка.НовыйЗвонок;
	ТелЗвонок = НовыйЗвонок.ПолучитьОбъект();
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
	НаборЗаписей.Отбор.hCall.Установить(1); //Транк всегда первый
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.hCall = 1; 
	НоваяЗапись.Звонок 						= ТелЗвонок.Ссылка;
	НоваяЗапись.НомерТелефона				= ТелЗвонок.АбонентКакСвязаться;
	НоваяЗапись.ДатаНачала					= ТелЗвонок.Дата;		
	НоваяЗапись.ДатаОкончания  				= ТелЗвонок.Дата;
	НоваяЗапись.Входящий					= ТелЗвонок.Входящий;
	НоваяЗапись.АТСИдентификаторЗвонка		= ТелЗвонок.АТСИдентификаторЗвонка;
	НоваяЗапись.ИдентификаторЗвонка			= ТелЗвонок.АТСИдентификаторЗвонка;		
	НоваяЗапись.CallData					= ТелЗвонок.АТСИдентификаторЗвонка;		
	
	НоваяЗапись.Ответственный				= ТелЗвонок.Ответственный;
	НоваяЗапись.АбонентКонтакт				= ТелЗвонок.АбонентКонтакт;
	НоваяЗапись.Транк						= Истина;
	
	НаборЗаписей.Записать(); 		
	
	СобытиеОбъект = Документы.CRM_Событие.СоздатьДокумент();
	
	НовоеСобытие = ИнтеграцияАТССервер.ПолучитьСтруктуруДляЗаполненияСобытия();
	
	Пользователь = СтруктураЗвонка.Ответственный;
	
	Партнер = Справочники.Партнеры.ПустаяСсылка();
	КонтаткноеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	НеобработанныйКонтакт = Истина;
	
	Контакт = СтруктураЗвонка.НовыйЗвонок.АбонентКонтакт;
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			
			Партнер = Контакт;
			//Поле КЛ не заполняем, так как звонит не физическое лицо. Необходимо выбрать из списка на форме.
			
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			КонтактноеЛицо = Контакт;
			Партнер = Справочники.ФизическиеЛица.ПолучитьПартнера(КонтактноеЛицо, Истина);
			
		КонецЕсли;				
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			НеобработанныйКонтакт = РегистрыСведений.СтатусыКлиентов.ПолучитьСтатусКлиента(Партнер) = Перечисления.СтатусыКлиента.НеобработанныйКонтакт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураЗвонка.НовыйЗвонок.Входящий Тогда
		
		Если НеобработанныйКонтакт Тогда
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ПервичныйВходящий, Пользователь);
		Иначе
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ВторичныйВходящий, Пользователь);
		КонецЕсли;	
		
		НовоеСобытие["ВходящееИсходящее"]	= Перечисления["CRM_ВходящееИсходящееСобытие"].Входящее;
		
	Иначе
		
		Если НеобработанныйКонтакт Тогда
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ПервичныйИсходящий, Пользователь);			
		Иначе
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ВторичныйИсходящий, Пользователь);			
			
		КонецЕсли;
		
		НовоеСобытие["ВходящееИсходящее"]	= Перечисления["CRM_ВходящееИсходящееСобытие"].Исходящее;
		
	КонецЕсли;
	
	НовоеСобытие["Дата"]				= СтруктураЗвонка.Дата;
	НовоеСобытие["Автор"]				= СтруктураЗвонка.Автор;
	НовоеСобытие["Ответственный"]		= СтруктураЗвонка.Ответственный;
	НовоеСобытие["Важность"]			= Перечисления["ВариантыВажностиВзаимодействия"].Обычная;
	НовоеСобытие["Тема"]				= НСтр("ru='#Создан автоматически при загрузке с виртуальной АТС'");		
	НовоеСобытие["ДокументОснование"] 	= СтруктураЗвонка.НовыйЗвонок;		
	НовоеСобытие["ВидСобытия"]			= Перечисления["CRM_ВидыСобытий"].ТелефонныйЗвонок;
	НовоеСобытие["СостояниеСобытия"]	= Справочники["CRM_СостоянияСобытий"].ВРаботе; 		
	НовоеСобытие["Место"] 				= СтруктураЗвонка.ТелефонКонтакта;		
	НовоеСобытие["Партнер"] 			= Партнер;
	НовоеСобытие["КонтактноеЛицо"] 		= КонтактноеЛицо;
	
	Если ЗначениеЗаполнено(НовоеСобытие.Партнер)
		И НовоеСобытие.Партнер.CRM_ТипОтношений = Справочники.CRM_ТипыОтношений.АгентствоНедвижимости Тогда
		
		НовоеСобытие.УПДК_АгентствоНедвижимости = НовоеСобытие.Партнер;
		НовоеСобытие.УПДК_Агент = НовоеСобытие.КонтактноеЛицо;
		НовоеСобытие.Партнер = Справочники.Партнеры.ПустаяСсылка();
		НовоеСобытие.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		НовоеСобытие.УПДК_ЗвонилАгент = Истина;
		
	КонецЕсли;
	
	СобытиеОбъект = Документы.CRM_Событие.СоздатьДокумент();
	СобытиеОбъект.Заполнить(НовоеСобытие);
	НовоеСобытие = НовоеСобытие;
	
	Попытка
		СобытиеОбъект.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Событие = СобытиеОбъект.Ссылка;
	Первичный = Истина;
	Если НЕ ТелЗвонок = Неопределено Тогда
		СтруктураЗвонка.НовыйЗвонок = ТелЗвонок;   
		
		Если ЗначениеЗаполнено(Событие) Тогда	
			Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(Событие);
		Иначе
			Сделка = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сделка) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "Основание") <> Событие Тогда
			Первичный = Ложь;
		КонецЕсли; 
		
		Если ТелЗвонок.Входящий Тогда  
			Если ИспользоватьНовыйВариант() Тогда
				Если Первичный Тогда
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриПервичномВходящемЗвонке", СтруктураЗвонка.Ответственный);
				Иначе	
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВторичномВходящемЗвонке", СтруктураЗвонка.Ответственный);
				КонецЕсли;
			Иначе	
				НаименованиеДействия		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВходящемЗвонке", СтруктураЗвонка.Ответственный);
			КонецЕсли;				
		Иначе	
			НаименованиеДействия			= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриИсходящемЗвонке", СтруктураЗвонка.Ответственный);	
		КонецЕсли;
		ОткрыватьУведомлениеОЗвонке		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпОткрыватьУведомлениеОЗвонке", СтруктураЗвонка.Ответственный);
		
		Если НЕ (НаименованиеДействия = "Открыть событие" Или НаименованиеДействия = "Открыть сделку" или ОткрыватьУведомлениеОЗвонке) Тогда
			Возврат;
		КонецЕсли;  
		
		Получатель = Пользователь;
		ИнтеграцияАТССервер.ОтправитьДанныеПользователюНаКлиент(
		"НачалоРазговора",
		Получатель,
		СтруктураЗвонка.ТелефонКонтакта,
		ТелЗвонок.АбонентПредставление,
		СтруктураЗвонка.Дата,
		Событие,
		Сделка,
		СтруктураЗвонка.ИдентификаторЗвонка,
		НаименованиеДействия,
		ОткрыватьУведомлениеОЗвонке);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, Событие); 
	КонецЕсли;
	
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("Success");
	
	
КонецПроцедуры 

Процедура УведомитьОбОкончанииРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|ГДЕ
	|	ТелефонныйЗвонок.АТСИдентификаторЗвонка = &АТСИдентификаторЗвонка";
	
	Запрос.УстановитьПараметр("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("АТСИдентификаторЗвонка %1 не привязан к записи Документ.ТелефонныйЗвонок", СтруктураЗвонка.ИдентификаторЗвонка));
		Возврат;
	КонецЕсли;
	
	НайденныйЗвонок = ВыборкаДетальныеЗаписи.Ссылка;
	
	СтруктураЗвонка.Ответственный = НайденныйЗвонок.Ответственный;
	СтруктураЗвонка.ТелефонКонтакта = НайденныйЗвонок.АбонентКакСвязаться;
	
	
	//Проверяем Максимальное значение hCall чтобы добавить новую запись
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	сфпИсторияЗвонков.hCall КАК hCall
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	|ГДЕ
	|	сфпИсторияЗвонков.Звонок = &Звонок
	|
	|УПОРЯДОЧИТЬ ПО
	|	hCall УБЫВ";
	
	Запрос.УстановитьПараметр("Звонок", НайденныйЗвонок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
		hCall = ВыборкаДетальныеЗаписи.hCall + 1;
	Иначе
		hCall = 2; 			
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(НайденныйЗвонок);
	НаборЗаписей.Отбор.hCall.Установить(hCall); //Транк всегда первый
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.hCall = hCall;
	НоваяЗапись.Звонок 			= НайденныйЗвонок;
	НоваяЗапись.НомерТелефона	= НайденныйЗвонок.АбонентКакСвязаться;
	НоваяЗапись.ДатаНачала		= НайденныйЗвонок.Дата;
	НоваяЗапись.ДатаОтвета		= НайденныйЗвонок.Дата;		
	НоваяЗапись.ДатаОкончания	= СтруктураЗвонка.Дата;		
	
	НоваяЗапись.Входящий					= НайденныйЗвонок.Входящий;
	НоваяЗапись.АТСИдентификаторЗвонка		= НайденныйЗвонок.АТСИдентификаторЗвонка;
	НоваяЗапись.ИдентификаторЗаписи			= ""; //Оставляем пустым, потом заполнится
	
	НоваяЗапись.Ответственный				= НайденныйЗвонок.Ответственный;
	НоваяЗапись.АбонентКонтакт				= НайденныйЗвонок.АбонентКонтакт;
	
	НаборЗаписей.Записать(); 
	
	//Проверяем Максимальное значение hCall чтобы добавить новую запись
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	сфпИсторияЗвонков.hCall КАК hCall
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	|ГДЕ
	|	сфпИсторияЗвонков.Звонок = &Звонок
	|
	|УПОРЯДОЧИТЬ ПО
	|	hCall УБЫВ";
	
	Запрос.УстановитьПараметр("Звонок", НайденныйЗвонок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
		
		hCall = ВыборкаДетальныеЗаписи.hCall;
		
		НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Звонок.Установить(НайденныйЗвонок);
		НаборЗаписей.Отбор.hCall.Установить(hCall); //Транк всегда первый
		
		НаборЗаписей.Прочитать();
		
		Для Каждого ТекЗапись из НаборЗаписей Цикл
			
			ТекЗапись.ДатаОкончания = СтруктураЗвонка.Дата;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(); 
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	CRM_Событие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Событие КАК CRM_Событие
	|ГДЕ
	|	CRM_Событие.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", НайденныйЗвонок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("ДокументОснование %1 не привязан к событию", НайденныйЗвонок));
		Возврат;
	КонецЕсли;
	
	Событие = Выборка.Ссылка;
	
	Если ЗначениеЗаполнено(Событие) Тогда
		
		Дата = Событие.Дата;		
		
		ТипОповещения = "Завершен";	
		
		Получатель = СтруктураЗвонка.Ответственный;
		
		ИнтеграцияАТССервер.ОтправитьДанныеПользователюНаКлиент(
		ТипОповещения,
		Получатель,
		СтруктураЗвонка.ТелефонКонтакта,
		"",
		Дата,
		Событие,
		СтруктураЗвонка.ИдентификаторЗвонка);
		
	КонецЕсли;
	
	ТелЗвонок = НайденныйЗвонок.ПолучитьОбъект();
	//ТелЗвонок.сфпИдентификаторЗаписи		= СтруктураЗвонка.СсылкаНаЗапись;
	ТелЗвонок.сфпДлительностьЗвонка			= СтруктураЗвонка.Дата - ТелЗвонок.Дата;
	
	Попытка
		ТелЗвонок.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Обработка звонка с виртуальной АТС", УровеньЖурналаРегистрации.Ошибка);
		
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
	НаборЗаписей.Отбор.hCall.Установить(1); //Транк всегда первый
	
	НаборЗаписей.Прочитать();
	
	Для Каждого НоваяЗапись из НаборЗаписей Цикл		
		НоваяЗапись.ДатаОкончания				= СтруктураЗвонка.Дата;		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("ДокументОснование %1 не привязан к событию", НайденныйЗвонок)); 
	
КонецПроцедуры

Процедура УведомитьОПропущенномЗвонке(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт
	
	КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПропущенныеЗвонки;
	КаналИсточника = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CoMagic;
	ПроектСобытия = Справочники.Проекты.НайтиПоНаименованию("Пропущенный", Истина);
	
	ДанныеИзJSON = СтруктураЗвонка.ДанныеИзJSON; 
	
	СтруктураЗаявки = ДанныеИзJSON;
	
	JsonОтвет = Новый ЗаписьJSON;
	JsonОтвет.УстановитьСтроку();
	
	phone = СтруктураЗаявки.contact_info.contact_phone_number;
	name = "Неопределенный контакт";
	
	Если ПустаяСтрока(phone) Тогда
		
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-Type", " application/json");
		ЗаписатьJSON(JsonОтвет, Новый Структура("error", "phone is empty"));
		Ответ.УстановитьТелоИзСтроки(JsonОтвет.Закрыть());	
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 400, JsonОтвет);
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураЗаявки.Свойство("utm_campaign") Тогда
		utm_campaign = СтруктураЗаявки.utm_campaign;
	Иначе
		utm_campaign = "Прямые переходы на сайт";	
	КонецЕсли;
	
	НомерТелефона = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(phone), 10); 
	
	Попытка
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
		|ГДЕ
		|	CRM_ТочкиМаршрутов.Владелец = &Владелец
		|	И CRM_ТочкиМаршрутов.Вид = &Вид
		|	И НЕ CRM_ТочкиМаршрутов.НеИспользуется
		|	И НЕ CRM_ТочкиМаршрутов.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Вид", Перечисления.CRM_ВидыТочекМаршрута.Старт);
		Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТочкаСтарта = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
		
		БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
		
		БизнесПроцесс.КартаМаршрута = КартаМаршрута;
		БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
		БизнесПроцесс.Наименование = "(UIS) Потерянный звонок";
		БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация;  
		БизнесПроцесс.Дата = ТекущаяДатаСеанса();
		БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
		БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
		БизнесПроцесс.Автор = Справочники.Пользователи.Система;
		БизнесПроцесс.Телефон = Справочники.ШаблоныНомеровТелефонов.ОбработатьНомерТелефонаПоМаске(НомерТелефона);															
		
		ЗаполнитьЗначенияСвойств(БизнесПроцесс, УПДК_ФизическиеЛица.ПоискКлиентаПоНомеруТелефона(НомерТелефона));
		
		Если Не ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда                           
			
			ФИО = name;
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФИО, " ");
			
			КоличествоСлов = МассивПодстрок.Количество();
			
			Фамилия = "";
			Имя = "";
			Отчество = "";
			
			Если КоличествоСлов > 0 Тогда		
				Фамилия = МассивПодстрок[0]; 		
			КонецЕсли;
			
			Если КоличествоСлов > 1 Тогда		
				Имя = МассивПодстрок[1]; 		
			КонецЕсли;
			
			Если КоличествоСлов > 2 Тогда
				
				Отчество = "";
				
				Для Счетчик = 2 по КоличествоСлов-1 Цикл
					Отчество = Отчество + " " + МассивПодстрок[Счетчик];
				КонецЦикла;
				
				Отчество = СокрЛП(Отчество);
				
			КонецЕсли;
			
			НовФизлицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			УправлениеКонтактнойИнформацией.ДобавитьНовыйТелефон(НовФизлицо, НомерТелефона);
			
			НовФизлицо.Фамилия = Фамилия;
			НовФизлицо.Имя = Имя;
			НовФизлицо.Отчество = Отчество; 	
			НовФизлицо.Наименование = ФИО;
			НовФизлицо.Записать(); 
			
			НовКонтакт = Справочники.Партнеры.СоздатьЭлемент();
			НовКонтакт.ДатаРегистрации = ТекущаяДатаСеанса();
			НовКонтакт.Наименование = ФИО;
			НовКонтакт.CRM_ФизЛицо = Истина;
			НовКонтакт.ВидПартнера = Перечисления.ВидПартнера.ЧастноеЛицо;				
			НовКонтакт.ОсновноеКонтактноеЛицо = НовФизлицо.Ссылка;
			
			НовКЛ = НовКонтакт.КонтактныеЛица.Добавить();
			НовКл.ФизЛицо = НовФизлицо.Ссылка;
			НовКл.ПравоПодписи = Истина;
			
			НовКонтакт.Записать();
			
			РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(НовКонтакт.Ссылка, Перечисления.СтатусыКлиента.Контакт);
			
			
			БизнесПроцесс.Партнер = НовКонтакт.Ссылка;
			БизнесПроцесс.КонтактноеЛицо = НовФизлицо.Ссылка;
			
		КонецЕсли;
		
		БизнесПроцесс.Основание = БизнесПроцесс.Партнер;
		
		БизнесПроцесс.Записать();
		БизнесПроцесс.Старт();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();  
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Комментарий = "(UIS) Потерянный звонок";
			
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			ЗадачаОбъект.Описание = Комментарий;
			
			//Создаем Событие
			СвязанноеСобытие = Документы.CRM_Событие.СоздатьДокумент();
			
			ДанныеЗаполнения = Новый Структура;
			
			ДанныеЗаполнения.Вставить("Партнер", 			БизнесПроцесс.Партнер);
			ДанныеЗаполнения.Вставить("КонтактноеЛицо", 	БизнесПроцесс.КонтактноеЛицо);
			ДанныеЗаполнения.Вставить("Предмет", 			БизнесПроцесс.ОбъектНедвижимости);
			ДанныеЗаполнения.Вставить("Проект", 			ПроектСобытия);
			ДанныеЗаполнения.Вставить("Автор", 				Справочники.Пользователи.Система);
			ДанныеЗаполнения.Вставить("Ответственный", 		Справочники.Пользователи.Система);
			ДанныеЗаполнения.Вставить("Место", 				БизнесПроцесс.Телефон);
			
			СвязанноеСобытие.Заполнить(ДанныеЗаполнения);
			
			СвязанноеСобытие.СвязаннаяЗадача = ЗадачаОбъект.Ссылка; 		
			СвязанноеСобытие.Описание = ЗадачаОбъект.Описание; 		
			СвязанноеСобытие.Тема = "(UIS) Потерянный звонок"; 		
			
			СвязанноеСобытие.Записать();
			
			ИсточникСсылка = Справочники.ИсточникиИнтереса.НайтиСоздатьИсточник(utm_campaign);  						
			
			НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сделка.Установить(СвязанноеСобытие.Ссылка);			
			
			Запись = НаборЗаписей.Добавить();
			Запись.Период 				   = ТекущаяДатаСеанса();
			Запись.КаналПервичногоИнтереса = КаналИсточника;
			Запись.ИсточникИнтереса 	   = ИсточникСсылка;		
			Запись.Партнер 				   = СвязанноеСобытие.Партнер;
			Запись.Сделка  				   = СвязанноеСобытие.Ссылка;		
			
			НаборЗаписей.Записать();
			
			
			ЗадачаОбъект.СвязанноеСобытие = СвязанноеСобытие.Ссылка; 
			ЗадачаОбъект.Предмет 		= СвязанноеСобытие.Ссылка; 
			
			ЗадачаОбъект.Записать();
			
			БизнесПроцесс.Предмет 		= СвязанноеСобытие.Ссылка;
			БизнесПроцесс.Записать();
			
		КонецЦикла; 
		
		ИсточникСсылка = Справочники.ИсточникиИнтереса.НайтиСоздатьИсточник(utm_campaign);  						
		
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сделка.Установить(БизнесПроцесс.Ссылка);			
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ТекущаяДатаСеанса();
		Запись.КаналПервичногоИнтереса = КаналИсточника;
		Запись.ИсточникИнтереса = ИсточникСсылка;		
		Запись.Партнер = БизнесПроцесс.Партнер;
		Запись.Сделка = БизнесПроцесс.Ссылка;		
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();  	
		
	Исключение
		
		Ответ = Новый HTTPСервисОтвет(501);
		Ответ.Заголовки.Вставить("Content-Type", " application/json");
		ЗаписатьJSON(JsonОтвет, Новый Структура("error", ОписаниеОшибки()));
		Ответ.УстановитьТелоИзСтроки(JsonОтвет.Закрыть());	
		Ответ.Причина = ОписаниеОшибки();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 501, JsonОтвет);
		Возврат; 
		
	КонецПопытки; 
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("Success");
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), Ответ.КодСостояния, БизнесПроцесс.Ссылка); 
	
КонецПроцедуры

Процедура УведомитьОЗаписиРазговора(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|ГДЕ
	|	ТелефонныйЗвонок.АТСИдентификаторЗвонка = &АТСИдентификаторЗвонка";
	
	Запрос.УстановитьПараметр("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, СтрШаблон("АТСИдентификаторЗвонка %1 не соответвствует текущему документу звонка"));
		Возврат; 
	КонецЕсли;
	
	НайденныйЗвонок = ВыборкаДетальныеЗаписи.Ссылка;
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(НайденныйЗвонок);
	НаборЗаписей.Прочитать();
	
	Для Каждого ТекЗапись из НаборЗаписей Цикл	
		ТеКЗапись.ИдентификаторЗаписи = СтруктураЗвонка.ИдентификаторЗаписи;	
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УведомитьОбОжиданиеОтвета(Ответ, СтруктураЗвонка, ЗаписьЖурнала) Экспорт 
	
	НовыйЗвонок = СтруктураЗвонка.НовыйЗвонок;
	ТелЗвонок = НовыйЗвонок.ПолучитьОбъект();
	
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
	НаборЗаписей.Отбор.hCall.Установить(1); //Транк всегда первый
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.hCall = 1; 
	НоваяЗапись.Звонок 						= ТелЗвонок.Ссылка;
	НоваяЗапись.НомерТелефона				= ТелЗвонок.АбонентКакСвязаться;
	НоваяЗапись.ДатаНачала					= ТелЗвонок.Дата;		
	НоваяЗапись.ДатаОкончания  				= ТелЗвонок.Дата;
	НоваяЗапись.Входящий					= ТелЗвонок.Входящий;
	НоваяЗапись.АТСИдентификаторЗвонка		= ТелЗвонок.АТСИдентификаторЗвонка;
	НоваяЗапись.ИдентификаторЗаписи			= ТелЗвонок.АТСИдентификаторЗвонка;		
	НоваяЗапись.CallData					= ТелЗвонок.АТСИдентификаторЗвонка;		
	НоваяЗапись.Ответственный				= ТелЗвонок.Ответственный;
	НоваяЗапись.АбонентКонтакт				= ТелЗвонок.АбонентКонтакт;
	НоваяЗапись.Транк						= Истина;
	НаборЗаписей.Записать();
	
	Пользователь = СтруктураЗвонка.Ответственный;
	Событие = Неопределено;
	ТелЗвонок = ТелЗвонок.Ссылка;
	Первичный = Истина;
	Если НЕ ТелЗвонок = Неопределено Тогда
		СтруктураЗвонка.НовыйЗвонок = ТелЗвонок;   
		Сделка = СоздатьПолучитьСделку(ТелЗвонок);
		
		Если ЗначениеЗаполнено(Сделка) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "Основание") <> Событие Тогда
			Первичный = Ложь;
		КонецЕсли; 
		
		Если ТелЗвонок.Входящий Тогда  
			Если ИспользоватьНовыйВариант() Тогда
				Если Первичный Тогда
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриПервичномВходящемЗвонке", СтруктураЗвонка.Ответственный);
				Иначе	
					НаименованиеДействия	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВторичномВходящемЗвонке", СтруктураЗвонка.Ответственный);
				КонецЕсли;
			Иначе	
				НаименованиеДействия		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВходящемЗвонке", СтруктураЗвонка.Ответственный);
			КонецЕсли;				
		Иначе	
			НаименованиеДействия			= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриИсходящемЗвонке", СтруктураЗвонка.Ответственный);	
		КонецЕсли;
		ОткрыватьУведомлениеОЗвонке		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпОткрыватьУведомлениеОЗвонке", СтруктураЗвонка.Ответственный);
		
		Если НЕ (НаименованиеДействия = "Открыть событие" Или НаименованиеДействия = "Открыть сделку" или ОткрыватьУведомлениеОЗвонке) Тогда
			Возврат;
		КонецЕсли;  
		
		Получатель = Пользователь;
		ИнтеграцияАТССервер.ОтправитьДанныеПользователюНаКлиент(
		"ВходящийНачало",
		Получатель,
		СтруктураЗвонка.ТелефонКонтакта,
		ТелЗвонок.АбонентПредставление,
		СтруктураЗвонка.Дата,
		Событие,
		Сделка,
		СтруктураЗвонка.ИдентификаторЗвонка,
		НаименованиеДействия,
		ОткрыватьУведомлениеОЗвонке);
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, Событие); 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеДоступаUIS(Адрес, ТокенАТС, ПривязатьЗвонкиКлиентовМенеджеру) Экспорт   
	
	ДанныеДоступа = Новый Структура("Адрес, ТокенАТС, ПривязатьЗвонкиКлиентовМенеджеру", Адрес, ТокенАТС, ПривязатьЗвонкиКлиентовМенеджеру);
	Константы.ДанныеДоступаКUIS.Установить(Новый ХранилищеЗначения(ДанныеДоступа));   
	
КонецПроцедуры //ЗаписатьДанныеДоступа

Функция ПолучитьДанныеДоступаUIS() Экспорт
	
	ДанныеДоступа = Константы.ДанныеДоступаКUIS.Получить().Получить();
	
	Если ДанныеДоступа = Неопределено Тогда
		ДанныеДоступа = Новый Структура("Адрес, ТокенАТС, ПривязатьЗвонкиКлиентовМенеджеру", Новый УникальныйИдентификатор());
	КонецЕсли;
	Возврат ДанныеДоступа;
	
	
КонецФункции // ()

// значение  IdЗапроса (целое число) не привязано к базе данных, оно нужно для фиксирования запроса 
//к API UIS/comagic в журнале "Запросы к API"
Функция ПолучитьДанныеИзUIS(Метод, IdЗапроса, СтрукутраАбонента = Неопределено) Экспорт
	
	ДанныеДоступа = ПолучитьДанныеДоступаUIS();
	Путь = ДанныеДоступа.Адрес;
	ТокенАТС = ДанныеДоступа.ТокенАТС;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Путь);
	Сервер = СтруктураURI.Хост;
	ПутьНаСервере = СтруктураURI.ПутьНаСервере;	
	
	Попытка			
		
		Структура = Новый Структура;
		Структура.Вставить("jsonrpc", "2.0");
		Структура.Вставить("id", IdЗапроса);  //
		Структура.Вставить("method", Метод);
		Структура.Вставить("params", Новый Структура("access_token", ТокенАТС));
		
		Если Метод = "create.contacts" Тогда
			СтруктураПараметров = Структура.params;
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров,СтрукутраАбонента,Истина);
		КонецЕсли;
		
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		Json = Запись.Закрыть();
		
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()); 
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl);
		HTTPЗапрос = Новый HTTPЗапрос(ПутьНаСервере);
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
		
		HTTPЗапрос.УстановитьТелоИзСтроки(Json); 	
		
		мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Ответ = мРезультат.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON	= Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(Ответ); 		
		СтруктураЗапроса = ПрочитатьJSON(ЧтениеJSON);		
		ЧтениеJSON.Закрыть();
		
		Возврат СтруктураЗапроса; 
		
		
	Исключение
		
		ОписаниеОшибки = СтрШаблон("Не удалось выполнить HTTP-запрос: %1", ОписаниеОшибки());		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		
	КонецПопытки;
	
	
КонецФункции // ()

Процедура ВыгрузитьПривязанныхКлиентовUIS() Экспорт 
	Метод = "create.contacts";
	IdЗапроса = 667;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДоступаАТС.ЛогинАбонентаВиртуальнойАТС КАК personal_manager_id,
	|	Партнеры.ОсновноеКонтактноеЛицо.Фамилия КАК last_name,
	|	Партнеры.ОсновноеКонтактноеЛицо.Имя КАК first_name,
	|	Партнеры.ОсновноеКонтактноеЛицо.Отчество КАК patronymic,
	|	Партнеры.ОсновноеКонтактноеЛицо.ТелефонСтрокой КАК phone_numbers,
	|	Партнеры.ОсновноеКонтактноеЛицо.EmailСтрокой КАК emails,
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ДанныеДоступаАТС КАК ДанныеДоступаАТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО ДанныеДоступаАТС.Пользователь = Партнеры.ОсновнойМенеджер.Ссылка
	|ГДЕ
	|	ДанныеДоступаАТС.ВидАТС = &ВидАТС";
	
	ВидАТС = Перечисления.ВидыАТС.UIS;
	Запрос.УстановитьПараметр("ВидАТС", ВидАТС);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(); 
	
	
	Пока Выборка.Следующий() Цикл
		СтрукутраАбонента = Новый Структура;
		
		НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(Выборка.phone_numbers);
		Если ЗначениеЗаполнено(НомерТелефона) Тогда
			
			
			Если ЗначениеЗаполнено(Выборка.last_name) Тогда
				СтрукутраАбонента.Вставить("last_name",Выборка.last_name);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.first_name) Тогда
				СтрукутраАбонента.Вставить("first_name",Выборка.first_name);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.patronymic) Тогда
				СтрукутраАбонента.Вставить("patronymic",Выборка.patronymic);
			КонецЕсли;
			
			МассивТелефона = Новый Массив;
			МассивТелефона.Добавить(НомерТелефона);
			СтрукутраАбонента.Вставить("phone_numbers",МассивТелефона);
			
			Если ЗначениеЗаполнено(Выборка.emails) Тогда
				МаасивПочты = Новый Массив; 
				МаасивПочты.Добавить(Выборка.emails);
				СтрукутраАбонента.Вставить("emails",МаасивПочты); 
			КонецЕсли;
			
			СтрукутраАбонента.Вставить("personal_manager_id",Число(СтрЗаменить(Выборка.personal_manager_id,Символы.НПП,""))); 
			СтукутураЗапроса =  ПолучитьДанныеИзUIS(Метод, IdЗапроса, СтрукутраАбонента);
		Иначе
			
			ОписаниеОшибки = СтрШаблон("У клиента %1 %2 %3 не заполнен номер мобильного телефона",Выборка.last_name, Выборка.first_name, Выборка.patronymic);		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,Выборка.Ссылка,,,);
			
			
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	
	
	
	
КонецПроцедуры

#КонецОбласти
//-Никонов
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИспользоватьНовыйВариант()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыИспользованияНовыхФорм.ОткрыватьСделкуВАТС КАК ОткрыватьСделкуВАТС
	|ИЗ
	|	РегистрСведений.ПараметрыИспользованияНовыхФорм КАК ПараметрыИспользованияНовыхФорм";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Если ВыборкаДетальныеЗаписи.ОткрыватьСделкуВАТС Тогда    
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции 

// Функция выполняет HTTP-запрос
//
// Параметры:
//  Адрес			 	- Строка - URL (вместе с параметрами)
//  ТелоСтрокой  		- Строка - передаваемые данные (например, JSON-строка)
//  HTTPМетод			- Строка - имя HTTP-метода (POST/GET/...)
//  РасширениеФайла		- Строка - желаемое расширение файла результата (.tmp по умолчанию)
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//	 КодСостояния - Код состояния HTTP-ответа
//	 ФайлРезультата - Строка - Расположение временного файла с результатом запроса 
//   Ошибка - Строка - Описание ошибки (если не удалось выполнить запрос)
//
Функция ВыполнитьЗапрос(АдресURL, HTTPМетод = "GET", ТелоСтрокой = "", РасширениеФайла = Неопределено)  
	
	Результат = Новый Структура("КодСостояния, ФайлРезультата, Ошибка");
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресURL);
	Сервер = СтруктураURI.Хост;
	ПутьНаСервере = СтруктураURI.ПутьНаСервере;	
	
	HTTPСоединение =  Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки = Новый Соответствие; 
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=utf-8"); // Формат, в котором передаем данные запросом
	//Заголовки.Вставить("Content-Type", "application/json");
	
	HTTPЗапрос	= Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
	Если ЗначениеЗаполнено(ТелоСтрокой) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоСтрокой, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);		
	КонецЕсли;
	
	ФайлРезультата = ПолучитьИмяВременногоФайла(РасширениеФайла);
	Попытка			
		Ответ = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос, ФайлРезультата);	
		
		КодСостояния = Ответ.КодСостояния;
		
		Результат.КодСостояния = КодСостояния; 
		
		Если КодСостояния >= 200 И КодСостояния <=299 Тогда
			Результат.ФайлРезультата = ФайлРезультата;		
		Иначе
			Результат.Ошибка = ОписаниеОшибкиПоКодуСостояния(КодСостояния);
			УдалитьФайлы(ФайлРезультата);
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки = СтрШаблон("Не удалось выполнить HTTP-запрос: %1", ОписаниеОшибки());		
		
		Результат.Ошибка = ОписаниеОшибки;	
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает описание ошибки по коду состояния HTTP-ответа
//
// Параметры:
//  КодСостояния - Число 
// 
// Возвращаемое значение:
//  Строка - описание ошибки
//
Функция ОписаниеОшибкиПоКодуСостояния(КодСостояния)
	
	Ошибка = "";
	
	Если КодСостояния = 400 Тогда
		Ошибка = НСтр("ru = 'Переданы некорректные параметры. Код состояния: '");
	ИначеЕсли КодСостояния = 401 Тогда
		Ошибка = НСтр("ru = 'Передан неверный ключ (token). Код состояния: '");
	ИначеЕсли КодСостояния >= 400 И КодСостояния <= 499 Тогда
		Ошибка = НСтр("ru = 'Неизвестная ошибка клиента. Код состояния: '");
	ИначеЕсли КодСостояния >= 500 И КодСостояния <= 599 Тогда
		Ошибка = НСтр("ru = 'Неизвестная ошибка сервера. Код состояния: '");
	Иначе
		Ошибка = НСтр("ru = 'Неизвестная ошибка. Код состояния: '");
	КонецЕсли;
	
	Ошибка = Ошибка + КодСостояния;
	
	Возврат Ошибка;
	
КонецФункции // ОписаниеОшибкиПоКодуСостояния(КодСостояния)

Функция ПолучитьЗначениеИзОтветаJSON(ФайлРезультата, ПрочитатьВСоответствие = Ложь) 
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.ОткрытьФайл(ФайлРезультата);
	Значение = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	ЧтениеJSON.Закрыть();
	УдалитьФайлы(ФайлРезультата);
	
	Возврат Значение;
	
КонецФункции

// Функция преобразует строковое представление даты с сервера АТС в тип "Дата"
//
// Параметры:
//  Дата - Строка - строковое представление даты с сервера АТС (например, 2018-10-13T15:56:42+03:00)
// 
// Возвращаемое значение:
//  Дата 
//
Функция ПолучитьДатуИзUTC(Дата)
	
	// Берём часть строки до указания корректировки часового пояса
	Разделитель = СтрНайти(Дата, "+");
	
	сДатаВремя = Лев(Дата, 15);				
	
	//Убираем все символы кроме цифр
	СтрокаЦифр = "0123456789";
	ДатаВремяТолькоЦифры = "";
	ДлинаСтроки = СтрДлина(сДатаВремя);
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		ТекущийСимвол = Сред(сДатаВремя, НомерСимвола, 1);
		Если Найти(СтрокаЦифр, ТекущийСимвол) > 0 Тогда
			ДатаВремяТолькоЦифры = ДатаВремяТолькоЦифры + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	ДатаНулевойПояс = Дата(ДатаВремяТолькоЦифры);
	
	// так как время приходит с корректировкой часового пояса, сперва приведём к универсальной дате (нулевой часовой пояс),
	// затем приведём к часовому поясу базы
	Если Разделитель <> 0 Тогда
		Корректировка = Прав(Дата, 6);
		Часы = Число(Лев(Корректировка, 3)); // часы со знаком
		Минуты = Число(Прав(Корректировка, 2));
		Секунды = Часы * 60 * 60 + Минуты * 60;
		
		ДатаНулевойПояс = ДатаНулевойПояс - Секунды;
	КонецЕсли;
	
	Результат = МестноеВремя(ДатаНулевойПояс, ЧасовойПояс()); 
	
	Возврат Результат;
	
КонецФункции // ПолучитьДатуИзUTC(Дата)

Функция ПолучитьСтруктуруДляЗаполненияЗвонка()
	
	Результат = Новый Структура;
	Результат.Вставить("Дата");
	Результат.Вставить("ВходящийЗвонок");
	Результат.Вставить("ТелефонКонтакта");
	Результат.Вставить("Логин");	
	Результат.Вставить("ТелефонСотрудника");
	Результат.Вставить("Ответственный");
	Результат.Вставить("ИдентификаторЗвонка");
	Результат.Вставить("СсылкаНаЗапись");
	Результат.Вставить("Длительность", 0);
	Результат.Вставить("СостояниеЗвонка");
	Результат.Вставить("НовыйЗвонок");
	Результат.Вставить("Автор");
	Результат.Вставить("ВнешнийНомер");
	
	Возврат Результат;
	
КонецФункции // ПолучитьПустуюСтруктуруЗвонка()

// Функция создает документ "Телефонный звонок"
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Функция СоздатьИзменитьТелефонныйЗвонок(ВидАТС, СтруктураЗвонка, ЗаписьЖурнала)
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ТелефонныйЗвонок");
	ЭлементБлокировки.УстановитьЗначение("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	Блокировка.Заблокировать(); 
	
	НайденныйЗвонок = Документы.ТелефонныйЗвонок.НайтиПоРеквизиту("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	Если ЗначениеЗаполнено(НайденныйЗвонок) Тогда	 
		ТелЗвонок = НайденныйЗвонок.ПолучитьОбъект();
	Иначе
		ТелЗвонок= Документы.ТелефонныйЗвонок.СоздатьДокумент();
	КонецЕсли;
	
	ТелЗвонок.Дата							= СтруктураЗвонка.Дата;
	ТелЗвонок.Входящий						= ?(ЗначениеЗаполнено(НайденныйЗвонок), 
	НайденныйЗвонок.Входящий, 
	СтруктураЗвонка.ВходящийЗвонок);
	
	ТелЗвонок.АбонентКакСвязаться			= Прав(СтруктураЗвонка.ТелефонКонтакта, 10); 
	ТелЗвонок.Автор							= СтруктураЗвонка.Автор;
	ТелЗвонок.Важность						= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	ТелЗвонок.АТСИдентификаторЗвонка		= СтруктураЗвонка.ИдентификаторЗвонка;
	ТелЗвонок.сфпИдентификаторЗаписи		= СтруктураЗвонка.СсылкаНаЗапись;
	ТелЗвонок.сфпДлительностьЗвонка			= СтруктураЗвонка.Длительность;
	ТелЗвонок.Тема							= сфпСофтФонПроСервер.сфпЗаполнитьТемуТелефонногоЗвонка(ТелЗвонок.Входящий, ТелЗвонок.Дата);	
	ТелЗвонок.сфпСостояниеЗвонка			= СтруктураЗвонка.СостояниеЗвонка; 	
	ТелЗвонок.Описание 						= НСтр("Звонок загружен из виртуальной АТС " + Строка(ВидАТС));
	
	// определяем ответственного (если ещё не заполнен)
	
	Если Не ЗначениеЗаполнено(СтруктураЗвонка.Логин) Тогда 
		ОтменитьТранзакцию();
		Возврат Документы.ТелефонныйЗвонок.ПустаяСсылка();
	КонецЕсли; 
	
	ТелЗвонок.Ответственный = СтруктураЗвонка.Ответственный; 	
	Если Не ЗначениеЗаполнено(ТелЗвонок.Ответственный) Тогда 
		ОтменитьТранзакцию();  
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 403, СтрШаблон("При загрузке звонка не удалось сопоставить пользователя с оператором АТС. Логин: %1; запись: %2", 
		СтруктураЗвонка.Логин, СтруктураЗвонка.СсылкаНаЗапись));	
		Возврат Документы.ТелефонныйЗвонок.ПустаяСсылка();			
	КонецЕсли;
	
	// определяем звонившего
	МассивНайденных = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(СтруктураЗвонка.ТелефонКонтакта);
	Если МассивНайденных.Количество() <> 0 Тогда	
		Контакт = МассивНайденных[0];		
		ТелЗвонок.АбонентКонтакт = Контакт;
		ТелЗвонок.АбонентПредставление	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
		
		Если Найти(Строка(Контакт), НСтр("ru = '<Объект не найден>'")) > 0 Тогда
			ТелЗвонок.Комментарий	= Строка(ТипЗнч(Контакт)) + ": "
			+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт) + НСтр("ru = ', номер: '") 
			+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(Контакт, СтруктураЗвонка.ТелефонКонтакта)
			+ Символы.ПС + НСтр("ru='Данному абоненту в доступе отказано.'")
			+ НСтр("ru=' Для разрешения работы с абонентом обратитесь к руководителю или администратору.'");
		КонецЕсли;	
	Иначе			
		ТелЗвонок.АбонентПредставление	= НСтр("ru='!!!Не определен!!!'");	
	КонецЕсли;	
	
	Если ТелЗвонок.Входящий 
		И ЗначениеЗаполнено(СтруктураЗвонка.ВнешнийНомер) 
		И УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ИспользоватьCallТрекинг") Тогда
		
		СтруктураИнтереса = сфпСофтФонПроСерверПереопределяемый.ПолучитьИсточникПервичногоИнтересаПоCallТрекингу(Прав(СтруктураЗвонка.ВнешнийНомер, 10));
		
		Если СтруктураИнтереса <> Неопределено Тогда
			
			НаборЗаписей = РегистрыСведений.ДанныеИсточникаЗвонков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Телефон.Установить(ТелЗвонок.АбонентКакСвязаться);
			НаборЗаписей.Отбор.Приоритет.Установить(0);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Телефон = ТелЗвонок.АбонентКакСвязаться;
			Запись.Приоритет = 0;
			Запись.ДатаЗвонка = ТелЗвонок.Дата;
			Запись.ИнструментИнтереса = СтруктураИнтереса.ИнструментИнтереса;
			Запись.КаналИнтереса      = СтруктураИнтереса.КаналИнтереса;
			Запись.ИсточникИнтереса   = СтруктураИнтереса.ИсточникИнтереса;
			
			НаборЗаписей.Записать();
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ТелЗвонок.ВидАТС = ВидАТС;
	
	Попытка
		ТелЗвонок.Записать();
	Исключение
		
		ОтменитьТранзакцию();
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 400, СтрШаблон("Не удалось записать телефонный звонок. Логин: %1; запись: %2, по причине: %3", 
		СтруктураЗвонка.Логин, СтруктураЗвонка.СсылкаНаЗапись, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));	
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	// Делаем запись в регистре истории звонков (удаляя все предыдущие)
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Звонок 						= ТелЗвонок.Ссылка;
	НоваяЗапись.НомерТелефона				= ТелЗвонок.АбонентКакСвязаться;
	НоваяЗапись.ДатаНачала					= ТелЗвонок.Дата; 		
	НоваяЗапись.ДатаОкончания				= ТелЗвонок.Дата + ТелЗвонок.сфпДлительностьЗвонка;	
	НоваяЗапись.ДатаОтвета					= Неопределено;
	НоваяЗапись.Входящий					= ТелЗвонок.Входящий;
	НоваяЗапись.ВнутреннийНомер				= Прав(СтруктураЗвонка.ТелефонСотрудника, 10);
	НоваяЗапись.ИдентификаторЗаписи			= ТелЗвонок.сфпИдентификаторЗаписи;
	НоваяЗапись.АТСИдентификаторЗвонка		= ТелЗвонок.АТСИдентификаторЗвонка;
	НоваяЗапись.Ответственный				= ТелЗвонок.Ответственный;
	НоваяЗапись.АбонентКонтакт				= ТелЗвонок.АбонентКонтакт;
	НоваяЗапись.ВнешнийНомер				= Прав(СтруктураЗвонка.ВнешнийНомер, 10);
	НоваяЗапись.Транк						= Истина;
	НоваяЗапись.hCall 						= 1;
	
	НоваяЗапись.Звонок 						= ТелЗвонок.Ссылка;
	НоваяЗапись.НомерТелефона				= ТелЗвонок.АбонентКакСвязаться;
	НоваяЗапись.ДатаНачала					= ТелЗвонок.Дата; 		
	НоваяЗапись.ДатаОкончания				= ТелЗвонок.Дата + ТелЗвонок.сфпДлительностьЗвонка;	
	НоваяЗапись.ДатаОтвета					= ТелЗвонок.Дата;
	НоваяЗапись.Входящий					= ТелЗвонок.Входящий;
	НоваяЗапись.ВнутреннийНомер				= Прав(СтруктураЗвонка.ТелефонСотрудника, 10);
	НоваяЗапись.ИдентификаторЗаписи			= ТелЗвонок.сфпИдентификаторЗаписи;
	НоваяЗапись.АТСИдентификаторЗвонка		= ТелЗвонок.АТСИдентификаторЗвонка;
	НоваяЗапись.Ответственный				= ТелЗвонок.Ответственный;
	НоваяЗапись.АбонентКонтакт				= ТелЗвонок.АбонентКонтакт;
	НоваяЗапись.ВнешнийНомер				= Прав(СтруктураЗвонка.ВнешнийНомер, 10);
	НоваяЗапись.Транк						= Ложь; 
	НоваяЗапись.hCall 						= 2;
	
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();	
	
	Возврат ТелЗвонок.Ссылка;
	
КонецФункции // сфпСоздатьТелефонныйЗвонок()

Функция ПолучитьСтруктуруДляЗаполненияСобытия() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Проект");
	Результат.Вставить("Дата");
	Результат.Вставить("ОкончаниеСобытия");
	Результат.Вставить("Трудозатраты");
	Результат.Вставить("Автор");
	Результат.Вставить("Ответственный");
	Результат.Вставить("Важность");
	Результат.Вставить("Тема");
	Результат.Вставить("ДокументОснование");
	Результат.Вставить("Место");
	Результат.Вставить("сфпИдентификаторЗвонка");
	Результат.Вставить("ВходящееИсходящее");
	Результат.Вставить("ВидСобытия");
	Результат.Вставить("СостояниеСобытия");
	Результат.Вставить("Описание");
	Результат.Вставить("Партнер");
	Результат.Вставить("КонтактноеЛицо");
	Результат.Вставить("УПДК_Агент");
	Результат.Вставить("УПДК_АгентствоНедвижимости");
	Результат.Вставить("УПДК_ЗвонилАгент"); 	
	
	Возврат Результат;
	
КонецФункции


// Функция создает документ "CRM_Событие" или возвращает существующий
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Функция СоздатьПолучитьСобытие(СтруктураЗвонка)
	
	хСсылкаНаСобытие = ХранилищеОбщихНастроек.Загрузить("СсылкаНаСобытие",,,Строка(СтруктураЗвонка.Ответственный));
	Если хСсылкаНаСобытие <> Неопределено И ТипЗнч(хСсылкаНаСобытие) = Тип("ДокументСсылка.CRM_Событие") Тогда
		
		Если Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(хСсылкаНаСобытие.Место),10) =
			Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию( СтруктураЗвонка.ТелефонКонтакта),10) 
			И хСсылкаНаСобытие.ВходящееИсходящее = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее
			И (хСсылкаНаСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано
			ИЛИ хСсылкаНаСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.ВРаботе)			
			Тогда
			
			ТекОбъект = СтруктураЗвонка.НовыйЗвонок.ПолучитьОбъект();
			ТекОбъект.ВзаимодействиеОснование = хСсылкаНаСобытие;
			ТекОбъект.Записать();    
			
			ТекОбъект = хСсылкаНаСобытие.ПолучитьОбъект();
			ТекОбъект.Дата = СтруктураЗвонка.Дата;
			ТекОбъект.ОкончаниеСобытия = СтруктураЗвонка.Дата + СтруктураЗвонка.Длительность; 
			ТекОбъект.Записать();
			Возврат хСсылкаНаСобытие;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	//Если событие уже создавалось на основании телефонного звонка, то новое событие не создаем
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	CRM_Событие.Ссылка
	|ИЗ
	|	Документ.CRM_Событие КАК CRM_Событие
	|ГДЕ
	|	CRM_Событие.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", СтруктураЗвонка.НовыйЗвонок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда		
		Возврат Выборка.Ссылка;	
	Иначе
		СобытиеОбъект = Документы.CRM_Событие.СоздатьДокумент();
	КонецЕсли;
	
	НовоеСобытие = ПолучитьСтруктуруДляЗаполненияСобытия();
	
	ДанныеЗвонка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураЗвонка.НовыйЗвонок, "Ответственный,АбонентКонтакт,Входящий");
	
	Пользователь = ДанныеЗвонка.Ответственный;
	
	Партнер = Справочники.Партнеры.ПустаяСсылка();
	КонтаткноеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	НеобработанныйКонтакт = Истина;
	
	Контакт = ДанныеЗвонка.АбонентКонтакт;
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			
			Партнер = Контакт;
			//Поле КЛ не заполняем, так как звонит не физическое лицо. Необходимо выбрать из списка на форме.
			
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			КонтактноеЛицо = Контакт;
			Партнер = Справочники.ФизическиеЛица.ПолучитьПартнера(КонтактноеЛицо, Истина);
			
		КонецЕсли;				
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			НеобработанныйКонтакт = РегистрыСведений.СтатусыКлиентов.ПолучитьСтатусКлиента(Партнер) = Перечисления.СтатусыКлиента.НеобработанныйКонтакт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеЗвонка.Входящий Тогда
		
		Если НеобработанныйКонтакт Тогда
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ПервичныйВходящий, Пользователь);
		Иначе
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ВторичныйВходящий, Пользователь);
		КонецЕсли;	
		
		НовоеСобытие["ВходящееИсходящее"]	= Перечисления["CRM_ВходящееИсходящееСобытие"].Входящее;
		
	Иначе
		
		Если НеобработанныйКонтакт Тогда
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ПервичныйИсходящий, Пользователь);			
		Иначе
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ВторичныйИсходящий, Пользователь);			
			
		КонецЕсли;
		
		НовоеСобытие["ВходящееИсходящее"]	= Перечисления["CRM_ВходящееИсходящееСобытие"].Исходящее;
		
	КонецЕсли;
	
	НовоеСобытие["Дата"]				= СтруктураЗвонка.Дата;
	НовоеСобытие["ОкончаниеСобытия"]	= СтруктураЗвонка.Дата + СтруктураЗвонка.Длительность;
	НовоеСобытие["Трудозатраты"] 		= СтруктураЗвонка.Длительность / 3600;
	НовоеСобытие["Автор"]				= ?(ЗначениеЗаполнено(СтруктураЗвонка.Автор), 
	СтруктураЗвонка.Автор, 
	сфпСофтФонПроСервер.сфпТекущийПользователь()
	);
	НовоеСобытие["Ответственный"]		= ДанныеЗвонка.Ответственный;
	НовоеСобытие["Важность"]			= Перечисления["ВариантыВажностиВзаимодействия"].Обычная;
	НовоеСобытие["Тема"]				= НСтр("ru='#Создан автоматически при загрузке с АТС Мегафон'");
	
	НовоеСобытие["ДокументОснование"] 	= СтруктураЗвонка.НовыйЗвонок;
	
	НовоеСобытие["ВидСобытия"]			= Перечисления["CRM_ВидыСобытий"].ТелефонныйЗвонок;
	НовоеСобытие["СостояниеСобытия"]	= Справочники["CRM_СостоянияСобытий"].ВРаботе;
	
	НовоеСобытие["Место"] 			= СтруктураЗвонка.ТелефонКонтакта;
	
	НовоеСобытие["Партнер"] 		= Партнер;
	НовоеСобытие["КонтактноеЛицо"] 	= КонтактноеЛицо;
	
	Если ЗначениеЗаполнено(НовоеСобытие.Партнер)
		И НовоеСобытие.Партнер.CRM_ТипОтношений = Справочники.CRM_ТипыОтношений.АгентствоНедвижимости Тогда
		
		НовоеСобытие.УПДК_АгентствоНедвижимости = НовоеСобытие.Партнер;
		НовоеСобытие.УПДК_Агент = НовоеСобытие.КонтактноеЛицо;
		НовоеСобытие.Партнер = Справочники.Партнеры.ПустаяСсылка();
		НовоеСобытие.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		НовоеСобытие.УПДК_ЗвонилАгент = Истина;
		
	КонецЕсли;    
	
	СобытиеОбъект = Документы.CRM_Событие.СоздатьДокумент();
	СобытиеОбъект.Заполнить(НовоеСобытие);
	НовоеСобытие = НовоеСобытие;
	
	Попытка
		СобытиеОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("АТС", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(СобытиеОбъект.Ссылка);
	
	Если Не ЗначениеЗаполнено(Сделка) Тогда
		Документы.Сделка.ДобавитьНовуюСделку(СобытиеОбъект.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
		
		НовыйЗвонокОбъект = СтруктураЗвонка.НовыйЗвонок.ПолучитьОбъект();		
		НовыйЗвонокОбъект.ВзаимодействиеОснование = СобытиеОбъект.Ссылка;
		НовыйЗвонокОбъект.Записать();
		
	КонецЕсли;
	
	Возврат СобытиеОбъект.Ссылка;
	
КонецФункции // сфпСоздатьСобытие()

Функция СоздатьПолучитьСделку(Звонок)
	
	//Если Сделка уже создавалась на основании телефонного звонка, то новую не создаем
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сделка.Ссылка
	|ИЗ
	|	Документ.Сделка КАК Сделка
	|ГДЕ
	|	Сделка.Основание = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Звонок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда		
		Возврат Выборка.Ссылка;	
	КонецЕсли;  
	
	Контакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Звонок, "АбонентКонтакт");
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда			
			Партнер = Контакт;
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Партнер = Справочники.ФизическиеЛица.ПолучитьПартнера(Контакт,,, Истина);					
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СделкиОбщая.Сделка КАК Сделка
		|ИЗ
		|	РегистрСведений.СделкиОбщая КАК СделкиОбщая
		|ГДЕ
		|	СделкиОбщая.Клиент = &Клиент
		|
		|УПОРЯДОЧИТЬ ПО
		|	СделкиОбщая.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("Клиент", Партнер);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда     
			Возврат Документы.Сделка.ДобавитьНовуюСделкуПоЗвонку(Звонок);
		Иначе			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
			ВыборкаДетальныеЗаписи.Следующий();
			Возврат ВыборкаДетальныеЗаписи.Сделка;	 			
		КонецЕсли;  
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция КлючСлужебногоОбсужденияСистемыВзаимодействия()
	
	Возврат "ИнтеграцияАТСЖурналЗвонков";
	
КонецФункции

// Функция создает обсуждение системы взаимодействия для журнала звонков и возвращает его идентификатор. 
// Это обсуждение будет использоваться для отправки оповещения пользователя с сервера на клиент
// 
// Возвращаемое значение:
//  ИдентификаторОбсужденияСистемыВзаимодействия - идентификатор обсуждения
//
Функция СоздатьОбсуждениеЖурналЗвонков() 
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
	#Если НЕ ВнешнееСоединение Тогда
		Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
		
		ОбсуждениеЖурнал = СистемаВзаимодействия.СоздатьОбсуждение();
		ОбсуждениеЖурнал.Ключ = Ключ;
		ОбсуждениеЖурнал.Отображаемое = Ложь;
		ОбсуждениеЖурнал.Заголовок = НСтр("ru='Журнал звонков'");
		ОбсуждениеЖурнал.Участники.Добавить(СистемаВзаимодействия.СтандартныеПользователи.ВсеПользователиПриложения);
		
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			ОбсуждениеЖурнал.Записать();
			ОбсуждениеЖурналИдентификатор = ОбсуждениеЖурнал.Идентификатор;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Создание служебного обсуждения Системы взаимодействия'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
	#КонецЕсли
	
	Возврат ОбсуждениеЖурналИдентификатор;
	
КонецФункции

#Область Ростелеком

Процедура RT_ОбновитьДанныеИсторииЗвонков(СтруктураЗвонка)
	
	НайденныйЗвонок = Документы.ТелефонныйЗвонок.НайтиПоРеквизиту("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	Если Не ЗначениеЗаполнено(НайденныйЗвонок) Тогда
		Возврат;
	КонецЕсли;
	
	//Проверяем Максимальное значение hCall чтобы добавить новую запись
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	сфпИсторияЗвонков.hCall КАК hCall
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	|ГДЕ
	|	сфпИсторияЗвонков.Звонок = &Звонок
	|
	|УПОРЯДОЧИТЬ ПО
	|	hCall УБЫВ";
	
	Запрос.УстановитьПараметр("Звонок", НайденныйЗвонок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
		
		hCall = ВыборкаДетальныеЗаписи.hCall;
		
		НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Звонок.Установить(НайденныйЗвонок);
		НаборЗаписей.Отбор.hCall.Установить(hCall); //Транк всегда первый
		
		НаборЗаписей.Прочитать();
		
		
		Для Каждого ТекЗапись из НаборЗаписей Цикл
			
			ТекЗапись.ДатаОкончания = СтруктураЗвонка.Дата;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(); 
		
	КонецЕсли; 	 				
	
КонецПроцедуры // ОбновитьДанныеИсторииЗвонков()

Функция RT_СоздатьТелефонныйЗвонок(СтруктураЗвонка)
	
	НайденныйЗвонок = Документы.ТелефонныйЗвонок.НайтиПоРеквизиту("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	Если ЗначениеЗаполнено(НайденныйЗвонок) Тогда	 
		Возврат НайденныйЗвонок;
	КонецЕсли;
	
	НачалиТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		
		НачатьТранзакцию();
		НачалиТранзакцию = Истина;
		
	КонецЕсли;
	
	ТелЗвонок = Документы.ТелефонныйЗвонок.СоздатьДокумент();
	
	ТелЗвонок.сфпСостояниеЗвонка 			= Перечисления.сфпСостоянияЗвонков.Пропущенный; 		
	ТелЗвонок.Дата							= СтруктураЗвонка.Дата;
	ТелЗвонок.Входящий						= СтруктураЗвонка.ВходящийЗвонок;
	ТелЗвонок.АбонентКакСвязаться			= Прав(СтруктураЗвонка.ТелефонКонтакта, 10); 
	ТелЗвонок.Автор							= Справочники.Пользователи.Система;
	ТелЗвонок.Ответственный 				= ТелЗвонок.Автор;		
	ТелЗвонок.Важность						= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	ТелЗвонок.АТСИдентификаторЗвонка		= СтруктураЗвонка.ИдентификаторЗвонка;
	ТелЗвонок.Тема							= сфпСофтФонПроСервер.сфпЗаполнитьТемуТелефонногоЗвонка(ТелЗвонок.Входящий, ТелЗвонок.Дата);	
	ТелЗвонок.Описание 						= НСтр("ru = 'Звонок загружен из ВАТС '");
	
	// определяем звонившего
	МассивНайденных = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(СтруктураЗвонка.ТелефонКонтакта);
	Если МассивНайденных.Количество() <> 0 Тогда	
		
		Контакт = МассивНайденных[0];		
		ТелЗвонок.АбонентКонтакт = Контакт;
		ТелЗвонок.АбонентПредставление	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
		
	Иначе			
		ТелЗвонок.АбонентПредставление	= НСтр("ru='!!!Не определен!!!'");	
	КонецЕсли;	
	
	ТелЗвонок.ВидАТС = Перечисления.ВидыАТС.Ростелеком;
	
	ТелЗвонок.Записать(); 	
	
	Если ТелЗвонок.Входящий 
		И ЗначениеЗаполнено(СтруктураЗвонка.ВнешнийНомер) 
		И УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ИспользоватьCallТрекинг") Тогда
		
		СтруктураИнтереса = сфпСофтФонПроСерверПереопределяемый.ПолучитьИсточникПервичногоИнтересаПоCallТрекингу(Прав(СтруктураЗвонка.ВнешнийНомер, 10));
		
		Если СтруктураИнтереса <> Неопределено Тогда
			
			НаборЗаписей = РегистрыСведений.ДанныеИсточникаЗвонков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Телефон.Установить(ТелЗвонок.АбонентКакСвязаться);
			НаборЗаписей.Отбор.Приоритет.Установить(0);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Телефон = ТелЗвонок.АбонентКакСвязаться;
			Запись.Приоритет = 0;
			Запись.ДатаЗвонка = ТелЗвонок.Дата;
			Запись.ИнструментИнтереса = СтруктураИнтереса.ИнструментИнтереса;
			Запись.КаналИнтереса      = СтруктураИнтереса.КаналИнтереса;
			Запись.ИсточникИнтереса   = СтруктураИнтереса.ИсточникИнтереса;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;  		
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.hCall = 1; //Транк всегда первый
	НоваяЗапись.Звонок 						= ТелЗвонок.Ссылка;
	НоваяЗапись.НомерТелефона				= ТелЗвонок.АбонентКакСвязаться;
	НоваяЗапись.ДатаНачала					= ТелЗвонок.Дата;
	НоваяЗапись.Входящий					= ТелЗвонок.Входящий;
	НоваяЗапись.АТСИдентификаторЗвонка		= ТелЗвонок.АТСИдентификаторЗвонка;
	НоваяЗапись.CallData					= ТелЗвонок.АТСИдентификаторЗвонка; 			
	НоваяЗапись.АбонентКонтакт				= ТелЗвонок.АбонентКонтакт; 		
	НоваяЗапись.Транк						= Истина;
	НоваяЗапись.ВнешнийНомер				= СтруктураЗвонка.ВнешнийНомер;	
	
	НаборЗаписей.Записать(); 
	
	Если НачалиТранзакцию И ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат ТелЗвонок.Ссылка;
	
КонецФункции // сфпСоздатьТелефонныйЗвонок()

Функция RT_ИзменитьТелефонныйЗвонок(СтруктураЗвонка) Экспорт
	
	НайденныйЗвонок = Документы.ТелефонныйЗвонок.НайтиПоРеквизиту("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	Если НЕ ЗначениеЗаполнено(НайденныйЗвонок) Тогда
		Возврат Документы.ТелефонныйЗвонок.ПустаяСсылка();
	КонецЕсли;
	
	ТелЗвонок = НайденныйЗвонок.ПолучитьОбъект();
	
	Если СтруктураЗвонка.СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный Тогда	
		
		ТелЗвонок.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный;
		
		Если ЗначениеЗаполнено(СтруктураЗвонка.Ответственный) Тогда
			ТелЗвонок.Ответственный = СтруктураЗвонка.Ответственный;
		КонецЕсли;
		
		ТелЗвонок.Записать(); 
		
	КонецЕсли;
	
	//Проверяем Максимальное значение hCall чтобы добавить новую запись
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	сфпИсторияЗвонков.hCall КАК hCall
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	|ГДЕ
	|	сфпИсторияЗвонков.Звонок = &Звонок
	|	И сфпИсторияЗвонков.ВнутреннийНомер = &ВнутреннийНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	сфпИсторияЗвонков.hCall КАК hCall
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	|ГДЕ
	|	сфпИсторияЗвонков.Звонок = &Звонок
	|
	|УПОРЯДОЧИТЬ ПО
	|	hCall УБЫВ";
	
	Запрос.УстановитьПараметр("Звонок", ТелЗвонок.Ссылка);
	Запрос.УстановитьПараметр("ВнутреннийНомер", СтруктураЗвонка.ТелефонСотрудника);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
		
		hCall = ВыборкаДетальныеЗаписи.hCall;
		
		НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
		НаборЗаписей.Отбор.hCall.Установить(hCall); 		
		
		НаборЗаписей.Прочитать();
		
		Для Каждого ТекЗапись из НаборЗаписей Цикл
			
			ТекЗапись.ДатаОтвета 					= СтруктураЗвонка.Дата;
			ТекЗапись.ИдентификаторЗаписи			= ТелЗвонок.АТСИдентификаторЗвонка;
			
		КонецЦикла;			
		
		НаборЗаписей.Записать();		
		
		НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
		НаборЗаписей.Отбор.hCall.Установить(1);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого ТекЗапись из НаборЗаписей Цикл
			
			ТекЗапись.ДатаОтвета 				= СтруктураЗвонка.Дата;
			ТекЗапись.ИдентификаторЗаписи		= ТелЗвонок.АТСИдентификаторЗвонка;
			ТекЗапись.Ответственный				= СтруктураЗвонка.Ответственный;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();			
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
			hCall = ВыборкаДетальныеЗаписи.hCall + 1;
		Иначе
			hCall = 2; 			
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
		НаборЗаписей.Отбор.hCall.Установить(hCall); 		
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.hCall 						= hCall; 
		НоваяЗапись.Звонок 						= ТелЗвонок.Ссылка;
		НоваяЗапись.НомерТелефона				= ТелЗвонок.АбонентКакСвязаться;
		НоваяЗапись.ДатаНачала					= ТелЗвонок.Дата;
		НоваяЗапись.Входящий					= ТелЗвонок.Входящий;
		НоваяЗапись.ВнутреннийНомер				= СтруктураЗвонка.ТелефонСотрудника;
		НоваяЗапись.АТСИдентификаторЗвонка		= ТелЗвонок.АТСИдентификаторЗвонка;
		НоваяЗапись.CallData					= ТелЗвонок.АТСИдентификаторЗвонка; 
		НоваяЗапись.Ответственный				= СтруктураЗвонка.Ответственный;
		НоваяЗапись.АбонентКонтакт				= ТелЗвонок.АбонентКонтакт; 		
		
		НаборЗаписей.Записать(); 
		
	КонецЕсли;
	
	Возврат ТелЗвонок.Ссылка;
	
КонецФункции // сфпСоздатьТелефонныйЗвонок()

Функция RT_ЗавершитьТелефонныйЗвонок(СтруктураЗвонка)
	
	НайденныйЗвонок = Документы.ТелефонныйЗвонок.НайтиПоРеквизиту("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	Если НЕ ЗначениеЗаполнено(НайденныйЗвонок) Тогда	 
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	сфпИсторияЗвонков.hCall КАК hCall
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	|ГДЕ
	|	сфпИсторияЗвонков.Звонок = &Звонок
	|	И сфпИсторияЗвонков.ВнутреннийНомер = &ВнутреннийНомер";
	
	Запрос.УстановитьПараметр("ВнутреннийНомер", СтруктураЗвонка.ТелефонСотрудника);
	Запрос.УстановитьПараметр("Звонок", НайденныйЗвонок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Звонок.Установить(НайденныйЗвонок);
		НаборЗаписей.Отбор.hCall.Установить(ВыборкаДетальныеЗаписи.hCall); 
		
		НаборЗаписей.Прочитать();
		
		Для Каждого НоваяЗапись из НаборЗаписей Цикл		
			НоваяЗапись.ДатаОкончания = СтруктураЗвонка.Дата;		
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Возврат НайденныйЗвонок;
	
КонецФункции // сфпСоздатьТелефонныйЗвонок()

Процедура RT_ЗавершитьТелефонныйЗвонокТранк(СтруктураЗвонка)
	
	НайденныйЗвонок = Документы.ТелефонныйЗвонок.НайтиПоРеквизиту("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	Если ЗначениеЗаполнено(НайденныйЗвонок) Тогда	 
		ТелЗвонок = НайденныйЗвонок.ПолучитьОбъект();
	Иначе
		Возврат;
	КонецЕсли;
	
	ТелЗвонок.сфпИдентификаторЗаписи		= СтруктураЗвонка.СсылкаНаЗапись;
	ТелЗвонок.сфпДлительностьЗвонка			= СтруктураЗвонка.Дата - ТелЗвонок.Дата;
	
	ТелЗвонок.Записать();
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
	НаборЗаписей.Отбор.hCall.Установить(1); //Транк всегда первый
	
	НаборЗаписей.Прочитать();
	
	Для Каждого НоваяЗапись из НаборЗаписей Цикл		
		НоваяЗапись.ДатаОкончания = СтруктураЗвонка.Дата;		
	КонецЦикла;
	
	НаборЗаписей.Записать(); 
	
	Если Константы.ИспользоватьБППропущенныеЗвонки.Получить()
		И ТелЗвонок.сфпСостояниеЗвонка = перечисления.сфпСостоянияЗвонков.Пропущенный 
		И ТелЗвонок.Входящий Тогда
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		Автор = Справочники.Пользователи.Система;
		Клиент = Справочники.ФизическиеЛица.ПолучитьПартнера(ТелЗвонок.АбонентКонтакт);
		
		КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПропущенныеЗвонки;
		СрокПовтроного = Константы.СрокПовторногоПропущенногоЗвонка.Получить();
		
		ТекЗВонок = ТелЗвонок.Ссылка;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|ГДЕ
		|	CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута
		|	И CRM_БизнесПроцесс.Партнер = &Партнер
		|	И CRM_БизнесПроцесс.ДатаСтарта > &ПериодПовтора 
		|	И НЕ CRM_БизнесПроцесс.Завершен";
		
		Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
		Запрос.УстановитьПараметр("Партнер", Клиент);
		Запрос.УстановитьПараметр("ПериодПовтора", ТекущаяДатаСеанса- СрокПовтроного*60);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			
			БизнесПроцесс.КартаМаршрута = КартаМаршрута;
			БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса;
			БизнесПроцесс.Наименование = "Пропущенный звонок";
			БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
			БизнесПроцесс.Дата = ТекущаяДатаСеанса;
			БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
			БизнесПроцесс.НомерВерсииКартыМаршрута = БизнесПроцесс.КартаМаршрута.НомерВерсии; 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
			|ГДЕ
			|	CRM_ТочкиМаршрутов.Владелец = &Владелец
			|	И CRM_ТочкиМаршрутов.Вид = &Вид
			|	И НЕ CRM_ТочкиМаршрутов.НеИспользуется
			|	И НЕ CRM_ТочкиМаршрутов.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Вид", Перечисления.CRM_ВидыТочекМаршрута.Старт);
			Запрос.УстановитьПараметр("Владелец", БизнесПроцесс.КартаМаршрута);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				БизнесПроцесс.ТочкаСтарта = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
			БизнесПроцесс.Автор = Автор;						
			БизнесПроцесс.Партнер = Клиент; 			
			БизнесПроцесс.Основание = ТелЗвонок.Ссылка;
			БизнесПроцесс.Предмет = ТелЗвонок.Ссылка;
			БизнесПроцесс.Описание = "Перезвонить на пропущенный звонок"; 			
			БизнесПроцесс.Записать();
			БизнесПроцесс.Старт(); 	
			
			Попытка
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|              ЗадачаИсполнителя.Ссылка
				|ИЗ
				|              Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|              ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
				
				ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();  
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					
					//Создаем Событие
					СвязанноеСобытие = Документы.CRM_Событие.СоздатьДокумент();
					
					ДанныеЗаполнения = Новый Структура;
					
					ПроектСобытия = КартаМаршрута.ВидСвязанногоСобытия;			
					
					ДанныеЗаполнения.Вставить("Партнер", 			БизнесПроцесс.Партнер);
					ДанныеЗаполнения.Вставить("КонтактноеЛицо", 	БизнесПроцесс.КонтактноеЛицо);
					ДанныеЗаполнения.Вставить("Проект", 			ПроектСобытия);
					ДанныеЗаполнения.Вставить("Автор", 				Автор);
					ДанныеЗаполнения.Вставить("Ответственный", 		Автор);
					ДанныеЗаполнения.Вставить("Место", 				БизнесПроцесс.Телефон);
					
					СвязанноеСобытие.Заполнить(ДанныеЗаполнения);
					
					СвязанноеСобытие.СвязаннаяЗадача = ЗадачаОбъект.Ссылка; 		
					СвязанноеСобытие.Описание = ЗадачаОбъект.Описание; 		
					СвязанноеСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано;
					СвязанноеСобытие.Записать();
					
					СтруктураИнтереса = УПДК_Маркетинг.ПолучитьСтруктуруИнтересаПоДокументу(ТекЗВонок);
					
					Если ЗначениеЗаполнено(СтруктураИнтереса.ИнструментИнтереса) Тогда
						
						НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Сделка.Установить(СвязанноеСобытие.Ссылка);
						
						Запись = НаборЗаписей.Добавить();
						Запись.Период = СвязанноеСобытие.Дата;
						Запись.Сделка = СвязанноеСобытие.Ссылка;
						Запись.Партнер = СвязанноеСобытие.Партнер;
						Запись.КаналПервичногоИнтереса = СтруктураИнтереса.ИнструментИнтереса;
						ЗаполнитьЗначенияСвойств(Запись, СтруктураИнтереса);
						
						НаборЗаписей.Записать();
						
					КонецЕсли;
					
					ЗадачаОбъект.СвязанноеСобытие = СвязанноеСобытие.Ссылка; 
					ЗадачаОбъект.Предмет 		= СвязанноеСобытие.Ссылка; 
					
					ЗадачаОбъект.Записать();
					
					БизнесПроцесс.Предмет 		= СвязанноеСобытие.Ссылка;
					БизнесПроцесс.Записать();
					
				КонецЦикла;  
				
			Исключение
				
				
			КонецПопытки;
			
		КонецЕсли; 		
		
	КонецЕсли;
	
КонецПроцедуры // сфпСоздатьТелефонныйЗвонок()

Функция RT_СоздатьПолучитьСобытие(СтруктураЗвонка)
	
	ДанныеЗвонка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураЗвонка.НовыйЗвонок, "АбонентКонтакт,Входящий");
	
	хСсылкаНаСобытие = ХранилищеОбщихНастроек.Загрузить("СсылкаНаСобытие",,,Строка(СтруктураЗвонка.Ответственный));
	Если хСсылкаНаСобытие <> Неопределено И ТипЗнч(хСсылкаНаСобытие) = Тип("ДокументСсылка.CRM_Событие") Тогда
		
		Если Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(хСсылкаНаСобытие.Место),10) =
			Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию( СтруктураЗвонка.ТелефонКонтакта),10) 
			И хСсылкаНаСобытие.ВходящееИсходящее = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее
			И хСсылкаНаСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано
			
			Тогда 			
			
			Если НЕ ДанныеЗвонка.Входящий Тогда				
				НовыйЗвонокОбъект = СтруктураЗвонка.НовыйЗвонок.ПолучитьОбъект();		
				НовыйЗвонокОбъект.ВзаимодействиеОснование = хСсылкаНаСобытие;
				НовыйЗвонокОбъект.Записать();
				
				ТекОбъект = хСсылкаНаСобытие.ПолучитьОбъект();
				ТекОбъект.Дата = СтруктураЗвонка.Дата;
				ТекОбъект.ОкончаниеСобытия = СтруктураЗвонка.Дата + СтруктураЗвонка.Длительность; 
				ТекОбъект.Записать();  				
			КонецЕсли;
			
			Возврат хСсылкаНаСобытие;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если событие уже создавалось на основании телефонного звонка, то новое событие не создаем
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	CRM_Событие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Событие КАК CRM_Событие
	|ГДЕ
	|	CRM_Событие.ДокументОснование = &ДокументОснование
	|	И CRM_Событие.Ответственный = &Ответственный";
	
	Запрос.УстановитьПараметр("ДокументОснование", СтруктураЗвонка.НовыйЗвонок);
	Запрос.УстановитьПараметр("Ответственный", СтруктураЗвонка.Ответственный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда		
		Возврат Выборка.Ссылка;	
	Иначе
		СобытиеОбъект = Документы.CRM_Событие.СоздатьДокумент();
	КонецЕсли;
	
	НовоеСобытие = ИнтеграцияАТССервер.ПолучитьСтруктуруДляЗаполненияСобытия();
	
	Пользователь = СтруктураЗвонка.Ответственный;
	
	Партнер = Справочники.Партнеры.ПустаяСсылка();
	КонтаткноеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	НеобработанныйКонтакт = Истина;
	
	Контакт = ДанныеЗвонка.АбонентКонтакт;
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			
			Партнер = Контакт;
			//Поле КЛ не заполняем, так как звонит не физическое лицо. Необходимо выбрать из списка на форме.
			
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			КонтактноеЛицо = Контакт;
			Партнер = Справочники.ФизическиеЛица.ПолучитьПартнера(КонтактноеЛицо, Истина);
			
		КонецЕсли;				
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			НеобработанныйКонтакт = РегистрыСведений.СтатусыКлиентов.ПолучитьСтатусКлиента(Партнер) = Перечисления.СтатусыКлиента.НеобработанныйКонтакт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеЗвонка.Входящий Тогда
		
		Если НеобработанныйКонтакт Тогда
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ПервичныйВходящий, Пользователь);
		Иначе
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ВторичныйВходящий, Пользователь);
		КонецЕсли;	
		
		НовоеСобытие["ВходящееИсходящее"]	= Перечисления["CRM_ВходящееИсходящееСобытие"].Входящее;
		
	Иначе
		
		Если НеобработанныйКонтакт Тогда
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ПервичныйИсходящий, Пользователь);			
		Иначе
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ВторичныйИсходящий, Пользователь);			
			
		КонецЕсли;
		
		НовоеСобытие["ВходящееИсходящее"]	= Перечисления["CRM_ВходящееИсходящееСобытие"].Исходящее;
		
	КонецЕсли;
	
	НовоеСобытие["Дата"]				= СтруктураЗвонка.Дата;
	//НовоеСобытие["ОкончаниеСобытия"]	= СтруктураЗвонка.Дата;
	НовоеСобытие["Автор"]				= ?(ЗначениеЗаполнено(СтруктураЗвонка.Автор), 
	СтруктураЗвонка.Автор, 
	сфпСофтФонПроСервер.сфпТекущийПользователь());
	НовоеСобытие["Ответственный"]		= СтруктураЗвонка.Ответственный;
	НовоеСобытие["Важность"]			= Перечисления["ВариантыВажностиВзаимодействия"].Обычная;
	НовоеСобытие["Тема"]				= НСтр("ru='#Создан автоматически при загрузке с виртуальной АТС'");
	
	НовоеСобытие["ДокументОснование"] 	= СтруктураЗвонка.НовыйЗвонок;
	
	НовоеСобытие["ВидСобытия"]			= Перечисления["CRM_ВидыСобытий"].ТелефонныйЗвонок;
	НовоеСобытие["СостояниеСобытия"]	= Справочники["CRM_СостоянияСобытий"].ВРаботе;
	
	НовоеСобытие["Место"] 			= СтруктураЗвонка.ТелефонКонтакта;
	
	НовоеСобытие["Партнер"] 		= Партнер;
	НовоеСобытие["КонтактноеЛицо"] 	= КонтактноеЛицо;
	
	Если ЗначениеЗаполнено(НовоеСобытие.Партнер)
		И НовоеСобытие.Партнер.CRM_ТипОтношений = Справочники.CRM_ТипыОтношений.АгентствоНедвижимости Тогда
		
		НовоеСобытие.УПДК_АгентствоНедвижимости = НовоеСобытие.Партнер;
		НовоеСобытие.УПДК_Агент = НовоеСобытие.КонтактноеЛицо;
		НовоеСобытие.Партнер = Справочники.Партнеры.ПустаяСсылка();
		НовоеСобытие.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		НовоеСобытие.УПДК_ЗвонилАгент = Истина;
		
	КонецЕсли;
	
	СобытиеОбъект = Документы.CRM_Событие.СоздатьДокумент();
	СобытиеОбъект.Заполнить(НовоеСобытие);
	НовоеСобытие = НовоеСобытие;
	
	Попытка
		СобытиеОбъект.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
		
		НовыйЗвонокОбъект = СтруктураЗвонка.НовыйЗвонок.ПолучитьОбъект();		
		НовыйЗвонокОбъект.ВзаимодействиеОснование = СобытиеОбъект.Ссылка;
		НовыйЗвонокОбъект.Записать();
		
	КонецЕсли;
	
	Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(СобытиеОбъект.Ссылка);
	
	Если Не ЗначениеЗаполнено(Сделка) Тогда
		Документы.Сделка.ДобавитьНовуюСделку(СобытиеОбъект.Ссылка);
	КонецЕсли;
	
	Возврат СобытиеОбъект.Ссылка;
	
КонецФункции // сфпСоздатьСобытие()

Функция RT_ПолучитьСобытие(СтруктураЗвонка)
	
	хСсылкаНаСобытие = ХранилищеОбщихНастроек.Загрузить("СсылкаНаСобытие",,,Строка(СтруктураЗвонка.Ответственный));
	Если хСсылкаНаСобытие <> Неопределено И ТипЗнч(хСсылкаНаСобытие) = Тип("ДокументСсылка.CRM_Событие") Тогда
		
		Если Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(хСсылкаНаСобытие.Место),10) =
			Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию( СтруктураЗвонка.ТелефонКонтакта),10) 
			И хСсылкаНаСобытие.ВходящееИсходящее = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее
			И (хСсылкаНаСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано
			ИЛИ хСсылкаНаСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.ВРаботе)			
			Тогда
			
			ТекОбъект = СтруктураЗвонка.НовыйЗвонок.ПолучитьОбъект();
			ТекОбъект.ВзаимодействиеОснование = хСсылкаНаСобытие;
			ТекОбъект.Записать();  
			
			ТекОбъект = хСсылкаНаСобытие.ПолучитьОбъект();
			ТекОбъект.Дата = СтруктураЗвонка.Дата;
			ТекОбъект.ОкончаниеСобытия = СтруктураЗвонка.Дата + СтруктураЗвонка.Длительность; 
			ТекОбъект.Записать();
			Возврат хСсылкаНаСобытие;
			
		КонецЕсли;
		
	КонецЕсли;    
	
	//Если событие уже создавалось на основании телефонного звонка, то новое событие не создаем
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	CRM_Событие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Событие КАК CRM_Событие
	|ГДЕ
	|	CRM_Событие.ДокументОснование = &ДокументОснование
	|	И CRM_Событие.Ответственный = &Ответственный";
	
	Запрос.УстановитьПараметр("ДокументОснование", СтруктураЗвонка.НовыйЗвонок);
	Запрос.УстановитьПараметр("Ответственный", СтруктураЗвонка.Ответственный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // сфпСоздатьСобытие()

Функция RT_ПолучитьНомерТелефона(ПараметрыТела)
	
	Если ПараметрыТела.type = "incoming" Тогда
		
		ПозицияСобачки = СтрНайти(ПараметрыТела.from_number, "@");
		
		Возврат Прав(Лев(ПараметрыТела.from_number, ПозицияСобачки-1),10);
		
	Иначе 
		
		ПозицияСобачки = СтрНайти(ПараметрыТела.request_number, "@");
		
		Возврат Прав(Лев(ПараметрыТела.request_number, ПозицияСобачки-1),10);
		
	КонецЕсли;
	
КонецФункции

Функция RT_ПолучитьПользователя(ПараметрыТела)
	
	Если ПараметрыТела.type = "incoming" Тогда 		
		Возврат Сред(ПараметрыТела.request_number, 5);		
	Иначе		
		Возврат Сред(ПараметрыТела.from_number, 5); 		
	КонецЕсли;
	
КонецФункции

Функция RT_ПолучитьВнутреннийНомер(ПараметрыТела)
	
	Если ПараметрыТела.type = "incoming" Тогда 		
		Возврат ПараметрыТела.request_pin;		
	Иначе		
		Возврат ПараметрыТела.from_pin;
	КонецЕсли;
	
КонецФункции

Функция RT_ПолучитьПользователяПоНомеру(ВнутреннийНомер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Вид = &Вид
	|	И ПользователиКонтактнаяИнформация.Представление = &Представление";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ВнутреннийТелефонМегафонПользователя);
	Запрос.УстановитьПараметр("Представление", ВнутреннийНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

Функция RT_ПолучитьВнешнийНомерТелефона(ПараметрыТела)
	
	ПозицияСобачки = СтрНайти(ПараметрыТела.request_number, "@");	
	Возврат Прав(Лев(ПараметрыТела.request_number, ПозицияСобачки-1),10);
	
КонецФункции

#КонецОбласти

#Область Билайн

Функция Билайн_ПолучитьПользователя(ПараметрыТела)
	
	Возврат ПараметрыТела.targetId;		
	
КонецФункции

Функция Билайн_СоздатьИзменитьТелефонныйЗвонок(СтруктураЗвонка)
	
	НайденныйЗвонок = Документы.ТелефонныйЗвонок.НайтиПоРеквизиту("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	Если ЗначениеЗаполнено(НайденныйЗвонок) Тогда	 
		ТелЗвонок = НайденныйЗвонок.ПолучитьОбъект();
	Иначе
		
		ТелЗвонок = Документы.ТелефонныйЗвонок.СоздатьДокумент();
		
		ТелЗвонок.сфпСостояниеЗвонка 			= Перечисления.сфпСостоянияЗвонков.Пропущенный; 		
		ТелЗвонок.Дата							= СтруктураЗвонка.Дата;
		ТелЗвонок.Входящий						= СтруктураЗвонка.ВходящийЗвонок;
		ТелЗвонок.АбонентКакСвязаться			= Прав(СтруктураЗвонка.ТелефонКонтакта, 10); 
		ТелЗвонок.Автор							= Справочники.Пользователи.Система;
		ТелЗвонок.Ответственный 				= ТелЗвонок.Автор;		
		ТелЗвонок.Важность						= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		ТелЗвонок.АТСИдентификаторЗвонка		= СтруктураЗвонка.ИдентификаторЗвонка;
		ТелЗвонок.Тема							= сфпСофтФонПроСервер.сфпЗаполнитьТемуТелефонногоЗвонка(ТелЗвонок.Входящий, ТелЗвонок.Дата);	
		ТелЗвонок.Описание 						= НСтр("ru = 'Звонок загружен из виртуальной АТС Билайн'");
		
		// определяем звонившего
		МассивНайденных = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(СтруктураЗвонка.ТелефонКонтакта);
		Если МассивНайденных.Количество() <> 0 Тогда	
			
			Контакт = МассивНайденных[0];		
			ТелЗвонок.АбонентКонтакт = Контакт;
			ТелЗвонок.АбонентПредставление	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
			
		Иначе			
			ТелЗвонок.АбонентПредставление	= НСтр("ru='!!!Не определен!!!'");	
		КонецЕсли;	
		
	КонецЕсли;
	
	Если СтруктураЗвонка.СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный Тогда	
		
		ТелЗвонок.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураЗвонка.Ответственный) Тогда		
		СтруктураЗвонка.Ответственный = РегистрыСведений.ДанныеДоступаАТС.ПолучитьПользователяПоЛогину(Перечисления.ВидыАТС.Билайн, СтруктураЗвонка.Логин);
	КонецЕсли;
	
	Если ТелЗвонок.Входящий 
		И ЗначениеЗаполнено(СтруктураЗвонка.ВнешнийНомер) 
		И УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ИспользоватьCallТрекинг") Тогда
		
		СтруктураИнтереса = сфпСофтФонПроСерверПереопределяемый.ПолучитьИсточникПервичногоИнтересаПоCallТрекингу(Прав(СтруктураЗвонка.ВнешнийНомер, 10));
		
		Если СтруктураИнтереса <> Неопределено Тогда
			
			НаборЗаписей = РегистрыСведений.ДанныеИсточникаЗвонков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Телефон.Установить(ТелЗвонок.АбонентКакСвязаться);
			НаборЗаписей.Отбор.Приоритет.Установить(0);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Телефон = ТелЗвонок.АбонентКакСвязаться;
			Запись.Приоритет = 0;
			Запись.ДатаЗвонка = ТелЗвонок.Дата;
			Запись.ИнструментИнтереса = СтруктураИнтереса.ИнструментИнтереса;
			Запись.КаналИнтереса      = СтруктураИнтереса.КаналИнтереса;
			Запись.ИсточникИнтереса   = СтруктураИнтереса.ИсточникИнтереса;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;  		
		
	КонецЕсли;
	
	ТелЗвонок.ВидАТС = Перечисления.ВидыАТС.Билайн;
	
	ТелЗвонок.Записать();	
	
	Если НЕ ЗначениеЗаполнено(НайденныйЗвонок) Тогда
		
		НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.hCall = 1; //Транк всегда первый
		НоваяЗапись.Звонок 						= ТелЗвонок.Ссылка;
		НоваяЗапись.НомерТелефона				= ТелЗвонок.АбонентКакСвязаться;
		НоваяЗапись.ДатаНачала					= ТелЗвонок.Дата;
		НоваяЗапись.Входящий					= ТелЗвонок.Входящий;
		НоваяЗапись.АТСИдентификаторЗвонка		= ТелЗвонок.АТСИдентификаторЗвонка;
		НоваяЗапись.CallData					= ТелЗвонок.АТСИдентификаторЗвонка; 			
		НоваяЗапись.АбонентКонтакт				= ТелЗвонок.АбонентКонтакт; 		
		НоваяЗапись.Транк						= Истина;
		НоваяЗапись.ВнешнийНомер				= СтруктураЗвонка.ВнешнийНомер;	
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.hCall = 2; 
		НоваяЗапись.Звонок 						= ТелЗвонок.Ссылка;
		НоваяЗапись.НомерТелефона				= ТелЗвонок.АбонентКакСвязаться;
		НоваяЗапись.ДатаНачала					= ТелЗвонок.Дата;
		НоваяЗапись.Входящий					= ТелЗвонок.Входящий;
		НоваяЗапись.ВнутреннийНомер				= СтруктураЗвонка.ТелефонСотрудника;
		НоваяЗапись.АТСИдентификаторЗвонка		= ТелЗвонок.АТСИдентификаторЗвонка;
		НоваяЗапись.CallData					= ТелЗвонок.АТСИдентификаторЗвонка; 		
		НоваяЗапись.Ответственный				= СтруктураЗвонка.Ответственный;
		НоваяЗапись.АбонентКонтакт				= ТелЗвонок.АбонентКонтакт; 		
		
		НаборЗаписей.Записать(); 		
		
	Иначе
		
		//Проверяем Максимальное значение hCall чтобы добавить новую запись
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	сфпИсторияЗвонков.hCall КАК hCall
		|ИЗ
		|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
		|ГДЕ
		|	сфпИсторияЗвонков.Звонок = &Звонок
		|	И сфпИсторияЗвонков.ВнутреннийНомер = &ВнутреннийНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	сфпИсторияЗвонков.hCall КАК hCall
		|ИЗ
		|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
		|ГДЕ
		|	сфпИсторияЗвонков.Звонок = &Звонок
		|
		|УПОРЯДОЧИТЬ ПО
		|	hCall УБЫВ";
		
		Запрос.УстановитьПараметр("Звонок", ТелЗвонок.Ссылка);
		Запрос.УстановитьПараметр("ВнутреннийНомер", СтруктураЗвонка.ТелефонСотрудника);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
			
			hCall = ВыборкаДетальныеЗаписи.hCall;
			
			НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
			НаборЗаписей.Отбор.hCall.Установить(hCall); 		
			
			НаборЗаписей.Прочитать();
			
			Для Каждого ТекЗапись из НаборЗаписей Цикл
				
				ТекЗапись.ДатаОтвета 					= СтруктураЗвонка.Дата;
				ТекЗапись.ИдентификаторЗаписи			= ТелЗвонок.АТСИдентификаторЗвонка + "_" + СтруктураЗвонка.Логин;
				
			КонецЦикла;			
			
			НаборЗаписей.Записать();		
			
			НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
			НаборЗаписей.Отбор.hCall.Установить(1);
			
			НаборЗаписей.Прочитать();
			
			Для Каждого ТекЗапись из НаборЗаписей Цикл
				
				ТекЗапись.ДатаОтвета 				= СтруктураЗвонка.Дата;
				ТекЗапись.ИдентификаторЗаписи		= ТелЗвонок.АТСИдентификаторЗвонка + "_" + СтруктураЗвонка.Логин;
				ТекЗапись.Ответственный				= СтруктураЗвонка.Ответственный;
				
			КонецЦикла;
			
			НаборЗаписей.Записать();			
			
		Иначе
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда			
				hCall = ВыборкаДетальныеЗаписи.hCall + 1;
			Иначе
				hCall = 2; 			
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
			НаборЗаписей.Отбор.hCall.Установить(hCall); 		
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.hCall 						= hCall; 
			НоваяЗапись.Звонок 						= ТелЗвонок.Ссылка;
			НоваяЗапись.НомерТелефона				= ТелЗвонок.АбонентКакСвязаться;
			НоваяЗапись.ДатаНачала					= ТелЗвонок.Дата;
			НоваяЗапись.Входящий					= ТелЗвонок.Входящий;
			НоваяЗапись.ВнутреннийНомер				= СтруктураЗвонка.ТелефонСотрудника;
			НоваяЗапись.АТСИдентификаторЗвонка		= ТелЗвонок.АТСИдентификаторЗвонка;
			НоваяЗапись.CallData					= ТелЗвонок.АТСИдентификаторЗвонка; 
			НоваяЗапись.Ответственный				= СтруктураЗвонка.Ответственный;
			НоваяЗапись.АбонентКонтакт				= ТелЗвонок.АбонентКонтакт; 		
			
			НаборЗаписей.Записать(); 
			
		КонецЕсли;							
		
	КонецЕсли;
	
	Возврат ТелЗвонок.Ссылка;
	
КонецФункции // сфпСоздатьТелефонныйЗвонок()

Функция Билайн_ЗавершитьТелефонныйЗвонок(СтруктураЗвонка)
	
	НайденныйЗвонок = Документы.ТелефонныйЗвонок.НайтиПоРеквизиту("АТСИдентификаторЗвонка", СтруктураЗвонка.ИдентификаторЗвонка);
	
	Если ЗначениеЗаполнено(НайденныйЗвонок) Тогда	 
		ТелЗвонок = НайденныйЗвонок.ПолучитьОбъект();
	Иначе
		Возврат Документы.ТелефонныйЗвонок.ПустаяСсылка();
	КонецЕсли;
	
	ТелЗвонок.сфпИдентификаторЗаписи		= СтруктураЗвонка.СсылкаНаЗапись;
	ТелЗвонок.сфпДлительностьЗвонка			= СтруктураЗвонка.Дата - ТелЗвонок.Дата;
	
	ТелЗвонок.Записать();
	
	НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
	НаборЗаписей.Отбор.hCall.Установить(1); //Транк всегда первый
	
	НаборЗаписей.Прочитать();
	
	Для Каждого НоваяЗапись из НаборЗаписей Цикл		
		НоваяЗапись.ДатаОкончания = СтруктураЗвонка.Дата;		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	сфпИсторияЗвонков.hCall КАК hCall
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	|ГДЕ
	|	сфпИсторияЗвонков.Звонок = &Звонок
	|	И сфпИсторияЗвонков.ВнутреннийНомер = &ВнутреннийНомер";
	
	Запрос.УстановитьПараметр("ВнутреннийНомер", СтруктураЗвонка.ТелефонСотрудника);
	Запрос.УстановитьПараметр("Звонок", ТелЗвонок.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		НаборЗаписей = РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Звонок.Установить(ТелЗвонок.Ссылка);
		НаборЗаписей.Отбор.hCall.Установить(ВыборкаДетальныеЗаписи.hCall); 
		
		НаборЗаписей.Прочитать();
		
		Для Каждого НоваяЗапись из НаборЗаписей Цикл		
			НоваяЗапись.ДатаОкончания = СтруктураЗвонка.Дата;		
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;	
	
	ВидСобытияПропущенногоЗвонка = Константы.ВидСобытияПропущенногоЗвонка.Получить();
	РольИсполнителяПоПропущеннымЗвонкам = Константы.РольИсполнителяПоПропущеннымЗвонкам.Получить();
	
	Если Константы.ИспользоватьБППропущенныеЗвонки.Получить()
		И ТелЗвонок.сфпСостояниеЗвонка = перечисления.сфпСостоянияЗвонков.Пропущенный 
		И ТелЗвонок.Входящий
		И ЗначениеЗаполнено(РольИсполнителяПоПропущеннымЗвонкам)
		И ЗначениеЗаполнено(ВидСобытияПропущенногоЗвонка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	сфпИсторияЗвонков.hCall КАК hCall
		|ИЗ
		|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
		|ГДЕ
		|	сфпИсторияЗвонков.Звонок = &Звонок
		|	И сфпИсторияЗвонков.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)";
		
		Запрос.УстановитьПараметр("Звонок", ТелЗвонок.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда //Больше нет записей, где не заполнена дата окончания и звонок пропущенный
			
			
			#Область ЧерезСобытие
			
			//	СвязанноеСобытие = Документы.CRM_Событие.СоздатьДокумент();
			//	
			//	Клиент = Справочники.ФизическиеЛица.ПолучитьПартнера(ТелЗвонок.АбонентКонтакт);
			//	КонтактноеЛицо = ТелЗвонок.АбонентКонтакт;
			//	Телефон = ТелЗвонок.АбонентКакСвязаться;
			//	ДанныеЗаполнения = Новый Структура;
			//	
			//	ДанныеЗаполнения.Вставить("Партнер", 			Клиент);
			//	ДанныеЗаполнения.Вставить("КонтактноеЛицо", 	КонтактноеЛицо);
			//	ДанныеЗаполнения.Вставить("Проект", 			ВидСобытияПропущенногоЗвонка);
			//	ДанныеЗаполнения.Вставить("Автор", 				Справочники.Пользователи.Система);
			//	ДанныеЗаполнения.Вставить("Место", 				Телефон);
			//	
			//	СвязанноеСобытие.Заполнить(ДанныеЗаполнения);
			//
			//	СвязанноеСобытие.Описание = "Пропущенный звонок"; 		
			//	СвязанноеСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.ВРаботе;
			//	СвязанноеСобытие.РольИсполнителя = РольИсполнителяПоПропущеннымЗвонкам;
			//	СвязанноеСобытие.Ответственный = Неопределено;
			//	
			//	СвязанноеСобытие.Записать();
			
			
			#КонецОбласти
			
			#Область ЧерезБП
			Автор = Справочники.Пользователи.Система;
			Клиент = Справочники.ФизическиеЛица.ПолучитьПартнера(ТелЗвонок.АбонентКонтакт);
			
			КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПропущенныеЗвонки;
			СрокПовтроного = Константы.СрокПовторногоПропущенногоЗвонка.Получить();
			
			ТекЗВонок = ТелЗвонок.Ссылка;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
			|ИЗ
			|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
			|ГДЕ
			|	CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута
			|	И CRM_БизнесПроцесс.Партнер = &Партнер
			|	И CRM_БизнесПроцесс.ДатаСтарта > &ПериодПовтора 
			|	И НЕ CRM_БизнесПроцесс.Завершен";
			
			Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
			Запрос.УстановитьПараметр("Партнер", Клиент);
			Запрос.УстановитьПараметр("ПериодПовтора", ТекущаяДатаСеанса()- СрокПовтроного*60);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
				
				БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
				
				БизнесПроцесс.КартаМаршрута = КартаМаршрута;
				БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
				БизнесПроцесс.Наименование = "Пропущенный звонок";
				БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
				БизнесПроцесс.Дата = ТекущаяДатаСеанса();
				БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
				БизнесПроцесс.НомерВерсииКартыМаршрута = БизнесПроцесс.КартаМаршрута.НомерВерсии; 
				БизнесПроцесс.КонтактноеЛицо = ТелЗвонок.АбонентКонтакт;
				
				ТелефонПоМаске = Справочники.ШаблоныНомеровТелефонов.ОбработатьНомерТелефонаПоМаске(ТелЗвонок.АбонентКакСвязаться);
				БизнесПроцесс.Телефон = ТелефонПоМаске;
				
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
				|ГДЕ
				|	CRM_ТочкиМаршрутов.Владелец = &Владелец
				|	И CRM_ТочкиМаршрутов.Вид = &Вид
				|	И НЕ CRM_ТочкиМаршрутов.НеИспользуется
				|	И НЕ CRM_ТочкиМаршрутов.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("Вид", Перечисления.CRM_ВидыТочекМаршрута.Старт);
				Запрос.УстановитьПараметр("Владелец", БизнесПроцесс.КартаМаршрута);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					БизнесПроцесс.ТочкаСтарта = ВыборкаДетальныеЗаписи.Ссылка;
				КонецЦикла;
				
				БизнесПроцесс.Автор = Автор;						
				БизнесПроцесс.Партнер = Клиент; 			
				БизнесПроцесс.Основание = ТелЗвонок.Ссылка;
				БизнесПроцесс.Предмет = ТелЗвонок.Ссылка;
				БизнесПроцесс.Описание = "Перезвонить на пропущенный звонок"; 			
				БизнесПроцесс.Записать();
				БизнесПроцесс.Старт(); 	
				
				Попытка
					
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
					Запрос.Текст = 
					"ВЫБРАТЬ
					|              ЗадачаИсполнителя.Ссылка
					|ИЗ
					|              Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
					|ГДЕ
					|              ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
					
					ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();  
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
						
						//Создаем Событие
						СвязанноеСобытие = Документы.CRM_Событие.СоздатьДокумент();
						
						ДанныеЗаполнения = Новый Структура;
						
						ПроектСобытия = КартаМаршрута.ВидСвязанногоСобытия;			
						
						ДанныеЗаполнения.Вставить("Партнер", 			БизнесПроцесс.Партнер);
						ДанныеЗаполнения.Вставить("КонтактноеЛицо", 	БизнесПроцесс.КонтактноеЛицо);
						ДанныеЗаполнения.Вставить("Проект", 			ПроектСобытия);
						ДанныеЗаполнения.Вставить("Автор", 				Автор);
						ДанныеЗаполнения.Вставить("Ответственный", 		Автор);
						ДанныеЗаполнения.Вставить("Место", 				БизнесПроцесс.Телефон);
						
						СвязанноеСобытие.Заполнить(ДанныеЗаполнения);
						
						СвязанноеСобытие.СвязаннаяЗадача = ЗадачаОбъект.Ссылка; 		
						СвязанноеСобытие.Описание = ЗадачаОбъект.Описание; 		
						СвязанноеСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано;
						СвязанноеСобытие.Записать();
						
						СтруктураИнтереса = УПДК_Маркетинг.ПолучитьСтруктуруИнтересаПоДокументу(ТекЗВонок);
						
						Если ЗначениеЗаполнено(СтруктураИнтереса.ИнструментИнтереса) Тогда
							
							НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Сделка.Установить(СвязанноеСобытие.Ссылка);
							
							Запись = НаборЗаписей.Добавить();
							Запись.Период = СвязанноеСобытие.Дата;
							Запись.Сделка = СвязанноеСобытие.Ссылка;
							Запись.Партнер = СвязанноеСобытие.Партнер;
							Запись.КаналПервичногоИнтереса = СтруктураИнтереса.ИнструментИнтереса;
							ЗаполнитьЗначенияСвойств(Запись, СтруктураИнтереса);
							
							НаборЗаписей.Записать();
							
						КонецЕсли;
						
						ЗадачаОбъект.СвязанноеСобытие = СвязанноеСобытие.Ссылка; 
						ЗадачаОбъект.Предмет 		= СвязанноеСобытие.Ссылка; 
						
						ЗадачаОбъект.Записать();
						
						БизнесПроцесс.Предмет 		= СвязанноеСобытие.Ссылка;
						БизнесПроцесс.Записать();
						
					КонецЦикла;  
					
				Исключение
					
					
				КонецПопытки;
				
			КонецЕсли; 		
			#КонецОбласти
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТелЗвонок.Ссылка; 
	
КонецФункции // сфпСоздатьТелефонныйЗвонок()

Функция Билайн_СоздатьПолучитьСобытие(СтруктураЗвонка)
	
	ДанныеЗвонка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураЗвонка.НовыйЗвонок, "АбонентКонтакт,Входящий");
	хСсылкаНаСобытие = ХранилищеОбщихНастроек.Загрузить("СсылкаНаСобытие",,,Строка(СтруктураЗвонка.Ответственный));
	Если хСсылкаНаСобытие <> Неопределено И ТипЗнч(хСсылкаНаСобытие) = Тип("ДокументСсылка.CRM_Событие") Тогда
		
		Если Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(хСсылкаНаСобытие.Место),10) =
			Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию( СтруктураЗвонка.ТелефонКонтакта),10) 
			И хСсылкаНаСобытие.ВходящееИсходящее = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее
			И (хСсылкаНаСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано
			ИЛИ хСсылкаНаСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.ВРаботе)			
			Тогда 			
			
			Если НЕ ДанныеЗвонка.Входящий Тогда				
				ТекОбъект = СтруктураЗвонка.НовыйЗвонок.ПолучитьОбъект();
				ТекОбъект.ВзаимодействиеОснование = хСсылкаНаСобытие;
				ТекОбъект.Записать();    
				
				ТекОбъект = хСсылкаНаСобытие.ПолучитьОбъект();
				ТекОбъект.Дата = СтруктураЗвонка.Дата;
				ТекОбъект.ОкончаниеСобытия = СтруктураЗвонка.Дата + СтруктураЗвонка.Длительность; 
				ТекОбъект.Записать();
			КонецЕсли;
			
			Возврат хСсылкаНаСобытие;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если событие уже создавалось на основании телефонного звонка, то новое событие не создаем
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	CRM_Событие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Событие КАК CRM_Событие
	|ГДЕ
	|	CRM_Событие.ДокументОснование = &ДокументОснование
	|	И CRM_Событие.Ответственный = &Ответственный";
	
	Запрос.УстановитьПараметр("ДокументОснование", СтруктураЗвонка.НовыйЗвонок);
	Запрос.УстановитьПараметр("Ответственный", СтруктураЗвонка.Ответственный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда		
		Возврат Выборка.Ссылка;	
	Иначе
		СобытиеОбъект = Документы.CRM_Событие.СоздатьДокумент();
	КонецЕсли; 
	
	НовоеСобытие = ИнтеграцияАТССервер.ПолучитьСтруктуруДляЗаполненияСобытия();
	
	Пользователь = СтруктураЗвонка.Ответственный;
	
	Партнер = Справочники.Партнеры.ПустаяСсылка();
	КонтаткноеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	НеобработанныйКонтакт = Истина;
	
	Контакт = ДанныеЗвонка.АбонентКонтакт;
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			
			Партнер = Контакт;
			//Поле КЛ не заполняем, так как звонит не физическое лицо. Необходимо выбрать из списка на форме.
			
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			КонтактноеЛицо = Контакт;
			Партнер = Справочники.ФизическиеЛица.ПолучитьПартнера(КонтактноеЛицо, Истина);
			
		КонецЕсли;				
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			НеобработанныйКонтакт = РегистрыСведений.СтатусыКлиентов.ПолучитьСтатусКлиента(Партнер) = Перечисления.СтатусыКлиента.НеобработанныйКонтакт;
		КонецЕсли;
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	Период = УПДК_ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ПериодОткрытияЗвонков_Билайн") * 60 * 60;
	
	Если Период > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_Событие.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.CRM_Событие КАК CRM_Событие
		|ГДЕ
		|	CRM_Событие.Партнер = &Партнер
		|	И CRM_Событие.Дата > &Дата
		|	И CRM_Событие.ВидСобытия = &ВидСобытия";
		
		Запрос.УстановитьПараметр("ВидСобытия", Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок);
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса() - Период);
		Запрос.УстановитьПараметр("Партнер", Партнер);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			//НЕ СОЗДАЕМ новое событие
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеЗвонка.Входящий Тогда
		
		Если НеобработанныйКонтакт Тогда
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ПервичныйВходящий, Пользователь);
		Иначе
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ВторичныйВходящий, Пользователь);
		КонецЕсли;	
		
		НовоеСобытие["ВходящееИсходящее"]	= Перечисления["CRM_ВходящееИсходящееСобытие"].Входящее;
		
	Иначе
		
		Если НеобработанныйКонтакт Тогда
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ПервичныйИсходящий, Пользователь);			
		Иначе
			НовоеСобытие["Проект"] = УПДК_Маркетинг.ПолучитьПроектПоВидуЗвонка(Перечисления.УПДК_ВидыЗвонков.ВторичныйИсходящий, Пользователь);			
			
		КонецЕсли;
		
		НовоеСобытие["ВходящееИсходящее"]	= Перечисления["CRM_ВходящееИсходящееСобытие"].Исходящее;
		
	КонецЕсли;
	
	НовоеСобытие["Дата"]				= СтруктураЗвонка.Дата;
	//НовоеСобытие["ОкончаниеСобытия"]	= СтруктураЗвонка.Дата;
	НовоеСобытие["Автор"]				= ?(ЗначениеЗаполнено(СтруктураЗвонка.Автор), 
	СтруктураЗвонка.Автор, 
	сфпСофтФонПроСервер.сфпТекущийПользователь());
	НовоеСобытие["Ответственный"]		= СтруктураЗвонка.Ответственный;
	НовоеСобытие["Важность"]			= Перечисления["ВариантыВажностиВзаимодействия"].Обычная;
	НовоеСобытие["Тема"]				= НСтр("ru='#Создан автоматически при загрузке с виртуальной АТС'");
	
	НовоеСобытие["ДокументОснование"] 	= СтруктураЗвонка.НовыйЗвонок;
	
	НовоеСобытие["ВидСобытия"]			= Перечисления["CRM_ВидыСобытий"].ТелефонныйЗвонок;
	НовоеСобытие["СостояниеСобытия"]	= Справочники["CRM_СостоянияСобытий"].ВРаботе;
	
	НовоеСобытие["Место"] 			= СтруктураЗвонка.ТелефонКонтакта;
	
	НовоеСобытие["Партнер"] 		= Партнер;
	НовоеСобытие["КонтактноеЛицо"] 	= КонтактноеЛицо;
	
	Если ЗначениеЗаполнено(НовоеСобытие.Партнер)
		И НовоеСобытие.Партнер.CRM_ТипОтношений = Справочники.CRM_ТипыОтношений.АгентствоНедвижимости Тогда
		
		НовоеСобытие.УПДК_АгентствоНедвижимости = НовоеСобытие.Партнер;
		НовоеСобытие.УПДК_Агент = НовоеСобытие.КонтактноеЛицо;
		НовоеСобытие.Партнер = Справочники.Партнеры.ПустаяСсылка();
		НовоеСобытие.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		НовоеСобытие.УПДК_ЗвонилАгент = Истина;
		
	КонецЕсли;
	
	СобытиеОбъект = Документы.CRM_Событие.СоздатьДокумент();
	СобытиеОбъект.Заполнить(НовоеСобытие);
	НовоеСобытие = НовоеСобытие;
	
	Попытка
		СобытиеОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Билайн_ЗаписьСобытия", УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
		
		НовыйЗвонокОбъект = СтруктураЗвонка.НовыйЗвонок.ПолучитьОбъект();		
		НовыйЗвонокОбъект.ВзаимодействиеОснование = СобытиеОбъект.Ссылка;
		НовыйЗвонокОбъект.Записать();
		
	КонецЕсли;	
	
	Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(СобытиеОбъект.Ссылка);
	
	Если Не ЗначениеЗаполнено(Сделка) Тогда
		Документы.Сделка.ДобавитьНовуюСделку(СобытиеОбъект.Ссылка);
	КонецЕсли;
	
	Возврат СобытиеОбъект.Ссылка;
	
КонецФункции // сфпСоздатьСобытие()

Функция Билайн_ПолучитьСобытие(СтруктураЗвонка)
	
	хСсылкаНаСобытие = ХранилищеОбщихНастроек.Загрузить("СсылкаНаСобытие",,,Строка(СтруктураЗвонка.Ответственный));
	Если хСсылкаНаСобытие <> Неопределено И ТипЗнч(хСсылкаНаСобытие) = Тип("ДокументСсылка.CRM_Событие") Тогда
		
		Если Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(хСсылкаНаСобытие.Место),10) =
			Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию( СтруктураЗвонка.ТелефонКонтакта),10) 
			И хСсылкаНаСобытие.ВходящееИсходящее = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее
			И хСсылкаНаСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано
			
			Тогда
			
			ТекОбъект = СтруктураЗвонка.НовыйЗвонок.ПолучитьОбъект();
			ТекОбъект.ВзаимодействиеОснование = хСсылкаНаСобытие;
			ТекОбъект.Записать();    
			
			ТекОбъект = хСсылкаНаСобытие.ПолучитьОбъект();
			ТекОбъект.Дата = СтруктураЗвонка.Дата;
			ТекОбъект.ОкончаниеСобытия = СтруктураЗвонка.Дата + СтруктураЗвонка.Длительность; 
			ТекОбъект.Записать();
			Возврат хСсылкаНаСобытие;
			
		КонецЕсли;
		
	КонецЕсли;    
	
	//Если событие уже создавалось на основании телефонного звонка, то новое событие не создаем
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	CRM_Событие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Событие КАК CRM_Событие
	|ГДЕ
	|	CRM_Событие.ДокументОснование = &ДокументОснование
	|	И CRM_Событие.Ответственный = &Ответственный";
	
	Запрос.УстановитьПараметр("ДокументОснование", СтруктураЗвонка.НовыйЗвонок);
	Запрос.УстановитьПараметр("Ответственный", СтруктураЗвонка.Ответственный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // сфпСоздатьСобытие()

Процедура Билайн_ОбработатьСобытиеЗвонкаПереопределяемый(ПрерватьВыполнение, СтруктураЗвонка, ПараметрыТела)
	
КонецПроцедуры


#КонецОбласти //Билайн

#Область UIS
//Для UIS возвращает ответ, в случае если для пользователя не ввели данные по атс UIS 
//в справочнике Пользователи
Процедура ПользовательНеНайден(ЗаписьЖурнала, Логин, ФИОпользователя, Ответ)
	
	ТекстОшибки = СтрШаблон("Логин %1 пользователя %2 не заполнен в справочнике пользователя", Логин, ФИОпользователя);
	Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
	Ответ.КодСостояния = 400;			
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 400, "Пользователь не найден", Логин);
	
КонецПроцедуры




#КонецОбласти

Процедура ПерезаписатьПоследнийЗвонок(Телефон)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТелефонныйЗвонок.Ссылка КАК Ссылка,
	|	CRM_Событие.Ссылка КАК Событие
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Событие КАК CRM_Событие
	|		ПО ТелефонныйЗвонок.ВзаимодействиеОснование = CRM_Событие.Ссылка
	|ГДЕ
	|	ТелефонныйЗвонок.АбонентКакСвязаться = &Телефон
	|	И ТелефонныйЗвонок.Дата <= &ТекДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТелефонныйЗвонок.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Телефон", Телефон);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ТекОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТекОбъект.Записать();
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Событие) Тогда
			ТекОбъект = ВыборкаДетальныеЗаписи.Событие.ПолучитьОбъект();
			ТекОбъект.Записать();		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти