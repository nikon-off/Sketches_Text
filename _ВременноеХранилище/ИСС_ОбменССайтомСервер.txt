
Процедура ОбработчикСинхронизацияОбъектов() Экспорт
	
	НастройкиИнтеграции = ИСС_НастройкиИнтеграцииСервер.ПолучитьТекущиеНастройки();
	
	Если НастройкиИнтеграции = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,,
		"Произошла ошибка при интеграции с сайтом. Не указаны настройки интеграции."); 
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиИнтеграции.ИнтеграцияАктивна Тогда
		Возврат;
	КонецЕсли;
	
	ИСС_HTTPServer = НастройкиИнтеграции.HTTPServer;
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("Предмет", Неопределено);
	ПараметрыСинхронизации.Вставить("ВременныеДанные", Неопределено);
	ПараметрыСинхронизации.Вставить("HTTPServer", ИСС_HTTPServer);
	ПараметрыСинхронизации.Вставить("НастройкиИнтеграции", НастройкиИнтеграции);
	ПараметрыСинхронизации.Вставить("ВидЦены", НастройкиИнтеграции.ВидЦены);
	
	УстановитьПривилегированныйРежим(Истина);		
	ОбновлениеЦенИСтатусовОН(ПараметрыСинхронизации);
	
	Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСС_СообщенияИнтегрированнойСистемы.Предмет КАК Предмет,
		|	ИСС_СообщенияИнтегрированнойСистемы.ТипДанных КАК ТипДанных,
		|	ИСС_СообщенияИнтегрированнойСистемы.ДатаСообщения КАК ДатаСообщения,
		|	ИСС_СообщенияИнтегрированнойСистемы.ВременныеДанные КАК ВременныеДанные
		|ИЗ
		|	РегистрСведений.ИСС_СообщенияИнтегрированнойСистемы КАК ИСС_СообщенияИнтегрированнойСистемы
		|ГДЕ
		|	ИСС_СообщенияИнтегрированнойСистемы.ТипДанных <> ЗНАЧЕНИЕ(Перечисление.ИСС_ТипыОбъектовДляОтправки.ОбновлениеЦенИСтатусовОН)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();			
		
		ПараметрыСинхронизации.Предмет = Выборка.Предмет;
		ПараметрыСинхронизации.ВременныеДанные = Выборка.ВременныеДанные;
		
		
		Если Выборка.ТипДанных = Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейПредброни Тогда 			
			ОбновлениеПолейПредБрони(ПараметрыСинхронизации);	
		ИначеЕсли Выборка.ТипДанных = Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейБрони Тогда			
			ОбновлениеПолейБрони(ПараметрыСинхронизации);		
		ИначеЕсли Выборка.ТипДанных = Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейПередаточногоАкта Тогда			
			ОбновлениеПолейПередаточногоАкта(ПараметрыСинхронизации);			
		ИначеЕсли Выборка.ТипДанных = Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейДоговора Тогда			
			ОбновлениеПолейДоговора(ПараметрыСинхронизации);
		ИначеЕсли Выборка.ТипДанных = Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейСобытия Тогда			
			ОбновлениеПолейСобытия(ПараметрыСинхронизации);
		ИначеЕсли Выборка.ТипДанных = Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеНомераТелефонаФизЛица Тогда			
			ОбновлениеНомераТелефонаФизЛица(ПараметрыСинхронизации);
		ИначеЕсли Выборка.ТипДанных = Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеФИОФизЛица Тогда			
			ОбновлениеФИОФизЛица(ПараметрыСинхронизации);
		КонецЕсли;
		
	КонецЦикла;    	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновлениеПолейПредБрони(ПараметрыСинхронизации)
	
	ПутьМетода = ПараметрыСинхронизации.НастройкиИнтеграции.СоответствиеМетодов.Получить(Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейПредброни);
	
	Если ПутьМетода = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейПредброни,
		"Произошла ошибка при интеграции с сайтом. Не указан путь метода API интеграции для одного из обменов.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,ПараметрыСинхронизации.НастройкиИнтеграции.ИмяПользователя,ПараметрыСинхронизации.НастройкиИнтеграции.Пароль,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ПутьМетода); 
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_ПредварительныйЗаказКлиента.Ссылка КАК Ссылка,
	|	УПДК_ПредварительныйЗаказКлиента.Клиент КАК Клиент,
	|	УПДК_ПредварительныйЗаказКлиента.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	УПДК_ПредварительныйЗаказКлиента.Дата КАК Дата,
	|	УПДК_ПредварительныйЗаказКлиента.Ответственный КАК Ответственный,
	|	УПДК_ПредварительныйЗаказКлиента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.УПДК_ПредварительныйЗаказКлиента КАК УПДК_ПредварительныйЗаказКлиента
	|ГДЕ
	|	УПДК_ПредварительныйЗаказКлиента.Ссылка = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", ПараметрыСинхронизации.Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//++ Структура HTTP запроса для отправки
	Структура = Новый Структура;
	//-- Структура HTTP запроса для отправки
	
	Пока Выборка.Следующий() Цикл
		
		Структура.Вставить("id_prereserv",XMLСтрока(Выборка.Ссылка));
		Структура.Вставить("id_client",XMLСтрока(Выборка.Клиент));
		Структура.Вставить("id_object",XMLСтрока(Выборка.ОбъектНедвижимости));
		Структура.Вставить("date_prereserv",Выборка.Дата);
		Структура.Вставить("id_responsible",XMLСтрока(Выборка.Ответственный));
		Структура.Вставить("cost",Выборка.СуммаДокумента);
		
	КонецЦикла;	
	
	//++ Структура запроса
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	мСтрока = Запись.Закрыть();
	//-- Структура запроса
	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Обновление полей ""Пред-брони"" на сайте", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, мРезультат.ПолучитьТелоКакСтроку());
	
	Если мРезультат.КодСостояния = 200 И СтруктураОтвета.status = "success" Тогда
		ПараметрыСинхронизации.Вставить("ИдентификаторНаСторонеСайта", СтруктураОтвета.id_prereserv);
		ДобавитьИдентификаторПредметаНаСторонеСайта(ПараметрыСинхронизации);
		ОчиститьДанныеДляСинхронизации(ПараметрыСинхронизации.Предмет);
	Иначе
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,ПараметрыСинхронизации.Предмет,"Произошла ошибка при интеграции с сайтом.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеПолейБрони(ПараметрыСинхронизации)
	
	ПутьМетода = ПараметрыСинхронизации.НастройкиИнтеграции.СоответствиеМетодов.Получить(Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейБрони);
	
	Если ПутьМетода = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейБрони,
		"Произошла ошибка при интеграции с сайтом. Не указан путь метода API интеграции для одного из обменов.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,ПараметрыСинхронизации.НастройкиИнтеграции.ИмяПользователя,ПараметрыСинхронизации.НастройкиИнтеграции.Пароль,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ПутьМетода); 
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_ЗаказКлиента.Ссылка КАК Ссылка,
	|	УПДК_ЗаказКлиента.Клиент КАК Клиент,
	|	УПДК_ЗаказКлиента.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	УПДК_ЗаказКлиента.Дата КАК Дата,
	|	УПДК_ЗаказКлиента.СрокБронирования КАК СрокБронирования,
	|	УПДК_ЗаказКлиента.Ответственный КАК Ответственный,
	|	УПДК_ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	УПДК_ЗаказКлиента.Скидка КАК РучнаяСкидка,
	|	УПДК_ЗаказКлиента.ПредЗаказ КАК ПредЗаказ,
	|	УПДК_ЗаказКлиента.СкидкиНаценки.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		СкидкаНаценка КАК СкидкаНаценка,
	|		МаркетинговаяКампания КАК МаркетинговаяКампания,
	|		ТипСкидкиНаценки КАК ТипСкидкиНаценки,
	|		Процент КАК Процент,
	|		Сумма КАК Сумма,
	|		РучнаяСкидка КАК РучнаяСкидка
	|	) КАК СкидкиНаценки
	|ИЗ
	|	Документ.УПДК_ЗаказКлиента КАК УПДК_ЗаказКлиента
	|ГДЕ
	|	УПДК_ЗаказКлиента.Ссылка = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", ПараметрыСинхронизации.Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//++ Структура HTTP запроса для отправки
	Структура = Новый Структура;
	//-- Структура HTTP запроса для отправки
	
	Пока Выборка.Следующий() Цикл
		
		Структура.Вставить("id_reserv",XMLСтрока(Выборка.Ссылка));
		Структура.Вставить("id_client",XMLСтрока(Выборка.Клиент));
		Структура.Вставить("id_object",XMLСтрока(Выборка.ОбъектНедвижимости));
		Структура.Вставить("date_reserv",Выборка.Дата);
		Структура.Вставить("valid_date",Выборка.СрокБронирования);
		Структура.Вставить("id_responsible",XMLСтрока(Выборка.Ответственный));
		Структура.Вставить("id_prereserv",XMLСтрока(Выборка.ПредЗаказ));
		Структура.Вставить("cost",Выборка.СуммаДокумента);
		Структура.Вставить("manual_discount",Выборка.РучнаяСкидка);
		
		ТаблицаСкидок = Выборка.СкидкиНаценки.Выгрузить();
		
		МассивСкидок = Новый Массив;
		
		Для Каждого СтрокаСкидки Из ТаблицаСкидок Цикл
			
			СтруктураСкидки = Новый Структура;
			
			СтруктураСкидки.Вставить("id_discount",XMLСтрока(СтрокаСкидки.СкидкаНаценка));
			СтруктураСкидки.Вставить("amount",СтрокаСкидки.Сумма);
			СтруктураСкидки.Вставить("name_discount",СтрокаСкидки.СкидкаНаценка.Наименование);
			
			МассивСкидок.Добавить(СтруктураСкидки);
			
		КонецЦикла;
		
		Структура.Вставить("discount",МассивСкидок);
		
	КонецЦикла;	
	
	//++ Структура запроса
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	мСтрока = Запись.Закрыть();
	//-- Структура запроса
	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Обновление полей ""Брони"" на сайте", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, мРезультат.ПолучитьТелоКакСтроку());
	
	Если мРезультат.КодСостояния = 200 И СтруктураОтвета.status = "success" Тогда
		ПараметрыСинхронизации.Вставить("ИдентификаторНаСторонеСайта", СтруктураОтвета.id_reserv);
		ДобавитьИдентификаторПредметаНаСторонеСайта(ПараметрыСинхронизации);
		ОчиститьДанныеДляСинхронизации(ПараметрыСинхронизации.Предмет);
	Иначе
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,ПараметрыСинхронизации.Предмет,"Произошла ошибка при интеграции с сайтом."); 
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеПолейПередаточногоАкта(ПараметрыСинхронизации)
	
	ПутьМетода = ПараметрыСинхронизации.НастройкиИнтеграции.СоответствиеМетодов.Получить(Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейПередаточногоАкта);
	
	Если ПутьМетода = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейПредброни,
		"Произошла ошибка при интеграции с сайтом. Не указан путь метода API интеграции для одного из обменов.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,ПараметрыСинхронизации.НастройкиИнтеграции.ИмяПользователя,ПараметрыСинхронизации.НастройкиИнтеграции.Пароль,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ПутьМетода); 
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_ПередаточныйАкт.Ссылка КАК Ссылка,
	|	УПДК_ПередаточныйАкт.Клиент КАК Клиент,
	|	УПДК_ПередаточныйАкт.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	УПДК_ПередаточныйАкт.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА УПДК_ПередаточныйАкт.Статус = ЗНАЧЕНИЕ(Перечисление.УПДК_СтатусыПередаточногоАкта.Подписан)
	|			ТОГДА УПДК_ПередаточныйАкт.ДатаПодписания
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДатаПодписания
	|ИЗ
	|	Документ.УПДК_ПередаточныйАкт КАК УПДК_ПередаточныйАкт
	|ГДЕ
	|	УПДК_ПередаточныйАкт.Ссылка = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", ПараметрыСинхронизации.Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//++ Структура HTTP запроса для отправки
	Структура = Новый Структура;
	//-- Структура HTTP запроса для отправки
	
	Пока Выборка.Следующий() Цикл
		
		Структура.Вставить("id_act",XMLСтрока(Выборка.Ссылка));
		Структура.Вставить("id_client",XMLСтрока(Выборка.Клиент));
		Структура.Вставить("id_object",XMLСтрока(Выборка.ОбъектНедвижимости)); 
		Структура.Вставить("id_responsible",XMLСтрока(Выборка.Ответственный));
		Структура.Вставить("date_signing",Выборка.ДатаПодписания);
		Структура.Вставить("act_link","");
		
	КонецЦикла;	
	
	//++ Структура запроса
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	мСтрока = Запись.Закрыть();
	//-- Структура запроса
	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Обновление полей ""Передаточного акта"" на сайте", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, мРезультат.ПолучитьТелоКакСтроку()); 
	
	Если мРезультат.КодСостояния = 200 И СтруктураОтвета.status = "success" Тогда
		ПараметрыСинхронизации.Вставить("ИдентификаторНаСторонеСайта", СтруктураОтвета.id_act);
		ДобавитьИдентификаторПредметаНаСторонеСайта(ПараметрыСинхронизации);
		ОчиститьДанныеДляСинхронизации(ПараметрыСинхронизации.Предмет);
		
	Иначе
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,ПараметрыСинхронизации.Предмет,"Произошла ошибка при интеграции с сайтом.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеПолейДоговора(ПараметрыСинхронизации)
	
	ПутьМетода = ПараметрыСинхронизации.НастройкиИнтеграции.СоответствиеМетодов.Получить(Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейДоговора);
	
	Если ПутьМетода = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейДоговора,
		"Произошла ошибка при интеграции с сайтом. Не указан путь метода API интеграции для одного из обменов.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,ПараметрыСинхронизации.НастройкиИнтеграции.ИмяПользователя,ПараметрыСинхронизации.НастройкиИнтеграции.Пароль,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ПутьМетода); 
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияНедвижимости.Ссылка КАК Ссылка,
	|	РеализацияНедвижимости.Клиент КАК Клиент,
	|	РеализацияНедвижимости.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	РеализацияНедвижимости.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияНедвижимости.Ответственный КАК Ответственный,
	|	РеализацияНедвижимости.СпособПриобретения КАК СпособПриобретения,
	|	ВЫБОР
	|		КОГДА РеализацияНедвижимости.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровСПокупателями.Подписан)
	|			ТОГДА РеализацияНедвижимости.ДатаПодписания
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДатаПодписания,
	|	ВЫБОР
	|		КОГДА УПДК_СостоянияРегистрацииДокументовСрезПоследних.Состояние ЕСТЬ NULL
	|			ТОГДА """"
	|		КОГДА УПДК_СостоянияРегистрацииДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.УПДК_СостоянияРегистрацииДокументов.Зарегистрирован)
	|			ТОГДА УПДК_СостоянияРегистрацииДокументовСрезПоследних.ДатаСостояния
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДатаРегистрации,
	|	ВЫБОР
	|		КОГДА РеализацияНедвижимости.Статус = &СтатусДоговораОтменен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отменен,
	|	РеализацияНедвижимости.ЭтапыОплаты.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ДатаПлатежа КАК ДатаПлатежа,
	|		ФормаОплаты КАК ФормаОплаты,
	|		ДанныеОплаты КАК ДанныеОплаты,
	|		Завышение КАК Завышение,
	|		ПроцентОплаты КАК ПроцентОплаты,
	|		СуммаПлатежа КАК СуммаПлатежа
	|	) КАК ЭтапыОплаты,
	|	ВЫБОР
	|		КОГДА УПДК_СостояниеСогласованияДокументов.ПроцессСогласованияСтатус = &Согласован
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Согласован,
	|	РеализацияНедвижимости.Номер КАК Номер,
	|	РеализацияНедвижимости.ВидПравовогоДокумента.ТипДоговора КАК ТипДоговора
	|ИЗ
	|	Документ.РеализацияНедвижимости КАК РеализацияНедвижимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПДК_СостоянияРегистрацииДокументов.СрезПоследних(, ) КАК УПДК_СостоянияРегистрацииДокументовСрезПоследних
	|		ПО РеализацияНедвижимости.Ссылка = УПДК_СостоянияРегистрацииДокументовСрезПоследних.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПДК_СостояниеСогласованияДокументов КАК УПДК_СостояниеСогласованияДокументов
	|		ПО РеализацияНедвижимости.Ссылка = УПДК_СостояниеСогласованияДокументов.ПроцессСогласованияДокумент
	|ГДЕ
	|	РеализацияНедвижимости.Ссылка = &Предмет";
	
	
	Запрос.УстановитьПараметр("Предмет", ПараметрыСинхронизации.Предмет);
	Запрос.УстановитьПараметр("СтатусДоговораОтменен", Перечисления.СтатусыДоговоровСПокупателями.Отменен);
	Запрос.УстановитьПараметр("Согласован", Перечисления.УПДК_СтатусыПроцессаСогласования.Разрешить);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//++ Структура HTTP запроса для отправки
	Структура = Новый Структура;
	//-- Структура HTTP запроса для отправки
	
	Пока Выборка.Следующий() Цикл
		
		Структура.Вставить("id_contract",XMLСтрока(Выборка.Ссылка));
		Структура.Вставить("contract_number",XMLСтрока(Выборка.Номер));
		Структура.Вставить("id_type",XMLСтрока(Выборка.ТипДоговора));
		Структура.Вставить("type",Строка(Выборка.ТипДоговора));
		Структура.Вставить("id_client",XMLСтрока(Выборка.Клиент));
		Структура.Вставить("id_object",XMLСтрока(Выборка.ОбъектНедвижимости));
		Структура.Вставить("id_reserv",XMLСтрока(Выборка.ЗаказКлиента));
		Структура.Вставить("id_responsible",XMLСтрока(Выборка.Ответственный));
		Структура.Вставить("date_signing",Выборка.ДатаПодписания);
		Структура.Вставить("date_register",Выборка.ДатаРегистрации);
		Структура.Вставить("buying_type",XMLСтрока(Выборка.СпособПриобретения));
		Структура.Вставить("canceled",Выборка.Отменен);
		Структура.Вставить("agreed",Выборка.Согласован);
		Структура.Вставить("contract_link","");
		
		ТаблицаОплат = Выборка.ЭтапыОплаты.Выгрузить();
		ЗаполнитьТаблицуОплатыДоговора(ТаблицаОплат,Выборка.Ссылка);
		
		МассивОплат = Новый Массив;
		
		Для Каждого СтрокаОплаты Из ТаблицаОплат Цикл
			
			СтруктураОплаты = Новый Структура;
			
			СтруктураОплаты.Вставить("date",СтрокаОплаты.ДатаПлатежа);
			СтруктураОплаты.Вставить("amount",СтрокаОплаты.СуммаПлатежа);
			СтруктураОплаты.Вставить("paid_amount",СтрокаОплаты.Оплачено);
			СтруктураОплаты.Вставить("type_name",СтрокаОплаты.ФормаОплаты.Наименование);
			
		КонецЦикла;
		
	КонецЦикла;	
	
	//++ Структура запроса
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	мСтрока = Запись.Закрыть();
	//-- Структура запроса
	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Обновление полей ""Договора"" на сайте", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, мРезультат.ПолучитьТелоКакСтроку()); 
	
	Если мРезультат.КодСостояния = 200 И СтруктураОтвета.status = "success" Тогда
		ПараметрыСинхронизации.Вставить("ИдентификаторНаСторонеСайта", СтруктураОтвета.id_contract);
		ДобавитьИдентификаторПредметаНаСторонеСайта(ПараметрыСинхронизации);
		ОчиститьДанныеДляСинхронизации(ПараметрыСинхронизации.Предмет);
	Иначе
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,ПараметрыСинхронизации.Предмет,"Произошла ошибка при интеграции с сайтом."); 
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеПолейСобытия(ПараметрыСинхронизации)
	
	ПутьМетода = ПараметрыСинхронизации.НастройкиИнтеграции.СоответствиеМетодов.Получить(Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейСобытия);
	
	Если ПутьМетода = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеПолейСобытия,
		"Произошла ошибка при интеграции с сайтом. Не указан путь метода API интеграции для одного из обменов.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,ПараметрыСинхронизации.НастройкиИнтеграции.ИмяПользователя,ПараметрыСинхронизации.НастройкиИнтеграции.Пароль,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ПутьМетода); 
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	CRM_Событие.Ссылка КАК Ссылка,
	|	CRM_Событие.Партнер КАК Клиент,
	|	CRM_Событие.УПДК_ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	ЕСТЬNULL(CRM_Событие.Помещение.СсылкаНаКарту,"""") КАК СсылкаНаКарту,
	|	ЕСТЬNULL(CRM_Событие.Помещение.АдресСтрокой,"""") КАК АдресСтрокой,
	|	CRM_Событие.Дата КАК Дата,
	|	ЕСТЬNULL(CRM_Событие.СостояниеСобытия.Наименование,"""") КАК Статус,
	|	ВЫБОР
	|		КОГДА CRM_Событие.СостояниеСобытия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Отменено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отменена
	|ИЗ
	|	Документ.CRM_Событие КАК CRM_Событие
	|ГДЕ
	|	CRM_Событие.Ссылка = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", ПараметрыСинхронизации.Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//++ Структура HTTP запроса для отправки
	Структура = Новый Структура;
	//-- Структура HTTP запроса для отправки
	
	Пока Выборка.Следующий() Цикл
		
		Структура.Вставить("id_event",XMLСтрока(Выборка.Ссылка));
		Структура.Вставить("id_client",XMLСтрока(Выборка.Клиент));
		Структура.Вставить("id_object",XMLСтрока(Выборка.ОбъектНедвижимости));
		Структура.Вставить("date",Выборка.Дата);
		Структура.Вставить("address",Выборка.АдресСтрокой);
		Структура.Вставить("map_link",Выборка.СсылкаНаКарту);
		Структура.Вставить("canceled",Выборка.Отменена);
		Структура.Вставить("status",Выборка.Статус);
		
	КонецЦикла;	
	
	//++ Структура запроса
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	мСтрока = Запись.Закрыть();
	//-- Структура запроса
	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Обновление полей ""События"" на сайте", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, мРезультат.ПолучитьТелоКакСтроку());
	
	Если мРезультат.КодСостояния = 200 И СтруктураОтвета.status = "success" Тогда
		ПараметрыСинхронизации.Вставить("ИдентификаторНаСторонеСайта", СтруктураОтвета.id_event);
		ДобавитьИдентификаторПредметаНаСторонеСайта(ПараметрыСинхронизации);
		ОчиститьДанныеДляСинхронизации(ПараметрыСинхронизации.Предмет);
	Иначе
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,ПараметрыСинхронизации.Предмет,"Произошла ошибка при интеграции с сайтом.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеНомераТелефонаФизЛица(ПараметрыСинхронизации)
	
	ПутьМетода = ПараметрыСинхронизации.НастройкиИнтеграции.СоответствиеМетодов.Получить(Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеНомераТелефонаФизЛица);
	
	Если ПутьМетода = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеНомераТелефонаФизЛица,
		"Произошла ошибка при интеграции с сайтом. Не указан путь метода API интеграции для одного из обменов.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,ПараметрыСинхронизации.НастройкиИнтеграции.ИмяПользователя,ПараметрыСинхронизации.НастройкиИнтеграции.Пароль,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ПутьМетода); 
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контакты.Ссылка КАК Ссылка,
	|	Контакты.Вид КАК Вид,
	|	Контакты.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК Контакты
	|ГДЕ
	|	Контакты.Ссылка = &Предмет
	|	И Контакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица)";
	
	Запрос.УстановитьПараметр("Предмет", ПараметрыСинхронизации.Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//++ Структура HTTP запроса для отправки
	Структура = Новый Структура;
	//-- Структура HTTP запроса для отправки
	
	Пока Выборка.Следующий() Цикл
		
		СсылкаНаКлиента = Справочники.ФизическиеЛица.ПолучитьПартнера(Выборка.Ссылка);
		
		Структура.Вставить("id_client",XMLСтрока(СсылкаНаКлиента));
		Структура.Вставить("to",Выборка.НомерТелефона);
		//В реквизит временные данные пишу старый телефон
		Структура.Вставить("from",ПараметрыСинхронизации.ВременныеДанные);
			
	КонецЦикла;	
	
	//++ Структура запроса
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	мСтрока = Запись.Закрыть();
	//-- Структура запроса
	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Обновление номера телефона клиента на сайте", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, мРезультат.ПолучитьТелоКакСтроку());
	
	Если мРезультат.КодСостояния = 200 И СтруктураОтвета.status = "success" Тогда
		ОчиститьДанныеДляСинхронизации(ПараметрыСинхронизации.Предмет);
	Иначе
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,ПараметрыСинхронизации.Предмет,"Произошла ошибка при интеграции с сайтом.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеФИОФизЛица(ПараметрыСинхронизации)
	
	ПутьМетода = ПараметрыСинхронизации.НастройкиИнтеграции.СоответствиеМетодов.Получить(Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеФИОФизЛица);
	
	Если ПутьМетода = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеФИОФизЛица,
		"Произошла ошибка при интеграции с сайтом. Не указан путь метода API интеграции для одного из обменов.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,ПараметрыСинхронизации.НастройкиИнтеграции.ИмяПользователя,ПараметрыСинхронизации.НастройкиИнтеграции.Пароль,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ПутьМетода); 
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.Имя КАК Имя,
	|	ФизическиеЛица.Фамилия КАК Фамилия,
	|	ФизическиеЛица.Отчество КАК Отчество
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", ПараметрыСинхронизации.Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//++ Структура HTTP запроса для отправки
	Структура = Новый Структура;
	//-- Структура HTTP запроса для отправки
	
	Пока Выборка.Следующий() Цикл
		
		СсылкаНаКлиента = Справочники.ФизическиеЛица.ПолучитьПартнера(Выборка.Ссылка);
		
		Структура.Вставить("id_client",XMLСтрока(СсылкаНаКлиента));
		//+Никонов
		Имя = Выборка.Имя;
		Фамилия = Выборка.Фамилия;
		Если НЕ ЗначениеЗаполнено(Имя) И ЗначениеЗаполнено(Фамилия) Тогда
			Структура.Вставить("name",Выборка.Фамилия);
			Структура.Вставить("surname","");
		Иначе
			Структура.Вставить("name",Выборка.Имя);
			Структура.Вставить("surname",Выборка.Фамилия);
		КонецЕсли;
		//-Никонов
		Структура.Вставить("middlename",Выборка.Отчество);
		
	КонецЦикла;	
	
	//++ Структура запроса
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	мСтрока = Запись.Закрыть();
	//-- Структура запроса
	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Обновление ФИО Клиента на сайте", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, мРезультат.ПолучитьТелоКакСтроку());
	
	Если мРезультат.КодСостояния = 200 И СтруктураОтвета.success Тогда
		ОчиститьДанныеДляСинхронизации(ПараметрыСинхронизации.Предмет);
	Иначе
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,ПараметрыСинхронизации.Предмет,"Произошла ошибка при интеграции с сайтом.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом по причине:" + СтруктураОтвета.message;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеЦенИСтатусовОН(ПараметрыСинхронизации)
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСС_СообщенияИнтегрированнойСистемы.Предмет КАК Предмет,
	|	ВЫБОР
	|		КОГДА СнятыеКвартирыСПродаж.Актуальность ЕСТЬ NULL
	|			ТОГДА УПДК_НедвижимостьСрезПоследних.СтатусНедвижимости
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПДК_СтатусыНедвижимости.НеДляПродажи)
	|	КОНЕЦ КАК СтатусНедвижимости,
	|	УПДК_ФактическиеЦеныНедвижимости.Стоимость КАК Стоимость
	|ИЗ
	|	РегистрСведений.ИСС_СообщенияИнтегрированнойСистемы КАК ИСС_СообщенияИнтегрированнойСистемы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПДК_Недвижимость.СрезПоследних КАК УПДК_НедвижимостьСрезПоследних
	|		ПО ИСС_СообщенияИнтегрированнойСистемы.Предмет = УПДК_НедвижимостьСрезПоследних.ОбъектНедвижимости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПДК_ФактическиеЦеныНедвижимости КАК УПДК_ФактическиеЦеныНедвижимости
	|		ПО ИСС_СообщенияИнтегрированнойСистемы.Предмет = УПДК_ФактическиеЦеныНедвижимости.ОбъектНедвижимости
	|			И (УПДК_ФактическиеЦеныНедвижимости.ВидЦены = &ВидЦены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СнятыеКвартирыСПродаж.СрезПоследних КАК СнятыеКвартирыСПродаж
	|		ПО ИСС_СообщенияИнтегрированнойСистемы.Предмет = СнятыеКвартирыСПродаж.ОбъектНедвижимости
	|			И (СнятыеКвартирыСПродаж.Актуальность)
	|ГДЕ
	|	ИСС_СообщенияИнтегрированнойСистемы.ТипДанных = ЗНАЧЕНИЕ(Перечисление.ИСС_ТипыОбъектовДляОтправки.ОбновлениеЦенИСтатусовОН)";
	
	Запрос.УстановитьПараметр("ВидЦены", ПараметрыСинхронизации.ВидЦены);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Данные.Добавить(Новый Структура("xml_id,price,status", XMLСтрока(ВыборкаДетальныеЗаписи.Предмет), XMLСтрока(ВыборкаДетальныеЗаписи.Стоимость), ПолучитьСтатус(ВыборкаДетальныеЗаписи.СтатусНедвижимости)));
	КонецЦикла;

	ПутьМетода = ПараметрыСинхронизации.НастройкиИнтеграции.СоответствиеМетодов.Получить(Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеЦенИСтатусовОН);
	
	Если ПутьМетода = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеЦенИСтатусовОН,
		"Произошла ошибка при интеграции с сайтом. Не указан путь метода API интеграции для одного из обменов.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows()); 
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСинхронизации.HTTPServer,,ПараметрыСинхронизации.НастройкиИнтеграции.ИмяПользователя,ПараметрыСинхронизации.НастройкиИнтеграции.Пароль,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ПутьМетода); 
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
		
	//++ Структура запроса
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Новый Структура("items", Данные));
	мСтрока = Запись.Закрыть();
	//-- Структура запроса
	
	HTTPЗапрос.УстановитьТелоИзСтроки(мСтрока);
	
	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Обновление цен и статусов объектов недвижимости на сайте", ТекущаяДатаСеанса(), мСтрока);
	
	мРезультат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ЧтениеJSON	= Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(мРезультат.ПолучитьТелоКакСтроку()); 		
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);		
	ЧтениеJSON.Закрыть();
	
	РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), мРезультат.КодСостояния, мРезультат.ПолучитьТелоКакСтроку());
	
	Если мРезультат.КодСостояния = 200 И СтруктураОтвета.status = "success" Тогда		
		НаборЗаписей = РегистрыСведений.ИСС_СообщенияИнтегрированнойСистемы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТипДанных.Установить(Перечисления.ИСС_ТипыОбъектовДляОтправки.ОбновлениеЦенИСтатусовОН);
		НаборЗаписей.Записать();
	Иначе
		ЗаписьЖурналаРегистрации("Синхронизация с сайтом",УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Обработки.ИСС_ФоновыйЗапускИнтеграции,мРезультат.ПолучитьТелоКакСтроку(),"Произошла ошибка при интеграции с сайтом.");
		ВызватьИсключение "Не удалось синхронизироваться с сайтом";
	КонецЕсли;
	
КонецПроцедуры

#Область ВспомогательныеПроцедурыИФункции

Процедура ДобавитьВОбмен(Предмет, ТипДанных, ВременныеДанные = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		НастройкиИнтеграции = ИСС_НастройкиИнтеграцииСервер.ПолучитьТекущиеНастройки();
		
		Если НастройкиИнтеграции = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если НастройкиИнтеграции.ИнтеграцияАктивна Тогда
			
			Если ТипЗнч(Предмет) = Тип("Массив") Тогда
				НаборЗаписей = РегистрыСведений.ИСС_СообщенияИнтегрированнойСистемы.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ТипДанных.Установить(ТипДанных);
				НаборЗаписей.Прочитать();
				Предметы = НаборЗаписей.ВыгрузитьКолонку("Предмет");
				Для каждого ТекПредмет Из Предмет Цикл
					Если Не ЗначениеЗаполнено(ТекПредмет) Или Предметы.Найти(ТекПредмет) <> Неопределено Тогда
					    Продолжить;
					КонецЕсли;
					Запись = НаборЗаписей.Добавить();
					Запись.Предмет = ТекПредмет;
					Запись.ТипДанных = ТипДанных;
					Запись.ВременныеДанные = ВременныеДанные;
					Запись.ДатаСообщения = ТекущаяДата();			
				КонецЦикла;
				НаборЗаписей.Записать();
			Иначе	
				НаборЗаписей = РегистрыСведений.ИСС_СообщенияИнтегрированнойСистемы.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Предмет.Установить(Предмет);
				
				Запись = НаборЗаписей.Добавить();
				Запись.Предмет = Предмет;
				Запись.ТипДанных = ТипДанных;
				Запись.ВременныеДанные = ВременныеДанные;
				Запись.ДатаСообщения = ТекущаяДата();
				
				НаборЗаписей.Записать();		
			КонецЕсли;
		
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	
КонецПроцедуры

Процедура ОчиститьДанныеДляСинхронизации(Предмет)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ИСС_СообщенияИнтегрированнойСистемы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Предмет.Установить(Предмет);
	НаборЗаписей.Записать();		
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьИдентификаторПредметаНаСторонеСайта(ПараметрыСинхронизации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ИСС_ИдентификаторыПредметовИнтеграции.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Предмет.Установить(ПараметрыСинхронизации.Предмет);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Предмет = ПараметрыСинхронизации.Предмет;
	Запись.Идентификатор = ПараметрыСинхронизации.ИдентификаторНаСторонеСайта;
	Запись.ДатаОбновления = ТекущаяДата();
	
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОплатыДоговора(ЭтапыОплаты,Договор)
	
	ЭтапыОплаты.Колонки.Добавить("Оплачено",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ЭтапыОплаты.Колонки.Добавить("Долг",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ЭтапыОплаты.Колонки.Добавить("Сортировка",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПДК_ДвиженияДенежныхСредствОстатки.СуммаЭскроуОстаток + УПДК_ДвиженияДенежныхСредствОстатки.СуммаОстаток КАК СуммаОплаты
	|ИЗ
	|	РегистрНакопления.УПДК_ДвиженияДенежныхСредств.Остатки(, ОбъектДвижения = &Договор) КАК УПДК_ДвиженияДенежныхСредствОстатки";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КРаспределению = ВыборкаДетальныеЗаписи.СуммаОплаты; 			
	Иначе
		КРаспределению = 0;
	КонецЕсли;		
	
	Сч = 1;
	Для каждого ТекСтрока Из ЭтапыОплаты Цикл
		
		ТекСтрока.Сортировка = Сч;
		Сч = Сч + 1;
		
	КонецЦикла;
	
	ЭтапыОплаты.Сортировать("ДатаПлатежа");
	
	Для каждого ТекСтрока Из ЭтапыОплаты Цикл
		Если КРаспределению > 0 Тогда
			КРаспределению = КРаспределению - ТекСтрока.СуммаПлатежа;
			Если КРаспределению >= 0 Тогда
				ТекСтрока.Оплачено = ТекСтрока.СуммаПлатежа;
			Иначе
				ТекСтрока.Оплачено = ТекСтрока.СуммаПлатежа + КРаспределению;
				ТекСтрока.Долг = - КРаспределению;
			КонецЕсли;
		Иначе
			ТекСтрока.Долг = ТекСтрока.СуммаПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	ЭтапыОплаты.Сортировать("Сортировка");
	
КонецПроцедуры

Функция ПолучитьСтатус(СтатусОН)
	
	Если СтатусОН = Перечисления.УПДК_СтатусыНедвижимости.Свободно Тогда
	    Возврат "FREE";		
	ИначеЕсли СтатусОН = Перечисления.УПДК_СтатусыНедвижимости.Забронировано Тогда
	    Возврат "RESERVED";	
	ИначеЕсли СтатусОН = Перечисления.УПДК_СтатусыНедвижимости.НаОформлении Или СтатусОН = Перечисления.УПДК_СтатусыНедвижимости.НаРасторжении Тогда
	    Возврат "CONTRACT";	
	ИначеЕсли СтатусОН = Перечисления.УПДК_СтатусыНедвижимости.Продано Тогда
	    Возврат "SOLD";	
	ИначеЕсли СтатусОН = Перечисления.УПДК_СтатусыНедвижимости.НеДляПродажи Тогда  
	    Возврат "NOT_FOR_SALE";	
	ИначеЕсли СтатусОН = Перечисления.УПДК_СтатусыНедвижимости.КАренде Тогда
	    Возврат "FOR_RENT";	
	ИначеЕсли СтатусОН = Перечисления.УПДК_СтатусыНедвижимости.ВАренде Тогда
	    Возврат "IN_RENT";	
	ИначеЕсли СтатусОН = Перечисления.УПДК_СтатусыНедвижимости.АренднаяБронь Тогда
	    Возврат "RESERVED_RENT";
	ИначеЕсли СтатусОН = Перечисления.УПДК_СтатусыНедвижимости.ДоговорНаАренду Тогда
	    Возврат "CONTRACT_RENT";
	КонецЕсли;
	
КонецФункции

#КонецОбласти