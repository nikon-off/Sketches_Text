
	#Область Обработчик
	
	ТелоHTTPЗапроса = Запрос;
	ТелоКакСтроки = ТелоHTTPЗапроса.ПолучитьТелоКакСтроку();	
	ТекДата = ТекущаяДатаСеанса();
	СоздатьНовуюСделку = ПараметрыВнешнегоИнтерфейса.СоздатьНовуюСделку;

	
	//+Никонов по задаче meta-30
	Если СоздатьНовуюСделку Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЖурналОбменаAPI.Запрос КАК СТРОКА(1000)) КАК Запрос,
		|	ЖурналОбменаAPI.Предмет КАК Предмет
		|ИЗ
		|	РегистрСведений.ЖурналОбменаAPI КАК ЖурналОбменаAPI
		|ГДЕ
		|	ЖурналОбменаAPI.Запрос ПОДОБНО &Запрос";
		
		Запрос.УстановитьПараметр("Запрос", ТелоКакСтроки);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Webhook_Tilda_Tesla", ТекДата, ТелоКакСтроки);
			РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, "Дубль запроса", Выборка.Предмет);	
			
			Перейти ~КонецОбработки;				
		КонецЕсли;  	
	КонецЕсли;
	//-Никонов
	
	
	НачатьТранзакцию();

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналОбменаAPI");
	ЭлементБлокировки.УстановитьЗначение("Наименование", "Webhook_Tilda_Tesla");
	Блокировка.Заблокировать(); 

	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаAPI.ДобавитьЗапросВЖурнал("Webhook_Tilda_Tesla", ТекДата, ТелоКакСтроки);


	Если ТелоКакСтроки = "test=test" Тогда
		
		Ответ.УстановитьТелоИзСтроки("test=test");
		Перейти ~КонецОбработки;
		
	КонецЕсли;	
	
	Попытка
		
		Автор = ПараметрыВнешнегоИнтерфейса.Автор;
		КаналИсточника = ПараметрыВнешнегоИнтерфейса.КаналИсточника;
		
		ДанныеЗаявки = РаскодироватьСтроку(ТелоКакСтроки, СпособКодированияСтроки.URLВКодировкеURL); 
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеЗаявки, "&");
		
		Заявка = Новый Структура;
		
		Для Каждого ТекСтр из МассивПодстрок Цикл
			
			ТекПодстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекСтр, "=");
			Заявка.Вставить(СтрЗаменить(ТекПодстроки[0], "-", ""), СтрЗаменить(ТекПодстроки[1], "+", " "));	
			
		КонецЦикла;
		
		Заявка.Вставить("Комментарий", "");
		
		Если Заявка.Свойство("formname") Тогда
			Заявка.Вставить("Комментарий", СтрЗаменить(Заявка.formname, "+", " "));		
		КонецЕсли;
		
		ИсточникСсылка = Справочники.МаркетинговыеМероприятия.НайтиСоздатьИсточник(Заявка);
		
		ТипЗаявки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Заявка, "Hidden", Неопределено);
		
		Если ВРег(ТипЗаявки) = ВРег("formAN") Тогда
			
			#Область ЗаявкаАН
			
			Попытка
				
				ТочкаСтарта = ПараметрыВнешнегоИнтерфейса.ТочкаСтартаАН;
				КартаМаршрута = ПараметрыВнешнегоИнтерфейса.КартаМаршрутаАН;
				Тема = "Заявка от АН";
				
				НомерТелефонаКлиента = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Заявка, "phone", "")); 
				НомерТелефонаАгента  = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(Заявка.phone_2); 
				
				Если не ЗначениеЗаполнено(НомерТелефонаКлиента) Тогда
					НомерТелефонаКлиента = НомерТелефонаАгента;			
				КонецЕсли;
				
				
				ФИОКлиента 			 = СокрЛП(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Заявка, "name", ""));
				ФИОАгента			 = СокрЛП(Заявка.name_2);
				
				Если Не ЗначениеЗаполнено(ФИОКлиента) Тогда
					ФИОКлиента = ФИОАгента;
				КонецЕсли;
				
				АН					 = СокрЛП(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Заявка, "Input", ""));
				EmailАгента 		 = СокрЛП(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Заявка, "Email", ""));
				ОписаниеКвартиры     = СокрЛП(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Заявка, "Input_2", ""));
				Проект 				 = СокрЛП(Заявка.Selectbox);
				НужныйМенеджер		 = СокрЛП(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Заявка, "Selectbox_2", ""));
				ПрямоеОбщение		 = СокрЛП(Заявка.Selectbox_3);
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	сфпНомераТелефоновДляПоиска.Объект КАК Ссылка
				|ИЗ
				|	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
				|ГДЕ
				|	сфпНомераТелефоновДляПоиска.НомерТелефона = &НомерТелефона
				|	И сфпНомераТелефоновДляПоиска.Объект ССЫЛКА Справочник.ФизическиеЛица";
				
				Запрос.УстановитьПараметр("НомерТелефона", НомерТелефонаАгента);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					
					АгентСсылка = ВыборкаДетальныеЗаписи.Ссылка;
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ПартнерыКонтактныеЛица.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Партнеры.КонтактныеЛица КАК ПартнерыКонтактныеЛица
					|ГДЕ
					|	ПартнерыКонтактныеЛица.ФизЛицо = &ФизЛицо
					|	И ПартнерыКонтактныеЛица.ПравоПодписи
					|	И ПартнерыКонтактныеЛица.Ссылка.АгентствоНедвижимости";
					
					Запрос.УстановитьПараметр("ФизЛицо", АгентСсылка);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						
						АНСсылка = ВыборкаДетальныеЗаписи.Ссылка;
					Иначе
						
						АНСсылка = ПараметрыВнешнегоИнтерфейса.АНПоУмолчанию;
						
					КонецЕсли;	

				Иначе			
					
					ФИО = ФИОАгента;
					
					МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФИО, " ");				
					КоличествоСлов = МассивПодстрок.Количество(); 				
					Фамилия = "";
					Имя = "";
					Отчество = "";
					
					Если КоличествоСлов > 0 Тогда		
						Фамилия = МассивПодстрок[0]; 		
					КонецЕсли;
					
					Если КоличествоСлов > 1 Тогда		
						Имя = МассивПодстрок[1]; 		
					КонецЕсли;
					
					Если КоличествоСлов > 2 Тогда
						
						Отчество = "";
						
						Для Счетчик = 2 по КоличествоСлов-1 Цикл
							Отчество = Отчество + " " + МассивПодстрок[Счетчик];
						КонецЦикла;
						
						Отчество = СокрЛП(Отчество);
						
					КонецЕсли;
					
					НовФизлицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
					УправлениеКонтактнойИнформацией.ДобавитьНовыйТелефон(НовФизлицо, НомерТелефонаАгента);
					
					Если ЗначениеЗаполнено(EmailАгента) Тогда
						
						НовКИ = НовФизлицо.КонтактнаяИнформация.Добавить();
						НовКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица;
						НовКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
						НовКИ.Представление = EmailАгента;
						НовКИ.АдресЭП = EmailАгента;
						
					КонецЕсли;
					
					
					
					НовФизлицо.Фамилия = Фамилия;
					НовФизлицо.Имя = Имя;
					НовФизлицо.Отчество = Отчество; 	
					НовФизлицо.Наименование = ФИО;
					НовФизлицо.Записать(); 
					
					АгентСсылка = НовФизлицо.Ссылка; 			
					
					НовКонтакт = Справочники.Партнеры.СоздатьЭлемент();
					НовКонтакт.ДатаРегистрации = ТекущаяДатаСеанса();
					НовКонтакт.Наименование = ФИО;
					НовКонтакт.CRM_ФизЛицо = Ложь;
					НовКонтакт.ВидПартнера = Перечисления.ВидПартнера.Компания;	
					НовКонтакт.АгентствоНедвижимости = Истина;
					НовКонтакт.ОсновноеКонтактноеЛицо = НовФизлицо.Ссылка;
					
					НовКЛ = НовКонтакт.КонтактныеЛица.Добавить();
					НовКл.ФизЛицо = НовФизлицо.Ссылка;
					НовКл.ПравоПодписи = Истина;
					
					НовКонтакт.Записать();
					
					РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(НовКонтакт.Ссылка, Перечисления.СтатусыКлиента.Контакт);
									
					сфпСофтФонПроСервер.сфпЗаполнитьРегистрПоискаПоНомерам(АгентСсылка);

				КонецЕсли;
				
				//НачатьТранзакцию();
				
				БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
				
				БизнесПроцесс.КартаМаршрута = КартаМаршрута;
				БизнесПроцесс.ДатаСтарта = ТекДата;
				БизнесПроцесс.Наименование = Тема;
				БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
				БизнесПроцесс.Дата = ТекДата;
				БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
				БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
				БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
				БизнесПроцесс.Автор = Автор;
				БизнесПроцесс.Телефон = Справочники.ШаблоныНомеровТелефонов.ОбработатьНомерТелефонаПоМаске(НомерТелефонаКлиента);		
				БизнесПроцесс.Агент = АгентСсылка;
				БизнесПроцесс.АгентствоНедвижимости = АНСсылка;
				БизнесПроцесс.Ф_Проект = Справочники.УПДК_Проекты.НайтиПоНаименованию(Проект);
				 
				ЗаполнитьЗначенияСвойств(БизнесПроцесс, УПДК_ФизическиеЛица.ПоискКлиентаПоНомеруТелефона(НомерТелефонаКлиента));
				
				НовыйКлиент = Ложь;

				Если Не ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда                           
					
					ФИО = ФИОКлиента;
					
					МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФИО, " ");
					
					КоличествоСлов = МассивПодстрок.Количество();
					
					Фамилия = "";
					Имя = "";
					Отчество = "";
					
					Если КоличествоСлов > 0 Тогда		
						Фамилия = МассивПодстрок[0]; 		
					КонецЕсли;
					
					Если КоличествоСлов > 1 Тогда		
						Имя = МассивПодстрок[1]; 		
					КонецЕсли;
					
					Если КоличествоСлов > 2 Тогда
						
						Отчество = "";
						
						Для Счетчик = 2 по КоличествоСлов-1 Цикл
							Отчество = Отчество + " " + МассивПодстрок[Счетчик];
						КонецЦикла;
						
						Отчество = СокрЛП(Отчество);
						
					КонецЕсли;
					
					НовФизлицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
					УправлениеКонтактнойИнформацией.ДобавитьНовыйТелефон(НовФизлицо, НомерТелефонаКлиента);
					
					НовФизлицо.Фамилия = Фамилия;
					НовФизлицо.Имя = Имя;
					НовФизлицо.Отчество = Отчество; 	
					НовФизлицо.Наименование = ФИО;
					НовФизлицо.Записать(); 
					
					НовКонтакт = Справочники.Партнеры.СоздатьЭлемент();
					НовКонтакт.ДатаРегистрации = ТекДата;
					НовКонтакт.Наименование = ФИО;
					НовКонтакт.CRM_ФизЛицо = Истина;
					НовКонтакт.ВидПартнера = Перечисления.ВидПартнера.ЧастноеЛицо;				
					НовКонтакт.ОсновноеКонтактноеЛицо = НовФизлицо.Ссылка;
					
					НовКЛ = НовКонтакт.КонтактныеЛица.Добавить();
					НовКл.ФизЛицо = НовФизлицо.Ссылка;
					НовКл.ПравоПодписи = Истина;
					
					НовКонтакт.Записать();
					
					РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(НовКонтакт.Ссылка, Перечисления.СтатусыКлиента.Контакт);
					
					БизнесПроцесс.Партнер = НовКонтакт.Ссылка;
					БизнесПроцесс.КонтактноеЛицо = НовФизлицо.Ссылка;

					Если СоздатьНовуюСделку Тогда
						НовыйКлиент = Истина;
					КонецЕсли;
					
				//+Никонов	
				ИначеЕсли Не СоздатьНовуюСделку Тогда
					//--------------------------------------Склеиваем задачи ---------------------------------
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЗадачаИсполнителя.Ссылка КАК Ссылка
					|ИЗ
					|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
					|ГДЕ
					|	ЗадачаИсполнителя.БизнесПроцесс.Стартован
					|	И ЗадачаИсполнителя.БизнесПроцесс.ДатаСтарта >= &ДатаСтарта
					|	И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута = &КартаМаршрута
					|	И ЗадачаИсполнителя.БизнесПроцесс.Партнер = &Партнер";
					
					Запрос.УстановитьПараметр("ДатаСтарта", ТекДата - 60*60);
					Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
					Запрос.УстановитьПараметр("Партнер", БизнесПроцесс.Партнер);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						
						//ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
						//
						//Комментарий = Заявка.Комментарий; 
						//
						//ЗадачаОбъект.Описание = ЗадачаОбъект.Описание + Символы.ПС + "Аналогичная заявка от клиента от " + Строка(ТекДата) + Символы.ПС + Комментарий;
						//
						//ЗадачаОбъект.Записать();
						
						РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, "Дубль", ВыборкаДетальныеЗаписи.Ссылка.БизнесПроцесс);				
						
						Если ТранзакцияАктивна() Тогда 					
							ЗафиксироватьТранзакцию();  
						КонецЕсли;
						
						Ответ.УстановитьТелоИзСтроки("Success");
						
						Перейти ~КонецОбработки; 			
						
					КонецЕсли;
					
				КонецЕсли; 		
				
				БизнесПроцесс.Основание = БизнесПроцесс.Партнер;		
				БизнесПроцесс.Записать();
				СвязанноеСобытие = Документы.CRM_Событие.СоздатьДокумент();
				ДанныеЗаполнения = Новый Структура;
			
			
			
				ДанныеЗаполнения.Вставить("Партнер", БизнесПроцесс.Партнер);
			
				ДанныеЗаполнения.Вставить("КонтактноеЛицо", БизнесПроцесс.КонтактноеЛицо);
				
				ДанныеЗаполнения.Вставить("Предмет", БизнесПроцесс.ОбъектНедвижимости);
				
				ДанныеЗаполнения.Вставить("Проект", Проект);
				
				ДанныеЗаполнения.Вставить("Автор", Автор);
				
				ДанныеЗаполнения.Вставить("Ответственный", Автор);
				
				ДанныеЗаполнения.Вставить("Место", БизнесПроцесс.Телефон);

				СвязанноеСобытие.Заполнить(ДанныеЗаполнения);
				
				СвязанноеСобытие.Проект = ПараметрыВнешнегоИнтерфейса.ВидСобытия;				
				СвязанноеСобытие.УПДК_Проект = БизнесПроцесс.Ф_Проект;
				СвязанноеСобытие.Тема = Тема;
				СвязанноеСобытие.Результат = Заявка.Комментарий;	
				СвязанноеСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано;
				СвязанноеСобытие.УПДК_Агент = БизнесПроцесс.Агент;				
				
				
				СвязанноеСобытие.Записать();
				
				Если Не НовыйКлиент Тогда
					Документы.Сделка.ДобавитьНовуюСделку(СвязанноеСобытие.Ссылка);
				КонецЕсли;


				//Документы.Сделка.ДобавитьНовуюСделку(СвязанноеСобытие.Ссылка); 
				
				//+++++Бронникова 05.09.22
				Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(СвязанноеСобытие.Ссылка).ПолучитьОбъект();
				Сделка.НеВыгружатьВРоистат = Истина;
				Сделка.Записать();

				//+++++Бронникова

				// добавим проект в потребности
				ТекОбъект = Сделка.ПолучитьОбъект();
				НовСтр = ТекОбъект.Потребности.Добавить();			
				НовСтр.ВидПотребности = ПланыВидовХарактеристик.ПотребностиКлиентов.Проекты;
				НовСтр.Значение = ПараметрыВнешнегоИнтерфейса.Проект;
				ТекОбъект.Записать();	
				

				БизнесПроцесс.Старт();
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗадачаИсполнителя.Ссылка КАК Ссылка
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
				
				ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();  
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					
					ЗадачаОбъект.Описание = СтрШаблон("Заявка с формы АН
					|АН: %1
					|Проект: %2
					|Описание квартиры: %3
					|Предпочитаемый менеджер: %4
					|Разрешение работать с клиентом напрямую: %5", АН, Проект, ОписаниеКвартиры, НужныйМенеджер, ПрямоеОбщение);  
					
					
					
					ТекДата = ТекДата;
					НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Сделка.Установить(БизнесПроцесс.Ссылка);			
					НаборЗаписей.Отбор.Партнер.Установить(БизнесПроцесс.Партнер);
					
					Запись = НаборЗаписей.Добавить();
					Запись.Период = ТекДата;
					Запись.КаналПервичногоИнтереса = КаналИсточника;
					Запись.ИсточникПервичногоИнтереса = ИсточникСсылка;
					
					Запись.Партнер = БизнесПроцесс.Партнер;
					Запись.Сделка = БизнесПроцесс.Ссылка;			
					НаборЗаписей.Записать();
					
					Попытка
						
						НаборЗаписей = РегистрыСведений.ДанныеКонтекстнойРекламы.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Клиент.Установить(БизнесПроцесс.Партнер);	
						НаборЗаписей.Отбор.Период.Установить(ТекДата);
						
						Запись = НаборЗаписей.Добавить();
						Запись.Период = ТекДата;
						Запись.Клиент = БизнесПроцесс.Партнер;
						ЗаполнитьЗначенияСвойств(Запись, Заявка);
						Запись.ИсточникСсылка = ИсточникСсылка;
						Запись.КаналСсылка = КаналИсточника;
						
						НаборЗаписей.Записать();
						
					Исключение
					КонецПопытки;
					
					ЗадачаОбъект.Записать();
					
				КонецЦикла; 
				
				//Предмет а заметку
				
				РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, "Успешно", БизнесПроцесс.Ссылка);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Ответ.УстановитьТелоИзСтроки("Error: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Перейти ~КонецОбработки;
				
			КонецПопытки; 
			
			Ответ.УстановитьТелоИзСтроки("Success");
			
			
			#КонецОбласти
			
		Иначе
			
			#Область ОнлайнЗаявка
			
			Попытка
				
				ТочкаСтарта = ПараметрыВнешнегоИнтерфейса.ТочкаСтарта;
				КартаМаршрута = ПараметрыВнешнегоИнтерфейса.КартаМаршрута;
				Тема = "Онлайн заявка";
				Автор = ПараметрыВнешнегоИнтерфейса.Автор;
				КаналИсточника = ПараметрыВнешнегоИнтерфейса.КаналИсточника;
				
			
				ИнформацияОСобытии = Заявка;
				Если ИнформацияОСобытии.Свойство("phone") Тогда
					НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ИнформацияОСобытии.phone); 
				ИначеЕсли ИнформацияОСобытии.Свойство("Телефон") Тогда
					НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ИнформацияОСобытии.Телефон);
				КонецЕсли;
	//			НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ИнформацияОСобытии.phone); 
				Если ИнформацияОСобытии.Свойство("email") Тогда
					Email = СокрЛП(ИнформацияОСобытии.email);
				Иначе
					Email = Неопределено;
				КонецЕсли;  
				
				
				//НачатьТранзакцию();
				
				
				БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
				
				БизнесПроцесс.КартаМаршрута = КартаМаршрута;
				БизнесПроцесс.ДатаСтарта = ТекущаяДатаСеанса();
				БизнесПроцесс.Наименование = Тема;
				БизнесПроцесс.Организация = Справочники.Организации.ОсновнаяОрганизация; 
				БизнесПроцесс.Дата = ТекущаяДатаСеанса();
				БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
				БизнесПроцесс.НомерВерсииКартыМаршрута = КартаМаршрута.НомерВерсии;
				БизнесПроцесс.ТочкаСтарта = ТочкаСтарта;
				БизнесПроцесс.Автор = Автор;
				БизнесПроцесс.Телефон = Справочники.ШаблоныНомеровТелефонов.ОбработатьНомерТелефонаПоМаске(НомерТелефона);
				БизнесПроцесс.Описание=РаскодироватьСтроку(ТелоКакСтроки, СпособКодированияСтроки.URLВКодировкеURL);
				ЗаполнитьЗначенияСвойств(БизнесПроцесс, УПДК_ФизическиеЛица.ПоискКлиентаПоНомеруТелефона(НомерТелефона));
				
				//Если Не ЗначениеЗаполнено(БизнесПроцесс.Партнер) И ЗначениеЗаполнено(Email) Тогда
				//	ЗаполнитьЗначенияСвойств(БизнесПроцесс, УПДК_ФизическиеЛица.ПоискКлиентаПоEmail(Email)); 
				//КонецЕсли;                       
				
				
				НовыйКлиент = Ложь;

				Если Не ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда                           
					
					Если ИнформацияОСобытии.Свойство("name") Тогда
						ФИО = ИнформацияОСобытии.name;
					Иначе
						ФИО = "Клиент с номером " + НомерТелефона;
					КонецЕсли;
					
					МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФИО, " ");
					
					КоличествоСлов = МассивПодстрок.Количество();
					
					Фамилия = "";
					Имя = "";
					Отчество = "";
					
					Если КоличествоСлов > 0 Тогда		
						Фамилия = МассивПодстрок[0]; 		
					КонецЕсли;
					
					Если КоличествоСлов > 1 Тогда		
						Имя = МассивПодстрок[1]; 		
					КонецЕсли;
					
					Если КоличествоСлов > 2 Тогда
						
						Отчество = "";
						
						Для Счетчик = 2 по КоличествоСлов-1 Цикл
							Отчество = Отчество + " " + МассивПодстрок[Счетчик];
						КонецЦикла;
						
						Отчество = СокрЛП(Отчество);
						
					КонецЕсли;
					
					НовФизлицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
					УправлениеКонтактнойИнформацией.ДобавитьНовыйТелефон(НовФизлицо, НомерТелефона);
					
					Если ЗначениеЗаполнено(Email) Тогда
						
						НовКИ = НовФизлицо.КонтактнаяИнформация.Добавить();
						НовКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица;
						НовКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
						НовКИ.Представление = Email;
						НовКИ.АдресЭП = Email;
						
					КонецЕсли;
					
					НовФизлицо.Фамилия = Фамилия;
					НовФизлицо.Имя = Имя;
					НовФизлицо.Отчество = Отчество; 	
					НовФизлицо.Наименование = ФИО;
					НовФизлицо.Записать(); 
					
					НовКонтакт = Справочники.Партнеры.СоздатьЭлемент();
					НовКонтакт.ДатаРегистрации = ТекущаяДатаСеанса();
					НовКонтакт.Наименование = ФИО;
					НовКонтакт.CRM_ФизЛицо = Истина;
					НовКонтакт.ВидПартнера = Перечисления.ВидПартнера.ЧастноеЛицо;				
					НовКонтакт.ОсновноеКонтактноеЛицо = НовФизлицо.Ссылка;
					
					НовКЛ = НовКонтакт.КонтактныеЛица.Добавить();
					НовКл.ФизЛицо = НовФизлицо.Ссылка;
					НовКл.ПравоПодписи = Истина;
					
					НовКонтакт.Записать();
					
					РегистрыСведений.СтатусыКлиентов.УстановитьСтатусКлиента(НовКонтакт.Ссылка, Перечисления.СтатусыКлиента.Контакт);
					
					
					БизнесПроцесс.Партнер = НовКонтакт.Ссылка;
					БизнесПроцесс.КонтактноеЛицо = НовФизлицо.Ссылка;
					
					Если СоздатьНовуюСделку Тогда
						НовыйКлиент = Истина;
					КонецЕсли;
					
				
				//+Никонов	
				ИначеЕсли Не СоздатьНовуюСделку Тогда
				//--------------------------------------Склеиваем задачи ---------------------------------
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЗадачаИсполнителя.Ссылка КАК Ссылка
					|ИЗ
					|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
					|ГДЕ
					|	НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен
					|	И ЗадачаИсполнителя.БизнесПроцесс.Стартован
					|	И ЗадачаИсполнителя.БизнесПроцесс.ДатаСтарта >= &ДатаСтарта
					|	И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута = &КартаМаршрута
					|	И НЕ ЗадачаИсполнителя.Выполнена
					|	И ЗадачаИсполнителя.БизнесПроцесс.Партнер = &Партнер";
					
					Запрос.УстановитьПараметр("ДатаСтарта", ТекущаяДата()-24*60*60);
					Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
					Запрос.УстановитьПараметр("Партнер", БизнесПроцесс.Партнер);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						
						ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
						
						Комментарий = Заявка.Комментарий; 
						
						ЗадачаОбъект.Описание = ЗадачаОбъект.Описание + Символы.ПС + "Аналогичная заявка от клиента от " + Строка(ТекущаяДата()) + Символы.ПС + Комментарий;
						
						ЗадачаОбъект.Записать();
					
						РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, "Дубль", ВыборкаДетальныеЗаписи.Ссылка.БизнесПроцесс);
						ЗафиксироватьТранзакцию();
						
						Ответ.УстановитьТелоИзСтроки("Success");
						
						Перейти ~КонецОбработки; 
								
						
					КонецЕсли;
					
				КонецЕсли;
				
				
				БизнесПроцесс.Основание = БизнесПроцесс.Партнер;
				
				СвязанноеСобытие = Документы.CRM_Событие.СоздатьДокумент();
			
				ДанныеЗаполнения = Новый Структура;
				
				
				
				ДанныеЗаполнения.Вставить("Партнер", БизнесПроцесс.Партнер);
				
				ДанныеЗаполнения.Вставить("КонтактноеЛицо", БизнесПроцесс.КонтактноеЛицо);
				
				ДанныеЗаполнения.Вставить("Предмет", БизнесПроцесс.ОбъектНедвижимости);
				
				ДанныеЗаполнения.Вставить("Проект", Проект);
				
				ДанныеЗаполнения.Вставить("Автор", Автор);

				ДанныеЗаполнения.Вставить("Ответственный", Автор);
				
				ДанныеЗаполнения.Вставить("Место", БизнесПроцесс.Телефон);

				ДанныеЗаполнения.Вставить("ВидСобытия", 		ПараметрыВнешнегоИнтерфейса.ВидСобытия1);
				
				
				
				СвязанноеСобытие.Заполнить(ДанныеЗаполнения);
				
				СвязанноеСобытие.Проект = ПараметрыВнешнегоИнтерфейса.ВидСобытия1;				
				СвязанноеСобытие.УПДК_Проект = БизнесПроцесс.Ф_Проект;				
				СвязанноеСобытие.Тема = Тема;
				СвязанноеСобытие.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано;
				СвязанноеСобытие.УПДК_Агент = БизнесПроцесс.Агент;				
				
				
				СвязанноеСобытие.Записать();

				Если Не НовыйКлиент Тогда
					Документы.Сделка.ДобавитьНовуюСделку(СвязанноеСобытие.Ссылка);
				КонецЕсли;
				
				

				//Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(СвязанноеСобытие.Ссылка);
				
				//Если Не ЗначениеЗаполнено(Сделка) Тогда
					
					//Документы.Сделка.ДобавитьНовуюСделку(СвязанноеСобытие.Ссылка);
					
				//КонецЕсли;

				//Документы.Сделка.ДобавитьНовуюСделку(СвязанноеСобытие.Ссылка);   
				//+++++Бронникова 05.09.22
				//Сделка = Документы.Сделка.ПолучитьСделкуПоДокументу(СвязанноеСобытие.Ссылка).ПолучитьОбъект();
				//Сделка.НеВыгружатьВРоистат = Истина;
				//Сделка.Записать();
				//+++++Бронникова
				
				БизнесПроцесс.Записать();
			
				БизнесПроцесс.Старт();
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|              ЗадачаИсполнителя.Ссылка
				|ИЗ
				|              Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|              ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
				
				ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();  
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					
					Комментарий = Заявка.Комментарий; 
					
					ТекДата = ТекущаяДАта();
					НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Сделка.Установить(БизнесПроцесс.Ссылка);			
					НаборЗаписей.Отбор.Партнер.Установить(БизнесПроцесс.Партнер);
					
					Запись = НаборЗаписей.Добавить();
					Запись.Период = ТекДата;
					Запись.КаналПервичногоИнтереса = КаналИсточника;
					Запись.ИсточникПервичногоИнтереса = ИсточникСсылка;
					
					Запись.Партнер = БизнесПроцесс.Партнер;
					Запись.Сделка = БизнесПроцесс.Ссылка;			
					НаборЗаписей.Записать();
					
					Попытка
						
						НаборЗаписей = РегистрыСведений.ДанныеКонтекстнойРекламы.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Клиент.Установить(БизнесПроцесс.Партнер);	
						НаборЗаписей.Отбор.Период.Установить(ТекДата);
						
						Запись = НаборЗаписей.Добавить();
						Запись.Период = ТекДата;
						Запись.Клиент = БизнесПроцесс.Партнер;
						ЗаполнитьЗначенияСвойств(Запись, Заявка);
						Запись.ИсточникСсылка = ИсточникСсылка;
						Запись.КаналСсылка = КаналИсточника;
						
						НаборЗаписей.Записать();
						
					Исключение
					КонецПопытки;
					
					ЗадачаОбъект.Описание = Тема + Символы.ПС + Комментарий;
					
					ЗадачаОбъект.Записать();
					
				КонецЦикла; 
				
				РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 200, "Успешно", БизнесПроцесс.Ссылка);


				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
				Ответ.УстановитьТелоИзСтроки("Error: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Перейти ~КонецОбработки;
				
			КонецПопытки; 
			
			Ответ.УстановитьТелоИзСтроки("Success");
			
			#КонецОбласти
			
		КонецЕсли;
		
	Исключение
		
		РегистрыСведений.ЖурналОбменаAPI.ДобавитьОтветВЖурнал(ЗаписьЖурнала, ТекущаяДатаСеанса(), 500, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		Ответ.УстановитьТелоИзСтроки("Error: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	~КонецОбработки:

	#КонецОбласти
